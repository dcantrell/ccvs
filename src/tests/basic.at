dnl Copyright (C) 2003 Derek Price, Ximbiot,
dnl			& The Free Software Foundation, Inc.
dnl
dnl This program is free software; you can redistribute it and/or modify
dnl it under the terms of the GNU General Public License as published by
dnl the Free Software Foundation; either version 2, or (at your option)
dnl any later version.
dnl
dnl This program is distributed in the hope that it will be useful,
dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl GNU General Public License for more details.

AT_CVS_BANNER([Basic Functionality])

AT_CVS_SETUP([Operations on empty projects])

AT_KEYWORDS([update diff status])

# Test a few operations, to ensure they gracefully do
# nothing in an empty directory.
AT_CHECK([cvs -q update])
AT_CHECK([cvs -q diff -c])
AT_CHECK([cvs -q status])
AT_CHECK([cvs -q update .])
AT_CHECK([cvs -q update ./])

AT_CLEANUP # Operations on empty projects



AT_CVS_SETUP([Adding directories and files])

mkdir sdir

# FIXCVS
# Remote CVS gives the "cannot open CVS/Entries" error, which is
# clearly a bug, but not a simple one to fix.
AT_CHECK_NOESCAPE([cvs -n add sdir],[0],
[Directory $CVSROOT_DIR/project/sdir added to the repository
])
AT_CHECK([test -d $CVSROOT_DIR/project/sdir], [1])

AT_CHECK_NOESCAPE([cvs add sdir],,
[Directory $CVSROOT_DIR/project/sdir added to the repository
])

cd sdir
mkdir ssdir
AT_CHECK_NOESCAPE([cvs add ssdir],,
[Directory $CVSROOT_DIR/project/sdir/ssdir added to the repository
])

cd ssdir
echo ssfile >ssfile

# Trying to commit it without a "cvs add" should be an error.
# The "use `cvs add' to create an entry" message is the one
# that I consider to be more correct, but local cvs prints the
# "nothing known" message and noone has gotten around to fixing it.
AT_CHECK_NOESCAPE([cvs -q ci ssfile], [1],,
[AT_CVS_REMOTE(
[[$CPROG commit: use \`$CPROG add' to create an entry for ssfile
$CPROG [commit aborted]: correct above errors first!
]],
[[$CPROG commit: nothing known about \`ssfile'
$CPROG [commit aborted]: correct above errors first!
]])])

AT_CVS_CHECK_NORMALIZED([cvs add ssfile],,,
[$SPROG add: scheduling file \`ssfile' for addition
$SPROG add: use \`$SPROG commit' to add this file permanently
])

AT_CVS_CHECK_NORMALIZED([cvs tag tag0 ssfile],[1],,
[[$SPROG tag: nothing known about ssfile
$SPROG [tag aborted]: correct the above errors first!
]])

cd ../..
AT_CHECK_NOESCAPE([cvs -q ci -m add-it],,
[RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
done
Checking in sdir/ssdir/ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
initial revision: 1.1
done
])

AT_CLEANUP # Adding files



# AT_CVS_SIMPLE_PROJECT()
#
# This project creates the following starter project.
#
#   project
#     \-sdir
#         \-ssdir
#             \-ssfile
#
m4_defun([AT_CVS_SIMPLE_PROJECT],
[mkdir sdir
AT_CHECK_NOESCAPE([cvs add sdir],,
[Directory $CVSROOT_DIR/project/sdir added to the repository
])
cd sdir
mkdir ssdir
AT_CHECK_NOESCAPE([cvs add ssdir],,
[Directory $CVSROOT_DIR/project/sdir/ssdir added to the repository
])
cd ssdir
echo ssfile >ssfile
AT_CVS_CHECK_NORMALIZED([cvs add ssfile],,,
[$SPROG add: scheduling file \`ssfile' for addition
$SPROG add: use \`$SPROG commit' to add this file permanently
])
AT_CHECK_NOESCAPE([cvs -q ci -m add-it],,
[RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
done
Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
initial revision: 1.1
done
])
cd ../..
])dnl



AT_CVS_SETUP([tag, update, & diff])

AT_CVS_SIMPLE_PROJECT()

AT_CVS_CHECK_NORMALIZED([cvs -q tag BASE sdir/ssdir/ssfile],[1],,
[[$SPROG tag: Attempt to add reserved tag name BASE
$SPROG [tag aborted]: failed to set tag BASE to revision 1.1 in $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
]])

AT_CHECK([cvs -q tag NOT_RESERVED],,[T sdir/ssdir/ssfile
])

AT_CHECK([cvs -q update])

echo "ssfile line 2" >>sdir/ssdir/ssfile
AT_CVS_CHECK_NORMALIZED([cvs -q diff -c],[1],
[Index: sdir/ssdir/ssfile
===================================================================
RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
retrieving revision 1.1
diff -c -r1.1 ssfile
*** sdir/ssdir/ssfile	RFCDATE	1.1
--- sdir/ssdir/ssfile	RFCDATE
***************
*** 1 ****
--- 1,2 ----
  ssfile
+ ssfile line 2
])

AT_CVS_CHECK_NORMALIZED([cvs -q diff -c -rBASE],[1],
[Index: sdir/ssdir/ssfile
===================================================================
RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
retrieving revision 1.1
diff -c -r1.1 ssfile
*** sdir/ssdir/ssfile	RFCDATE	1.1
--- sdir/ssdir/ssfile	RFCDATE
***************
*** 1 ****
--- 1,2 ----
  ssfile
+ ssfile line 2
])

AT_CVS_CHECK_NORMALIZED([cvs -q diff -c -rBASE -C3isacrowd],[1],
[Index: sdir/ssdir/ssfile
===================================================================
RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
retrieving revision 1.1
diff -c -C3isacrowd -r1.1 ssfile
],
[$SPROG diff: invalid context length argument
])

AT_CLEANUP # tag, update, & diff



AT_CVS_SETUP([strange revision numbers])

AT_KEYWORDS([commit commit-r diff diff-r admin admin-o resurrection])

AT_CVS_SIMPLE_PROJECT()

AT_CHECK([cvs -q tag NOT_RESERVED],,[T sdir/ssdir/ssfile
])

echo "ssfile line 2" >>sdir/ssdir/ssfile
AT_CHECK_NOESCAPE([cvs -q ci -m modify-it],,
[Checking in sdir/ssdir/ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 1.2; previous revision: 1.1
done
])

AT_CHECK_NOESCAPE([cvs -q ci nonexist],[1],,
[[$CPROG commit: nothing known about \`nonexist'
$CPROG [commit aborted]: correct above errors first!
]])

AT_CHECK([cvs -q update .])

# Test the -f option to ci
cd sdir/ssdir
AT_CHECK([cvs -q ci -m not-modified ssfile])

AT_CHECK_NOESCAPE([cvs -q ci -f -m force-it],,
[Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 1.3; previous revision: 1.2
done
])

AT_CHECK_NOESCAPE([cvs -q ci -m bump-it -r 2.0],,
[Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 2.0; previous revision: 1.3
done
])

# -f should not be necessary, but it should be harmless.
# Also test the "-r 3" (rather than "-r 3.0") usage.
AT_CHECK_NOESCAPE([cvs -q ci -m bump-it -f -r 3],,
[Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 3.1; previous revision: 2.0
done
])

# Test using -r to create a branch
AT_CVS_CHECK_NORMALIZED([cvs -q ci -m bogus -r 3.0.0],[1],
[Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
],
[$SPROG commit: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v: can't find branch point 3.0
$SPROG commit: could not check in ssfile
])

AT_CHECK_NOESCAPE([cvs -q ci -m valid -r 3.1.2],,
[Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 3.1.2.1; previous revision: 3.1
done
])

# now get rid of the sticky tag and go back to the trunk
AT_CVS_CHECK_NORMALIZED([cvs -q up -A ./],,
[U ssfile
])

AT_CHECK([cvs -q diff -r1.2 -r1.3])

AT_CHECK([cvs -q diff -r1.2 -r1.3 -C 3isacrowd])

# If memory serves, some systems (AIX?) have a different message than
# "No such file or directory".  When rediscovered, they will need to be
# accomodated below.
AT_CVS_CHECK_NORMALIZED([cvs -q -d $at_group_dir/nonexist update],[1],,
[[$CPROG [update aborted]: $at_group_dir/nonexist/CVSROOT: No such file or directory
]])

# Test resurrecting with strange revision numbers
AT_CVS_CHECK_NORMALIZED([cvs rm -f ssfile],,,
[$SPROG remove: scheduling \`ssfile' for removal
$SPROG remove: use \`${SPROG} commit' to remove this file permanently
])

AT_CHECK_NOESCAPE([cvs -q ci -m remove],,
[Removing ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: delete; previous revision: 3.1
done
])

AT_CHECK([cvs -q up -p -r 3.1 ./ssfile >ssfile])
AT_CVS_CHECK_NORMALIZED([cvs add ssfile],,,
[$SPROG add: re-adding file \`ssfile' (in place of dead revision 3.2)
$SPROG add: use \`$SPROG commit' to add this file permanently
])

AT_CHECK_NOESCAPE([cvs -q ci -m resurrect],,
[Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 3.3; previous revision: 3.2
done
])

# As long as we have a file with a few revisions, test
# a few "cvs admin -o" invocations.
cd sdir/ssdir
AT_CHECK_NOESCAPE([cvs admin -o 1.2::1.2],[1],,
[[$CPROG admin: while processing more than one file:
$CPROG [admin aborted]: attempt to specify a numeric revision
]])

AT_CHECK_NOESCAPE([cvs admin -o 1.2::1.2 ssfile],,
[RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
done
])

AT_CHECK_NOESCAPE([cvs admin -o 1.1::NOT_RESERVED ssfile],,
[RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
done
])

AT_CHECK_NOESCAPE([cvs admin -o 1.1::NOT_EXIST ssfile],[1],
[RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
],
[$SPROG admin: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v: Revision NOT_EXIST doesn't exist.
$SPROG admin: RCS file for \`ssfile' not modified.
])

AT_CHECK_NOESCAPE([cvs admin -o 1.2::1.3 ssfile],,
[RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
done
])

AT_CHECK_NOESCAPE([cvs admin -o 3.1:: ssfile],,
[RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
deleting revision 3.3
deleting revision 3.2
done
])

AT_CHECK_NOESCAPE([cvs admin -o ::1.1 ssfile],,
[RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
done
])

AT_CHECK_NOESCAPE([cvs -n admin -o 1.2::3.1 ssfile],,
[RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
deleting revision 2.0
deleting revision 1.3
done
])

AT_CHECK_NOESCAPE([cvs admin -o 1.2::3.1 ssfile],,
[RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
deleting revision 2.0
deleting revision 1.3
done
])

AT_CHECK_NOESCAPE([cvs admin -o 3.1.2: ssfile],,
[RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
deleting revision 3.1.2.1
done
])

AT_CVS_CHECK_LOG([cvs log -N ssfile],,
[
RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
Working file: ssfile
head: 3.1
branch:
locks: strict
access list:
keyword substitution: kv
total revisions: 3;	selected revisions: 3
description:
----------------------------
revision 3.1
date: DATE;  author: USERNAME;  state: Exp;  lines: +0 -0
bump-it
----------------------------
revision 1.2
date: DATE;  author: USERNAME;  state: Exp;  lines: +1 -0
modify-it
----------------------------
revision 1.1
date: DATE;  author: USERNAME;  state: Exp;
add-it
=============================================================================
])

AT_CHECK([cvs -q update -p -r 1.1 ./ssfile],,[ssfile
])

AT_CLEANUP # strange revision numbers



AT_CVS_SETUP([annotate])

AT_CVS_SIMPLE_PROJECT()
echo "ssfile line 2" >>sdir/ssdir/ssfile
AT_CHECK_NOESCAPE([cvs -q ci -m modify-it],,
[Checking in sdir/ssdir/ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 1.2; previous revision: 1.1
done
])

AT_CVS_CHECK_ANNOTATE([cvs annotate],,
[1.1          (USERNAME DATE): ssfile
1.2          (USERNAME DATE): ssfile line 2
],
[
Annotations for sdir/ssdir/ssfile
***************
])

AT_CLEANUP # annotate



AT_CVS_SETUP([top of repository])

# More basic tests, including non-branch tags and co -d.

cd ..
mkdir 1
cd 1
AT_CHECK([cvs -q co -l .])

touch topfile
AT_CHECK_NOESCAPE([cvs add topfile],,,
[$SPROG add: scheduling file \`topfile' for addition
$SPROG add: use \`$SPROG commit' to add this file permanently
])

AT_CHECK_NOESCAPE([cvs -q ci -m add-it topfile],,
[RCS file: $CVSROOT_DIR/topfile,v
done
Checking in topfile;
$CVSROOT_DIR/topfile,v  <--  topfile
initial revision: 1.1
done
])

cd ..
mkdir 2; cd 2
AT_CHECK([cvs -q co -l .],,[U topfile
])

# Now test the ability to run checkout on an existing working
# directory without having it lose its mind.  I don't know
# whether this is tested elsewhere.  A more elaborate
# test might also have modified files, make sure it works if
# the modules file was modified to add new directories to the
# module, and such.
AT_CHECK([cvs -q co -l .])

mkdir second-dir
AT_CHECK_NOESCAPE([cvs add second-dir],,
[Directory $CVSROOT_DIR/second-dir added to the repository
])

cd ..
AT_CHECK([cvs -q co second-dir])

# Verify that the top-level CVS directory is not created by default.
AT_CHECK([test -d CVS],[1])

AT_CHECK([cat second-dir/CVS/Repository],,[second-dir
])

AT_CLEANUP # top of repository



AT_CVS_SETUP([Emptydir not special])

# FIXME: This test should probably be broken into several, though I'm not sure
# where.  It came out of basicb in the old sanity.sh test suite, along with the
# previous test and the following two, but I didn't have time to find where
# else this one should break since what look like good break points still
# depend on previous tests for setup.

# Note that the name Emptydir is chosen to test that CVS just
# treats it like any other directory name.  It should be
# special only when it is directly in $CVSROOT/CVSROOT.
mkdir Emptydir sdir2
AT_CHECK_NOESCAPE([cvs add Emptydir sdir2],,
[Directory $CVSROOT_DIR/project/Emptydir added to the repository
Directory $CVSROOT_DIR/project/sdir2 added to the repository
])

cd Emptydir
echo sfile1 starts >sfile1
AT_CHECK_NOESCAPE([cvs -n add sfile1],,,
[$SPROG add: scheduling file \`sfile1' for addition
$SPROG add: use \`$SPROG commit' to add this file permanently
])

AT_CHECK_NOESCAPE([cvs status sfile1],,
[===================================================================
File: sfile1           	Status: Unknown

   Working revision:	No entry for sfile1
   Repository revision:	No revision control file

],
[$SPROG status: use \`$SPROG add' to create an entry for sfile1
])

AT_CHECK_NOESCAPE([cvs add sfile1],,,
[$SPROG add: scheduling file \`sfile1' for addition
$SPROG add: use \`$SPROG commit' to add this file permanently
])

AT_CHECK([cvs status sfile1],,
[===================================================================
File: sfile1           	Status: Locally Added

   Working revision:	New file!
   Repository revision:	No revision control file
   Sticky Tag:		(none)
   Sticky Date:		(none)
   Sticky Options:	(none)

])

cd ../sdir2
echo sfile2 starts >sfile2
AT_CHECK_NOESCAPE([cvs add sfile2],,,
[$SPROG add: scheduling file \`sfile2' for addition
$SPROG add: use \`$SPROG commit' to add this file permanently
])

AT_CHECK_NOESCAPE([cvs -q ci CVS],,,
[$CPROG commit: warning: directory CVS specified in argument
$CPROG commit: but CVS uses CVS for its own purposes; skipping CVS directory
])

cd ..
AT_CHECK_NOESCAPE([cvs -q ci -m add],,
[RCS file: $CVSROOT_DIR/project/Emptydir/sfile1,v
done
Checking in Emptydir/sfile1;
$CVSROOT_DIR/project/Emptydir/sfile1,v  <--  sfile1
initial revision: 1.1
done
RCS file: $CVSROOT_DIR/project/sdir2/sfile2,v
done
Checking in sdir2/sfile2;
$CVSROOT_DIR/project/sdir2/sfile2,v  <--  sfile2
initial revision: 1.1
done
])

echo sfile1 develops >Emptydir/sfile1
AT_CHECK_NOESCAPE([cvs -q ci -m modify],,
[Checking in Emptydir/sfile1;
$CVSROOT_DIR/project/Emptydir/sfile1,v  <--  sfile1
new revision: 1.2; previous revision: 1.1
done
])

AT_CHECK([cvs -q tag release-1],,
[T Emptydir/sfile1
T sdir2/sfile2
])

echo not in time for release-1 >sdir2/sfile2
AT_CHECK_NOESCAPE([cvs -q ci -m modify-2],,
[Checking in sdir2/sfile2;
$CVSROOT_DIR/project/sdir2/sfile2,v  <--  sfile2
new revision: 1.2; previous revision: 1.1
done
])

# FIXCVS:
# See if CVS can correctly notice when an invalid numeric
# revision is specified.
# AT_CHECK([cvs diff -r 1.5 -r 1.7 sfile2],,,
# [error msg
# ])

# Test that we recurse into the correct directory when checking
# for existing files, even if co -d is in use.
cd ..
touch project/extra
AT_CHECK([cvs -q co -d project1 project],,
[U project1/Emptydir/sfile1
U project1/sdir2/sfile2
])

# FIXCVS?  The next test used to check things out like this:
#   U newdir/Emptydir/sfile1
#   U newdir/sdir2/sfile2
# but that's difficult to do.  The whole "shorten" thing
# is pretty bogus, because it will break on things
# like "cvs co foo/bar baz/quux".  Unless there's some
# pretty detailed expansion and analysis of the command-line
# arguments, we shouldn't do "shorten" stuff at all.
#
# DRP: I'm not sure how detailed it would need to be - either all the path
# prefixes are the same, in which case the matching parts are shortened, or
# they are not, in which case they are grouped:
#
#   cvs co -d short project/Emptydir project/sdir2
#   U short/Emptydir/sfile1
#   U short/sdir2
#
#   cvs co -d group foo/bar baz/quux
#   U group/foo/bar/file1
#   U group/baz/quux/file2
#
# How do you group under project if you do want to?  How about:
#
#   cvs co -d group/project project/Emptydir project/sdir2
#   U group/project/Emptydir/sfile1
#   U group/project/sdir2/sfile2
#
AT_CHECK([cvs -q co -d newdir -r release-1 project/Emptydir project/sdir2],,
[U newdir/project/Emptydir/sfile1
U newdir/project/sdir2/sfile2
])

# Verify that the top-level CVS directory is not created by default.
AT_CHECK([test -d CVS],[1])

# Verify that our CVS/Repository files hold what we expect.
AT_CHECK([cat newdir/CVS/Repository],,
[.
])
AT_CHECK([cat newdir/project/CVS/Repository],,
[project
])
AT_CHECK([cat newdir/project/Emptydir/CVS/Repository],,
[project/Emptydir
])
AT_CHECK([cat newdir/project/sdir2/CVS/Repository],,
[project/sdir2
])

# Verify that our project files contain what we expect.
AT_CHECK([cat newdir/project/Emptydir/sfile1],,
[sfile1 develops
])
AT_CHECK([cat newdir/project/sdir2/sfile2],,
[sfile2 starts
])

# FIXCVS:
# Hmm, this might be a case for CVSNULLREPOS, but CVS doesn't
# seem to deal with it...
# AT_CHECK([cvs -q co -d sub1/sub2 project],,
# [U sub1/sub2/Emptydir/sfile1
# U sub1/sub2/sdir2/sfile2
# ])
#
# cd sub1
# AT_CHECK([cvs -q update ./.])
#
# touch xx
# AT_CHECK_NOESCAPE([cvs add xx],,
# [$SPROG add: scheduling file \`xx' for addition
# $SPROG add: use \`$SPROG commit' to add this file permanently
# ])
#
# to test: sub1/sub2/sub3

AT_CLEANUP # Emptydir not special



AT_CVS_SETUP([delete last revision])

AT_KEYWORDS([admin admin-o])

AT_CVS_SIMPLE_PROJECT()

cd sdir/ssdir

# Try to remove all revisions in a file.
AT_CHECK_NOESCAPE([cvs admin -o1.1 ssfile],[1],
[RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
deleting revision 1.1
],
[[$SPROG [admin aborted]: attempt to delete all revisions
]])

echo I will be deleted second. >>ssfile
AT_CHECK_NOESCAPE([cvs -q ci -mr2],,
[Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 1.2; previous revision: 1.1
done
])

echo I will be deleted first. >>ssfile
echo "It's kinda like seeing the future." >>ssfile
AT_CHECK_NOESCAPE([cvs -q ci -mr3],,
[Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 1.3; previous revision: 1.2
done
])

AT_CHECK_NOESCAPE([cvs admin -o1.1:1.3 ssfile],[1],
[RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
deleting revision 1.3
deleting revision 1.2
deleting revision 1.1
],
[[$SPROG [admin aborted]: attempt to delete all revisions
]])

AT_CLEANUP # delete last revision



AT_CVS_SETUP([no admin -H])

AT_KEYWORDS([admin])

# Why in the world do we check for this?
# Note that -H is an invalid option.
AT_CHECK_NOESCAPE([cvs -q admin -H],[1],,
[[admin: invalid option -- H
$CPROG [admin aborted]: specify $CPROG -H admin for usage information
]])

AT_CLEANUP # no admin -H
