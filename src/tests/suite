#! /bin/sh
# Copyright (C) 2003 Derek Price, Ximbiot,
#                    & The Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

## --------------------- ##
## M4sh Initialization.  ##
## --------------------- ##

# Be Bourne compatible
if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then
  emulate sh
  NULLCMD=:
  # Zsh 3.x and 4.x performs word splitting on ${1+"$@"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '${1+"$@"}'='"$@"'
elif test -n "${BASH_VERSION+set}" && (set -o posix) >/dev/null 2>&1; then
  set -o posix
fi
DUALCASE=1; export DUALCASE # for MKS sh

# Support unset when possible.
if ( (MAIL=60; unset MAIL) || exit) >/dev/null 2>&1; then
  as_unset=unset
else
  as_unset=false
fi


# Work around bugs in pre-3.0 UWIN ksh.
$as_unset ENV MAIL MAILPATH
PS1='$ '
PS2='> '
PS4='+ '

# NLS nuisances.
for as_var in \
  LANG LANGUAGE LC_ADDRESS LC_ALL LC_COLLATE LC_CTYPE LC_IDENTIFICATION \
  LC_MEASUREMENT LC_MESSAGES LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER \
  LC_TELEPHONE LC_TIME
do
  if (set +x; test -z "`(eval $as_var=C; export $as_var) 2>&1`"); then
    eval $as_var=C; export $as_var
  else
    $as_unset $as_var
  fi
done

# Required to use basename.
if expr a : '\(a\)' >/dev/null 2>&1; then
  as_expr=expr
else
  as_expr=false
fi

if (basename /) >/dev/null 2>&1 && test "X`basename / 2>&1`" = "X/"; then
  as_basename=basename
else
  as_basename=false
fi


# Name of the executable.
as_me=`$as_basename "$0" ||
$as_expr X/"$0" : '.*/\([^/][^/]*\)/*$' \| \
	 X"$0" : 'X\(//\)$' \| \
	 X"$0" : 'X\(/\)$' \| \
	 .     : '\(.\)' 2>/dev/null ||
echo X/"$0" |
    sed '/^.*\/\([^/][^/]*\)\/*$/{ s//\1/; q; }
  	  /^X\/\(\/\/\)$/{ s//\1/; q; }
  	  /^X\/\(\/\).*/{ s//\1/; q; }
  	  s/.*/./; q'`


# PATH needs CR, and LINENO needs CR and PATH.
# Avoid depending upon Character Ranges.
as_cr_letters='abcdefghijklmnopqrstuvwxyz'
as_cr_LETTERS='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
as_cr_Letters=$as_cr_letters$as_cr_LETTERS
as_cr_digits='0123456789'
as_cr_alnum=$as_cr_Letters$as_cr_digits

# The user is always right.
if test "${PATH_SEPARATOR+set}" != set; then
  echo "#! /bin/sh" >conf$$.sh
  echo  "exit 0"   >>conf$$.sh
  chmod +x conf$$.sh
  if (PATH="/nonexistent;."; conf$$.sh) >/dev/null 2>&1; then
    PATH_SEPARATOR=';'
  else
    PATH_SEPARATOR=:
  fi
  rm -f conf$$.sh
fi


  as_lineno_1=$LINENO
  as_lineno_2=$LINENO
  as_lineno_3=`(expr $as_lineno_1 + 1) 2>/dev/null`
  test "x$as_lineno_1" != "x$as_lineno_2" &&
  test "x$as_lineno_3"  = "x$as_lineno_2"  || {
  # Find who we are.  Look in the path if we contain no path at all
  # relative or not.
  case $0 in
    *[\\/]* ) as_myself=$0 ;;
    *) as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  test -r "$as_dir/$0" && as_myself=$as_dir/$0 && break
done

       ;;
  esac
  # We did not find ourselves, most probably we were run as `sh COMMAND'
  # in which case we are not to be found in the path.
  if test "x$as_myself" = x; then
    as_myself=$0
  fi
  if test ! -f "$as_myself"; then
    { echo "$as_me: error: cannot find myself; rerun with an absolute path" >&2
   { (exit 1); exit 1; }; }
  fi
  case $CONFIG_SHELL in
  '')
    as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in /bin$PATH_SEPARATOR/usr/bin$PATH_SEPARATOR$PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for as_base in sh bash ksh sh5; do
	 case $as_dir in
	 /*)
	   if ("$as_dir/$as_base" -c '
  as_lineno_1=$LINENO
  as_lineno_2=$LINENO
  as_lineno_3=`(expr $as_lineno_1 + 1) 2>/dev/null`
  test "x$as_lineno_1" != "x$as_lineno_2" &&
  test "x$as_lineno_3"  = "x$as_lineno_2" ') 2>/dev/null; then
	     $as_unset BASH_ENV || test "${BASH_ENV+set}" != set || { BASH_ENV=; export BASH_ENV; }
	     $as_unset ENV || test "${ENV+set}" != set || { ENV=; export ENV; }
	     CONFIG_SHELL=$as_dir/$as_base
	     export CONFIG_SHELL
	     exec "$CONFIG_SHELL" "$0" ${1+"$@"}
	   fi;;
	 esac
       done
done
;;
  esac

  # Create $as_me.lineno as a copy of $as_myself, but with $LINENO
  # uniformly replaced by the line number.  The first 'sed' inserts a
  # line-number line before each line; the second 'sed' does the real
  # work.  The second script uses 'N' to pair each line-number line
  # with the numbered line, and appends trailing '-' during
  # substitution so that $LINENO is not a special case at line end.
  # (Raja R Harinath suggested sed '=', and Paul Eggert wrote the
  # second 'sed' script.  Blame Lee E. McMahon for sed's syntax.  :-)
  sed '=' <$as_myself |
    sed '
      N
      s,$,-,
      : loop
      s,^\(['$as_cr_digits']*\)\(.*\)[$]LINENO\([^'$as_cr_alnum'_]\),\1\2\1\3,
      t loop
      s,-$,,
      s,^['$as_cr_digits']*\n,,
    ' >$as_me.lineno &&
  chmod +x $as_me.lineno ||
    { echo "$as_me: error: cannot create $as_me.lineno; rerun with a POSIX shell" >&2
   { (exit 1); exit 1; }; }

  # Don't try to exec as it changes $[0], causing all sort of problems
  # (the dirname of $[0] is not the place where we might find the
  # original and so on.  Autoconf is especially sensible to this).
  . ./$as_me.lineno
  # Exit status is that of the last command.
  exit
}


case `echo "testing\c"; echo 1,2,3`,`echo -n testing; echo 1,2,3` in
  *c*,-n*) ECHO_N= ECHO_C='
' ECHO_T='	' ;;
  *c*,*  ) ECHO_N=-n ECHO_C= ECHO_T= ;;
  *)       ECHO_N= ECHO_C='\c' ECHO_T= ;;
esac

if expr a : '\(a\)' >/dev/null 2>&1; then
  as_expr=expr
else
  as_expr=false
fi

rm -f conf$$ conf$$.exe conf$$.file
echo >conf$$.file
if ln -s conf$$.file conf$$ 2>/dev/null; then
  # We could just check for DJGPP; but this test a) works b) is more generic
  # and c) will remain valid once DJGPP supports symlinks (DJGPP 2.04).
  if test -f conf$$.exe; then
    # Don't use ln at all; we don't have any links
    as_ln_s='cp -p'
  else
    as_ln_s='ln -s'
  fi
elif ln conf$$.file conf$$ 2>/dev/null; then
  as_ln_s=ln
else
  as_ln_s='cp -p'
fi
rm -f conf$$ conf$$.exe conf$$.file

if mkdir -p . 2>/dev/null; then
  as_mkdir_p=:
else
  test -d ./-p && rmdir ./-p
  as_mkdir_p=false
fi

as_executable_p="test -f"

# Sed expression to map a string onto a valid CPP name.
as_tr_cpp="eval sed 'y%*$as_cr_letters%P$as_cr_LETTERS%;s%[^_$as_cr_alnum]%_%g'"

# Sed expression to map a string onto a valid variable name.
as_tr_sh="eval sed 'y%*+%pp%;s%[^_$as_cr_alnum]%_%g'"


# IFS
# We need space, tab and new line, in precisely that order.
as_nl='
'
IFS=" 	$as_nl"

# CDPATH.
$as_unset CDPATH


SHELL=${CONFIG_SHELL-/bin/sh}

# How were we run?
at_cli_args="$@"

# Load the config file.
for at_file in atconfig atlocal
do
  test -r $at_file || continue
  . ./$at_file || { echo "$as_me: error: invalid content: $at_file" >&2
   { (exit 1); exit 1; }; }
done

# atconfig delivers paths relative to the directory the test suite is
# in, but the groups themselves are run in testsuite-dir/group-dir.
if test -n "$at_top_srcdir"; then
  builddir=../..
  for at_dir in srcdir top_srcdir top_builddir
  do
    at_val=`eval echo '${'at_$at_dir'}'`
    eval "$at_dir=\$at_val/../.."
  done
fi

# Not all shells have the 'times' builtin; the subshell is needed to make
# sure we discard the 'times: not found' message from the shell.
at_times_p=false
(times) >/dev/null 2>&1 && at_times_p=:

# CLI Arguments to pass to the debugging scripts.
at_debug_args=
# -e sets to true
at_errexit_p=false
# Shall we be verbose?
at_verbose=:
at_quiet=echo

# Shall we keep the debug scripts?  Must be `:' when the suite is
# run by a debug script, so that the script doesn't remove itself.
at_debug_p=false
# Display help message?
at_help_p=false
# List test groups?
at_list_p=false
# Test groups to run
at_groups=

# The directory we are in.
at_dir=`pwd`
# The directory the whole suite works in.
# Should be absolutely to let the user `cd' at will.
at_suite_dir=$at_dir/$as_me.dir
# The file containing the suite.
at_suite_log=$at_dir/$as_me.log
# The file containing the location of the last AT_CHECK.
at_check_line_file=$at_suite_dir/at-check-line
# The file containing the exit status of the last command.
at_status_file=$at_suite_dir/at-status
# The files containing the output of the tested commands.
at_stdout=$at_suite_dir/at-stdout
at_stder1=$at_suite_dir/at-stder1
at_stderr=$at_suite_dir/at-stderr
# The file containing dates.
at_times_file=$at_suite_dir/at-times
CPROG=cvs
ID=id
as_cvs_process=:
as_cvs_have_ID=false
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH$PATH_SEPERATOR/usr/local/bin$PATH_SEPERATOR/usr/contrib/bin$PATH_SEPERATOR/usr/gnu/bin$PATH_SEPERATOR/local/bin$PATH_SEPERATOR/local/gnu/bin$PATH_SEPERATOR/gnu/bin
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  if $as_cvs_process && $ID -un </dev/null >/dev/null 2>&1 &&
  test "`$ID -u </dev/null 2>/dev/null`" != ""; then
  as_cvs_have_ID=:
break
fi

as_cvs_process=false
# prefer the GNU versions of tools
for tool in gid id; do
  if test -f $as_dir/$tool && test -r $as_dir/$tool &&
         RES=`$as_dir/$tool --version </dev/null 2>/dev/null`; then
  if test "X$RES" != "X--version" && test "X$RES" != "X"; then
  ID=$as_dir/$tool; as_cvs_process=:; break
fi

fi

done
done

if $as_cvs_have_ID; then
  username=`$ID -un`; as_cvs_have_username=:
else
  as_cvs_have_username=false
fi


# List of the tested programs.
at_tested='cvs'
# List of the all the test groups.
at_groups_all=' banner-1 1 2 3 4 banner-2 5 6 7 8 banner-3 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32'
# As many dots as there are digits in the last test group number.
# Used to normalize the test group numbers so that `ls' lists them in
# numerical order.
at_format='..'
# Description of all the test groups.
at_help_all='1;init.at:16;init;no-link-root local;
2;init.at:16;init-l;link-root local;
3;init.at:16;init-r;no-link-root remote;
4;init.at:16;init-r-l;link-root remote;
5;version.at:16;version;no-link-root local;
6;version.at:16;version-l;link-root local;
7;version.at:16;version-r;no-link-root remote;
8;version.at:16;version-r-l;link-root remote;
9;basic.at:16;Operations on empty projects;no-link-root local;
10;basic.at:30;Adding directories and files;no-link-root local;
11;basic.at:130;tag, update, & diff;no-link-root local;
12;basic.at:189;commit -r, diff -r, strange resurrections;no-link-root local;
13;basic.at:297;annotate;no-link-root local annotate;
14;basic.at:321;Resurrection;no-link-root local;
15;basic.at:16;Operations on empty projects-l;link-root local;
16;basic.at:30;Adding directories and files-l;link-root local;
17;basic.at:130;tag, update, & diff-l;link-root local;
18;basic.at:189;commit -r, diff -r, strange resurrections-l;link-root local;
19;basic.at:297;annotate-l;link-root local annotate;
20;basic.at:321;Resurrection-l;link-root local;
21;basic.at:16;Operations on empty projects-r;no-link-root remote;
22;basic.at:30;Adding directories and files-r;no-link-root remote;
23;basic.at:130;tag, update, & diff-r;no-link-root remote;
24;basic.at:189;commit -r, diff -r, strange resurrections-r;no-link-root remote;
25;basic.at:297;annotate-r;no-link-root remote annotate;
26;basic.at:321;Resurrection-r;no-link-root remote;
27;basic.at:16;Operations on empty projects-r-l;link-root remote;
28;basic.at:30;Adding directories and files-r-l;link-root remote;
29;basic.at:130;tag, update, & diff-r-l;link-root remote;
30;basic.at:189;commit -r, diff -r, strange resurrections-r-l;link-root remote;
31;basic.at:297;annotate-r-l;link-root remote annotate;
32;basic.at:321;Resurrection-r-l;link-root remote;
'

##
## Set up package specific options.
##

at_arg_remote=false
at_arg_given_remote=false

at_arg_given_server=false


at_keywords=
at_prev=
for at_option
do
  # If the previous option needs an argument, assign it.
  if test -n "$at_prev"; then
    at_option=$at_prev=$at_option
    at_prev=
  fi

  at_optarg=`expr "x$at_option" : 'x[^=]*=\(.*\)'`

  # Accept the important Cygnus configure options, so we can diagnose typos.

  case $at_option in
    --help | -h )
	at_help_p=:
	;;

    --list | -l )
	at_list_p=:
	;;

    --version | -V )
	echo "$as_me (Concurrent Versions System (CVS) 1.12.2.1)"
	exit 0
	;;

    --clean | -c )
	rm -rf $at_suite_dir $at_suite_log
	exit 0
	;;

    --debug | -d )
	at_debug_p=:
	;;

    --errexit | -e )
	at_debug_p=:
	at_errexit_p=:
	;;

    --verbose | -v )
	at_verbose=echo; at_quiet=:
	;;

    --trace | -x )
	at_traceon='set -vx'; at_traceoff='set +vx'
	;;

    [0-9] | [0-9][0-9] | [0-9][0-9][0-9] | [0-9][0-9][0-9][0-9])
	at_groups="$at_groups$at_option "
	;;

    # Ranges
    [0-9]- | [0-9][0-9]- | [0-9][0-9][0-9]- | [0-9][0-9][0-9][0-9]-)
	at_range_start=`echo $at_option |tr -d '-'`
	at_range=`echo " $at_groups_all " | \
	  sed -e 's,^.* '$at_range_start' ,'$at_range_start' ,'`
	at_groups="$at_groups$at_range "
	;;

    -[0-9] | -[0-9][0-9] | -[0-9][0-9][0-9] | -[0-9][0-9][0-9][0-9])
	at_range_end=`echo $at_option |tr -d '-'`
	at_range=`echo " $at_groups_all " | \
	  sed -e 's, '$at_range_end' .*$, '$at_range_end','`
	at_groups="$at_groups$at_range "
	;;

    [0-9]-[0-9] | [0-9]-[0-9][0-9] | [0-9]-[0-9][0-9][0-9] | \
    [0-9]-[0-9][0-9][0-9][0-9] | [0-9][0-9]-[0-9][0-9] | \
    [0-9][0-9]-[0-9][0-9][0-9] | [0-9][0-9]-[0-9][0-9][0-9][0-9] | \
    [0-9][0-9][0-9]-[0-9][0-9][0-9] | \
    [0-9][0-9][0-9]-[0-9][0-9][0-9][0-9] | \
    [0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9] )
	at_range_start=`echo $at_option |sed 's,-.*,,'`
	at_range_end=`echo $at_option |sed 's,.*-,,'`
	# FIXME: Maybe test to make sure start <= end?
	at_range=`echo " $at_groups_all " | \
	  sed -e 's,^.* '$at_range_start' ,'$at_range_start' ,' \
	      -e 's, '$at_range_end' .*$, '$at_range_end','`
	at_groups="$at_groups$at_range "
	;;

    # Keywords.
    --keywords | -k )
	at_prev=--keywords
	;;
    --keywords=* )
	at_keywords="$at_keywords,$at_optarg"
	;;
    --remote | -r )
	at_optarg=:
	at_arg_remote=:
	at_arg_given_remote=:
	at_keywords="$at_keywords,remote"	;;
    --noremote | --nor )
	at_optarg=false
	at_arg_remote=false
	at_arg_given_remote=:
	at_keywords="$at_keywords,remote"	;;

    --server | -s )
	at_prev=--server
	;;
    --server=* | -s=* )
	at_arg_server=$at_optarg
	at_arg_given_server=:
	server="$server"
   at_keywords="$at_keywords,remote"
	;;


    *=*)
  	at_envvar=`expr "x$at_option" : 'x\([^=]*\)='`
  	# Reject names that are not valid shell variable names.
  	expr "x$at_envvar" : ".*[^_$as_cr_alnum]" >/dev/null &&
  	  { echo "$as_me: error: invalid variable name: $at_envvar" >&2
   { (exit 1); exit 1; }; }
  	at_value=`echo "$at_optarg" | sed "s/'/'\\\\\\\\''/g"`
  	eval "$at_envvar='$at_value'"
  	export $at_envvar
	# Propagate to debug scripts.
  	at_debug_args="$at_debug_args $at_option"
  	;;

     *) echo "$as_me: invalid option: $at_option" >&2
	echo "Try \`$0 --help' for more information." >&2
	exit 1
	;;
  esac
done

# Process the --keywords
if test -n "$at_keywords"; then
  at_groups_selected=$at_help_all
  for at_keyword in `IFS=,; set X $at_keywords; shift; echo ${1+$@}`
  do
    # It is on purpose that we match the test group titles too.
    at_groups_selected=`echo "$at_groups_selected" |
			grep -i "^[^;]*;[^;]*.*[; ]$at_keyword[ ;]"`
  done
  at_groups_selected=`echo "$at_groups_selected" | sed 's/;.*//'`
  # Smash the end of lines.
  at_groups_selected=`echo $at_groups_selected`
  at_groups="$at_groups$at_groups_selected "
fi

# Selected test groups.
test -z "$at_groups" && at_groups=$at_groups_all

##
## Verify our last option didn't require an argument
##
if test -n "$at_prev"; then
  { { echo "$as_me:$LINENO: error: \`$at_prev' requires an argument." >&5
echo "$as_me: error: \`$at_prev' requires an argument." >&2;}
   { (exit 1); exit 1; }; }
fi


##
## Process package specific options when _not_ supplied.
##

if $at_arg_given_server; then
  :
else
  server=$CPROG
fi


# Help message.
if $at_help_p; then
  cat <<_ATEOF
Usage: $0 [OPTION]... [VARIABLE=VALUE]... [TESTS]

Run all the tests, or the selected TESTS, and save a detailed log file.
Upon failure, create debugging scripts.

You should not change environment variables unless explicitly passed
as command line arguments.  Set \`AUTOTEST_PATH' to select the executables
to exercise.  Each relative directory is expanded as build and source
directories relatively to the top level of this distribution.  E.g.,

  $ $0 AUTOTEST_PATH=bin

possibly amounts into

  PATH=/tmp/foo-1.0/bin:/src/foo-1.0/bin:\$PATH
_ATEOF
cat <<_ATEOF

Operation modes:
  -h, --help     print the help message, then exit
  -V, --version  print version number, then exit
  -c, --clean    remove all the files this test suite might create and exit
  -l, --list     describes all the tests, or the selected TESTS
_ATEOF
cat <<_ATEOF

Execution tuning:
  -k, --keywords=KEYWORDS
	         select the tests matching all the comma separated KEYWORDS
	         accumulates
  -e, --errexit  abort as soon as a test fails; implies --debug
  -v, --verbose  force more detailed output
	         default for debugging scripts
  -d, --debug    inhibit clean up and debug script creation
	         default for debugging scripts
  -x, --trace    enable tests shell tracing
_ATEOF
cat <<_ATEOF

Other options:
_ATEOF

cat <<_ATEOF
  -r | --remote  Run test suite in remote mode. This is the same as specifying
                 --keywords=remote.
_ATEOF
cat <<_ATEOF
  -s | --server=PATH
                 Run using PATH as the CVS server for client/server testing.
                 Implies --remote. Defaults to \`cvs'.
_ATEOF
cat <<_ATEOF

Report bugs to <bug-cvs@gnu.org>.
_ATEOF
  exit 0
fi

# List of tests.
if $at_list_p; then
  cat <<_ATEOF
Concurrent Versions System (CVS) 1.12.2.1 test suite test groups:

 NUM: FILENAME:LINE      TEST-GROUP-NAME
      KEYWORDS

_ATEOF
  # "  1 42  45 " => "^(1|42|45);".
  at_groups_pattern=`echo "$at_groups" | sed 's/^  *//;s/  *$//;s/  */|/g'`
  echo "$at_help_all" |
    awk 'BEGIN { FS = ";" }
	 { if ($1 !~ /^('"$at_groups_pattern"')$/) next }
	 { if ($1) printf " %3d: %-18s %s\n", $1, $2, $3
	   if ($4) printf "      %s\n", $4 } '
  exit 0
fi

# Don't take risks: use only absolute directories in PATH.
#
# For stand-alone test suites, AUTOTEST_PATH is relative to `.'.
#
# For embedded test suites, AUTOTEST_PATH is relative to the top level
# of the package.  Then expand it into build/src parts, since users
# may create executables in both places.
#
# There might be directories that don't exist, but don't redirect
# builtins' (eg., cd) stderr directly: Ultrix's sh hates that.
AUTOTEST_PATH=`echo $AUTOTEST_PATH | tr ':' $PATH_SEPARATOR`
at_path=
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $AUTOTEST_PATH $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  case $as_dir in
  [\\/]* | ?:[\\/]* )
    at_path=$at_path$PATH_SEPARATOR$as_dir
    ;;
  * )
    if test -z "$at_top_builddir"; then
      # Stand-alone test suite.
      at_path=$at_path$PATH_SEPARATOR$as_dir
    else
      # Embedded test suite.
      at_path=$at_path$PATH_SEPARATOR$at_top_builddir/$as_dir
      at_path=$at_path$PATH_SEPARATOR$at_top_srcdir/$as_dir
    fi
    ;;
esac
done


# Now build and simplify PATH.
PATH=
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $at_path
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  as_dir=`(cd "$as_dir" && pwd) 2>/dev/null`
test -d "$as_dir" || continue
case $PATH in
	          $as_dir                 | \
	          $as_dir$PATH_SEPARATOR* | \
  *$PATH_SEPARATOR$as_dir                 | \
  *$PATH_SEPARATOR$as_dir$PATH_SEPARATOR* ) ;;

  '') PATH=$as_dir ;;
   *) PATH=$PATH$PATH_SEPARATOR$as_dir ;;
esac
done

export PATH

# Setting up the FDs.
# 5 is the log file.  Not to be overwritten if `-d'.

$at_debug_p && at_suite_log=/dev/null
exec 5>$at_suite_log

# Banners and logs.
cat <<\_ASBOX
## ----------------------------------------------------- ##
## Concurrent Versions System (CVS) 1.12.2.1 test suite. ##
## ----------------------------------------------------- ##
_ASBOX
{
  cat <<\_ASBOX
## ----------------------------------------------------- ##
## Concurrent Versions System (CVS) 1.12.2.1 test suite. ##
## ----------------------------------------------------- ##
_ASBOX
  echo

  echo "$as_me: command line was:"
  echo "  $ $0 $at_cli_args"
  echo

  # Try to find a few ChangeLogs in case it might help determining the
  # exact version.  Use the relative dir: if the top dir is a symlink,
  # find will not follow it (and options to follow the links are not
  # portable), which would result in no output here.
  if test -n "$at_top_srcdir"; then
    cat <<\_ASBOX
## ----------- ##
## ChangeLogs. ##
## ----------- ##
_ASBOX
    echo
    for at_file in `find "$at_top_srcdir" -name ChangeLog -print`
    do
      echo "$as_me: $at_file:"
      sed 's/^/| /;10q' $at_file
      echo
    done

    {
cat <<_ASUNAME
## --------- ##
## Platform. ##
## --------- ##

hostname = `(hostname || uname -n) 2>/dev/null | sed 1q`
uname -m = `(uname -m) 2>/dev/null || echo unknown`
uname -r = `(uname -r) 2>/dev/null || echo unknown`
uname -s = `(uname -s) 2>/dev/null || echo unknown`
uname -v = `(uname -v) 2>/dev/null || echo unknown`

/usr/bin/uname -p = `(/usr/bin/uname -p) 2>/dev/null || echo unknown`
/bin/uname -X     = `(/bin/uname -X) 2>/dev/null     || echo unknown`

/bin/arch              = `(/bin/arch) 2>/dev/null              || echo unknown`
/usr/bin/arch -k       = `(/usr/bin/arch -k) 2>/dev/null       || echo unknown`
/usr/convex/getsysinfo = `(/usr/convex/getsysinfo) 2>/dev/null || echo unknown`
hostinfo               = `(hostinfo) 2>/dev/null               || echo unknown`
/bin/machine           = `(/bin/machine) 2>/dev/null           || echo unknown`
/usr/bin/oslevel       = `(/usr/bin/oslevel) 2>/dev/null       || echo unknown`
/bin/universe          = `(/bin/universe) 2>/dev/null          || echo unknown`

_ASUNAME

as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  echo "PATH: $as_dir"
done

}
    echo
  fi

  # Contents of the config files.
  for at_file in atconfig atlocal
  do
    test -r $at_file || continue
    echo "$as_me: $at_file:"
    sed 's/^/| /' $at_file
    echo
  done

  cat <<\_ASBOX
## ---------------- ##
## Tested programs. ##
## ---------------- ##
_ASBOX
  echo
} >&5

# Report what programs are being tested.
for at_program in : $at_tested
do
  test "$at_program" = : && continue
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  test -f $as_dir/$at_program && break
done

  if test -f $as_dir/$at_program; then
    {
      echo "suite.at:25: $as_dir/$at_program --version"
      $as_dir/$at_program --version
      echo
    } >&5 2>&1
  else
    { { echo "$as_me:$LINENO: error: cannot find $at_program" >&5
echo "$as_me: error: cannot find $at_program" >&2;}
   { (exit 1); exit 1; }; }
  fi
done

{
  cat <<\_ASBOX
## ------------------ ##
## Running the tests. ##
## ------------------ ##
_ASBOX
} >&5

at_start_date=`date`
at_start_time=`(date +%s) 2>/dev/null`
echo "$as_me: starting at: $at_start_date" >&5
at_xpass_list=
at_xfail_list=
at_pass_list=
at_fail_list=
at_skip_list=
at_group_count=0

# Create the master directory if it doesn't already exist.
test -d $at_suite_dir ||
  mkdir $at_suite_dir ||
  { { echo "$as_me:$LINENO: error: cannot create $at_suite_dir" >&5
echo "$as_me: error: cannot create $at_suite_dir" >&2;}
   { (exit 1); exit 1; }; }

# Can we diff with `/dev/null'?  DU 5.0 refuses.
if diff /dev/null /dev/null >/dev/null 2>&1; then
  at_devnull=/dev/null
else
  at_devnull=$at_suite_dir/devnull
  cp /dev/null $at_devnull
fi

# Use `diff -u' when possible.
if diff -u $at_devnull $at_devnull >/dev/null 2>&1; then
  at_diff='diff -u'
else
  at_diff=diff
fi


for at_group in $at_groups
do
  # Be sure to come back to the top test directory.
  cd $at_suite_dir

  case $at_group in
    banner-*)
      at_group_log=$at_suite_log
      ;;

    *)
      # Skip tests we already run (using --keywords makes it easy to get
      # duplication).
      case " $at_pass_test $at_skip_test $at_fail_test " in
	*" $at_group "* ) continue;;
      esac

      # Normalize the test group number.
      at_group_normalized=`expr "00000$at_group" : ".*\($at_format\)"`

      # Create a fresh directory for the next test group, and enter.
      at_group_dir=$at_suite_dir/$at_group_normalized
      at_group_log=$at_group_dir/$as_me.log
      rm -rf $at_group_dir
      mkdir $at_group_dir ||
	{ { echo "$as_me:$LINENO: error: cannot create $at_group_dir" >&5
echo "$as_me: error: cannot create $at_group_dir" >&2;}
   { (exit 1); exit 1; }; }
      cd $at_group_dir
      ;;
  esac

  echo 0 > $at_status_file

  # Clearly separate the test groups when verbose.
  test $at_group_count != 0 && $at_verbose

  # In verbose mode, append to the log file *and* show on
  # the standard output; in quiet mode only write to the log
  if test $at_verbose = echo; then
    at_tee_pipe="tee -a $at_group_log"
  else
    at_tee_pipe="cat >> $at_group_log"
  fi

  case $at_group in

  banner-1 ) # Banner 1. init.at:14
    cat <<\_ATEOF

Initialize a repository

_ATEOF
    ;;

  1 ) # 1. init.at:16: init
    at_setup_line='init.at:16'
    at_desc='init'
    $at_quiet $ECHO_N "  1: init                                         $ECHO_C"
    at_xfail=no
    (
      echo "1. init.at:16: testing ..."
      $at_traceon
###
### Begin AT_CVS_SETUP([init])
###


#
# Set CVSROOT_DIR, method, & CVSROOT
#
CVSROOT_DIR=$at_group_dir/cvsroot
method=
CVSROOT=$method$CVSROOT_DIR
export CVSROOT
SPROG=`basename $server`

#
# Clear a possibly damaging inherited environment.
#

# Avoid picking up any stray .cvsrc, etc., from the user running the tests
mkdir home
HOME=$at_group_dir/home; export HOME

# Make sure this variable is not defined to anything that would
# change the format of RCS dates.  Otherwise people using e.g.,
# RCSINIT=-zLT get lots of spurious failures.
RCSINIT=

#
# Initialize the repository
#
$at_traceoff
echo "init.at:16: cvs init"
echo init.at:16 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "init.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Create the default project
#
mkdir top
cd top
$at_traceoff
echo "init.at:16: cvs -Q co -l ."
echo init.at:16 >$at_check_line_file
( $at_traceon; cvs -Q co -l . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "init.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

mkdir project
$at_traceoff
echo "init.at:16: cvs -Q add project"
echo init.at:16 >$at_check_line_file
( $at_traceon; cvs -Q add project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "init.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ..
rm -r top

#
# Check out the default project and cd into the workspace.
#
# I'm checking for error returns form the cd and printing error messages since,
# for instance, if the CVS executable picks up a ~/.cvsrc which causes empty
# directories to be pruned by checkout, the project directory will not be
# created but the `cvs co' will not return an error.
#
$at_traceoff
echo "init.at:16: cvs -Q co project"
echo init.at:16 >$at_check_line_file
( $at_traceon; cvs -Q co project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "init.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd project ||
  { { echo "$as_me:$LINENO: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&5
echo "$as_me: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&2;}
   { (exit 1); exit 1; }; }

###
### End AT_CVS_SETUP([init])
###

# This one is more of an assert.  It's here to watch the test suite
# and warn us if anything changes.
$at_traceoff
echo "init.at:21: echo \$CVSROOT"
echo init.at:21 >$at_check_line_file
( $at_traceon; echo $CVSROOT ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "$method$at_group_dir/cvsroot
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "init.at:21: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon



# Verify that we get no errors when we initialize a repository twice.
$at_traceoff
echo "init.at:27: cvs init"
echo init.at:27 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "init.at:27: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


      $at_traceoff
      $at_times_p && times >$at_times_file
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat $at_status_file`
    ;;

  2 ) # 2. init.at:16: init-l
    at_setup_line='init.at:16'
    at_desc='init-l'
    $at_quiet $ECHO_N "  2: init-l                                       $ECHO_C"
    at_xfail=no
    (
      echo "2. init.at:16: testing ..."
      $at_traceon
###
### Begin AT_CVS_SETUP([init])
###

#
# Create a symlinked CVSROOT_DIR
#
mkdir $at_group_dir/realcvsroot ||
  { { echo "$as_me:$LINENO: error: Cannot create directory \`$at_group_dir/realcvsroot'" >&5
echo "$as_me: error: Cannot create directory \`$at_group_dir/realcvsroot'" >&2;}
   { (exit 1); exit 1; }; }
$at_traceoff
echo "init.at:16: ln -s realcvsroot \$at_group_dir/cvsroot || exit 77"
echo init.at:16 >$at_check_line_file
( $at_traceon; ln -s realcvsroot $at_group_dir/cvsroot || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "init.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Set CVSROOT_DIR, method, & CVSROOT
#
CVSROOT_DIR=$at_group_dir/cvsroot
method=
CVSROOT=$method$CVSROOT_DIR
export CVSROOT
SPROG=`basename $server`

#
# Clear a possibly damaging inherited environment.
#

# Avoid picking up any stray .cvsrc, etc., from the user running the tests
mkdir home
HOME=$at_group_dir/home; export HOME

# Make sure this variable is not defined to anything that would
# change the format of RCS dates.  Otherwise people using e.g.,
# RCSINIT=-zLT get lots of spurious failures.
RCSINIT=

#
# Initialize the repository
#
$at_traceoff
echo "init.at:16: cvs init"
echo init.at:16 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "init.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Create the default project
#
mkdir top
cd top
$at_traceoff
echo "init.at:16: cvs -Q co -l ."
echo init.at:16 >$at_check_line_file
( $at_traceon; cvs -Q co -l . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "init.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

mkdir project
$at_traceoff
echo "init.at:16: cvs -Q add project"
echo init.at:16 >$at_check_line_file
( $at_traceon; cvs -Q add project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "init.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ..
rm -r top

#
# Check out the default project and cd into the workspace.
#
# I'm checking for error returns form the cd and printing error messages since,
# for instance, if the CVS executable picks up a ~/.cvsrc which causes empty
# directories to be pruned by checkout, the project directory will not be
# created but the `cvs co' will not return an error.
#
$at_traceoff
echo "init.at:16: cvs -Q co project"
echo init.at:16 >$at_check_line_file
( $at_traceon; cvs -Q co project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "init.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd project ||
  { { echo "$as_me:$LINENO: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&5
echo "$as_me: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&2;}
   { (exit 1); exit 1; }; }

###
### End AT_CVS_SETUP([init])
###

# This one is more of an assert.  It's here to watch the test suite
# and warn us if anything changes.
$at_traceoff
echo "init.at:21: echo \$CVSROOT"
echo init.at:21 >$at_check_line_file
( $at_traceon; echo $CVSROOT ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "$method$at_group_dir/cvsroot
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "init.at:21: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon



# Verify that we get no errors when we initialize a repository twice.
$at_traceoff
echo "init.at:27: cvs init"
echo init.at:27 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "init.at:27: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


      $at_traceoff
      $at_times_p && times >$at_times_file
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat $at_status_file`
    ;;

  3 ) # 3. init.at:16: init-r
    at_setup_line='init.at:16'
    at_desc='init-r'
    $at_quiet $ECHO_N "  3: init-r                                       $ECHO_C"
    at_xfail=no
    (
      echo "3. init.at:16: testing ..."
      $at_traceon
###
### Begin AT_CVS_SETUP([init])
###


#
# Set CVSROOT_DIR, method, & CVSROOT
#
CVSROOT_DIR=$at_group_dir/cvsroot
$at_traceoff
echo "init.at:16: cvs --version |grep client || exit 77"
echo init.at:16 >$at_check_line_file
( $at_traceon; cvs --version |grep client || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo stdout:; cat $at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "init.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "init.at:16: \$server --version |grep server || exit 77"
echo init.at:16 >$at_check_line_file
( $at_traceon; $server --version |grep server || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo stdout:; cat $at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "init.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

CVS_SERVER=$server; export CVS_SERVER
method=:fork:
CVSROOT=$method$CVSROOT_DIR
export CVSROOT
SPROG=`basename $server`

#
# Clear a possibly damaging inherited environment.
#

# Avoid picking up any stray .cvsrc, etc., from the user running the tests
mkdir home
HOME=$at_group_dir/home; export HOME

# Make sure this variable is not defined to anything that would
# change the format of RCS dates.  Otherwise people using e.g.,
# RCSINIT=-zLT get lots of spurious failures.
RCSINIT=

#
# Initialize the repository
#
$at_traceoff
echo "init.at:16: cvs init"
echo init.at:16 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "init.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Create the default project
#
mkdir top
cd top
$at_traceoff
echo "init.at:16: cvs -Q co -l ."
echo init.at:16 >$at_check_line_file
( $at_traceon; cvs -Q co -l . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "init.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

mkdir project
$at_traceoff
echo "init.at:16: cvs -Q add project"
echo init.at:16 >$at_check_line_file
( $at_traceon; cvs -Q add project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "init.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ..
rm -r top

#
# Check out the default project and cd into the workspace.
#
# I'm checking for error returns form the cd and printing error messages since,
# for instance, if the CVS executable picks up a ~/.cvsrc which causes empty
# directories to be pruned by checkout, the project directory will not be
# created but the `cvs co' will not return an error.
#
$at_traceoff
echo "init.at:16: cvs -Q co project"
echo init.at:16 >$at_check_line_file
( $at_traceon; cvs -Q co project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "init.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd project ||
  { { echo "$as_me:$LINENO: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&5
echo "$as_me: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&2;}
   { (exit 1); exit 1; }; }

###
### End AT_CVS_SETUP([init])
###

# This one is more of an assert.  It's here to watch the test suite
# and warn us if anything changes.
$at_traceoff
echo "init.at:21: echo \$CVSROOT"
echo init.at:21 >$at_check_line_file
( $at_traceon; echo $CVSROOT ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "$method$at_group_dir/cvsroot
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "init.at:21: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon



# Verify that we get no errors when we initialize a repository twice.
$at_traceoff
echo "init.at:27: cvs init"
echo init.at:27 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "init.at:27: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


      $at_traceoff
      $at_times_p && times >$at_times_file
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat $at_status_file`
    ;;

  4 ) # 4. init.at:16: init-r-l
    at_setup_line='init.at:16'
    at_desc='init-r-l'
    $at_quiet $ECHO_N "  4: init-r-l                                     $ECHO_C"
    at_xfail=no
    (
      echo "4. init.at:16: testing ..."
      $at_traceon
###
### Begin AT_CVS_SETUP([init])
###

#
# Create a symlinked CVSROOT_DIR
#
mkdir $at_group_dir/realcvsroot ||
  { { echo "$as_me:$LINENO: error: Cannot create directory \`$at_group_dir/realcvsroot'" >&5
echo "$as_me: error: Cannot create directory \`$at_group_dir/realcvsroot'" >&2;}
   { (exit 1); exit 1; }; }
$at_traceoff
echo "init.at:16: ln -s realcvsroot \$at_group_dir/cvsroot || exit 77"
echo init.at:16 >$at_check_line_file
( $at_traceon; ln -s realcvsroot $at_group_dir/cvsroot || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "init.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Set CVSROOT_DIR, method, & CVSROOT
#
CVSROOT_DIR=$at_group_dir/cvsroot
$at_traceoff
echo "init.at:16: cvs --version |grep client || exit 77"
echo init.at:16 >$at_check_line_file
( $at_traceon; cvs --version |grep client || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo stdout:; cat $at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "init.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "init.at:16: \$server --version |grep server || exit 77"
echo init.at:16 >$at_check_line_file
( $at_traceon; $server --version |grep server || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo stdout:; cat $at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "init.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

CVS_SERVER=$server; export CVS_SERVER
method=:fork:
CVSROOT=$method$CVSROOT_DIR
export CVSROOT
SPROG=`basename $server`

#
# Clear a possibly damaging inherited environment.
#

# Avoid picking up any stray .cvsrc, etc., from the user running the tests
mkdir home
HOME=$at_group_dir/home; export HOME

# Make sure this variable is not defined to anything that would
# change the format of RCS dates.  Otherwise people using e.g.,
# RCSINIT=-zLT get lots of spurious failures.
RCSINIT=

#
# Initialize the repository
#
$at_traceoff
echo "init.at:16: cvs init"
echo init.at:16 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "init.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Create the default project
#
mkdir top
cd top
$at_traceoff
echo "init.at:16: cvs -Q co -l ."
echo init.at:16 >$at_check_line_file
( $at_traceon; cvs -Q co -l . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "init.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

mkdir project
$at_traceoff
echo "init.at:16: cvs -Q add project"
echo init.at:16 >$at_check_line_file
( $at_traceon; cvs -Q add project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "init.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ..
rm -r top

#
# Check out the default project and cd into the workspace.
#
# I'm checking for error returns form the cd and printing error messages since,
# for instance, if the CVS executable picks up a ~/.cvsrc which causes empty
# directories to be pruned by checkout, the project directory will not be
# created but the `cvs co' will not return an error.
#
$at_traceoff
echo "init.at:16: cvs -Q co project"
echo init.at:16 >$at_check_line_file
( $at_traceon; cvs -Q co project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "init.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd project ||
  { { echo "$as_me:$LINENO: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&5
echo "$as_me: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&2;}
   { (exit 1); exit 1; }; }

###
### End AT_CVS_SETUP([init])
###

# This one is more of an assert.  It's here to watch the test suite
# and warn us if anything changes.
$at_traceoff
echo "init.at:21: echo \$CVSROOT"
echo init.at:21 >$at_check_line_file
( $at_traceon; echo $CVSROOT ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "$method$at_group_dir/cvsroot
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "init.at:21: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon



# Verify that we get no errors when we initialize a repository twice.
$at_traceoff
echo "init.at:27: cvs init"
echo init.at:27 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "init.at:27: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


      $at_traceoff
      $at_times_p && times >$at_times_file
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat $at_status_file`
    ;;


  banner-2 ) # Banner 2. version.at:14
    cat <<\_ATEOF

CVS Version Strings

_ATEOF
    ;;

  5 ) # 5. version.at:16: version
    at_setup_line='version.at:16'
    at_desc='version'
    $at_quiet $ECHO_N "  5: version                                      $ECHO_C"
    at_xfail=no
    (
      echo "5. version.at:16: testing ..."
      $at_traceon
###
### Begin AT_CVS_SETUP([version])
###


#
# Set CVSROOT_DIR, method, & CVSROOT
#
CVSROOT_DIR=$at_group_dir/cvsroot
method=
CVSROOT=$method$CVSROOT_DIR
export CVSROOT
SPROG=`basename $server`

#
# Clear a possibly damaging inherited environment.
#

# Avoid picking up any stray .cvsrc, etc., from the user running the tests
mkdir home
HOME=$at_group_dir/home; export HOME

# Make sure this variable is not defined to anything that would
# change the format of RCS dates.  Otherwise people using e.g.,
# RCSINIT=-zLT get lots of spurious failures.
RCSINIT=

#
# Initialize the repository
#
$at_traceoff
echo "version.at:16: cvs init"
echo version.at:16 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "version.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Create the default project
#
mkdir top
cd top
$at_traceoff
echo "version.at:16: cvs -Q co -l ."
echo version.at:16 >$at_check_line_file
( $at_traceon; cvs -Q co -l . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "version.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

mkdir project
$at_traceoff
echo "version.at:16: cvs -Q add project"
echo version.at:16 >$at_check_line_file
( $at_traceon; cvs -Q add project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "version.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ..
rm -r top

#
# Check out the default project and cd into the workspace.
#
# I'm checking for error returns form the cd and printing error messages since,
# for instance, if the CVS executable picks up a ~/.cvsrc which causes empty
# directories to be pruned by checkout, the project directory will not be
# created but the `cvs co' will not return an error.
#
$at_traceoff
echo "version.at:16: cvs -Q co project"
echo version.at:16 >$at_check_line_file
( $at_traceon; cvs -Q co project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "version.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd project ||
  { { echo "$as_me:$LINENO: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&5
echo "$as_me: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&2;}
   { (exit 1); exit 1; }; }

###
### End AT_CVS_SETUP([version])
###



#
# There is some sense to sedding out the years as I do some of the other
# details below, but I think it is better to have a distcheck blocked because
# someone neglected to update the copyright notice than to avoid a few spurious
# failures when testing old versions of CVS.
#
this_year=`date +%Y`
$at_traceoff
echo "version.at:41: cvs --version |
  sed 's# 1\\.[0-9][0-9]*\\(\\.[0-9][0-9p]*\\)*\\( ([a-z/]*)\\)\\?\$##
       s# *\$##'"
echo version.at:41 >$at_check_line_file
( $at_traceon; cvs --version |
  sed 's# 1\.[0-9][0-9]*\(\.[0-9][0-9p]*\)*\( ([a-z/]*)\)\?$##
       s# *$##' ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "
Concurrent Versions System (CVS)

Copyright (c) 1989-$this_year Brian Berliner, david d \`zoo' zuhn,
                        Jeff Polk, and other authors

CVS may be copied only under the terms of the GNU General Public License,
a copy of which can be found with the CVS distribution kit.

Specify the --help option for further information about CVS
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "version.at:41: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon








$at_traceoff
echo "version.at:59: cvs version |
  sed 's# 1\\.[0-9][0-9]*\\(\\.[0-9][0-9p]*\\)*\\( ([a-z/]*)\\)\\?\$##'"
echo version.at:59 >$at_check_line_file
( $at_traceon; cvs version |
  sed 's# 1\.[0-9][0-9]*\(\.[0-9][0-9p]*\)*\( ([a-z/]*)\)\?$##' ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Concurrent Versions System (CVS)
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "version.at:59: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon




      $at_traceoff
      $at_times_p && times >$at_times_file
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat $at_status_file`
    ;;

  6 ) # 6. version.at:16: version-l
    at_setup_line='version.at:16'
    at_desc='version-l'
    $at_quiet $ECHO_N "  6: version-l                                    $ECHO_C"
    at_xfail=no
    (
      echo "6. version.at:16: testing ..."
      $at_traceon
###
### Begin AT_CVS_SETUP([version])
###

#
# Create a symlinked CVSROOT_DIR
#
mkdir $at_group_dir/realcvsroot ||
  { { echo "$as_me:$LINENO: error: Cannot create directory \`$at_group_dir/realcvsroot'" >&5
echo "$as_me: error: Cannot create directory \`$at_group_dir/realcvsroot'" >&2;}
   { (exit 1); exit 1; }; }
$at_traceoff
echo "version.at:16: ln -s realcvsroot \$at_group_dir/cvsroot || exit 77"
echo version.at:16 >$at_check_line_file
( $at_traceon; ln -s realcvsroot $at_group_dir/cvsroot || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "version.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Set CVSROOT_DIR, method, & CVSROOT
#
CVSROOT_DIR=$at_group_dir/cvsroot
method=
CVSROOT=$method$CVSROOT_DIR
export CVSROOT
SPROG=`basename $server`

#
# Clear a possibly damaging inherited environment.
#

# Avoid picking up any stray .cvsrc, etc., from the user running the tests
mkdir home
HOME=$at_group_dir/home; export HOME

# Make sure this variable is not defined to anything that would
# change the format of RCS dates.  Otherwise people using e.g.,
# RCSINIT=-zLT get lots of spurious failures.
RCSINIT=

#
# Initialize the repository
#
$at_traceoff
echo "version.at:16: cvs init"
echo version.at:16 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "version.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Create the default project
#
mkdir top
cd top
$at_traceoff
echo "version.at:16: cvs -Q co -l ."
echo version.at:16 >$at_check_line_file
( $at_traceon; cvs -Q co -l . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "version.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

mkdir project
$at_traceoff
echo "version.at:16: cvs -Q add project"
echo version.at:16 >$at_check_line_file
( $at_traceon; cvs -Q add project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "version.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ..
rm -r top

#
# Check out the default project and cd into the workspace.
#
# I'm checking for error returns form the cd and printing error messages since,
# for instance, if the CVS executable picks up a ~/.cvsrc which causes empty
# directories to be pruned by checkout, the project directory will not be
# created but the `cvs co' will not return an error.
#
$at_traceoff
echo "version.at:16: cvs -Q co project"
echo version.at:16 >$at_check_line_file
( $at_traceon; cvs -Q co project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "version.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd project ||
  { { echo "$as_me:$LINENO: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&5
echo "$as_me: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&2;}
   { (exit 1); exit 1; }; }

###
### End AT_CVS_SETUP([version])
###



#
# There is some sense to sedding out the years as I do some of the other
# details below, but I think it is better to have a distcheck blocked because
# someone neglected to update the copyright notice than to avoid a few spurious
# failures when testing old versions of CVS.
#
this_year=`date +%Y`
$at_traceoff
echo "version.at:41: cvs --version |
  sed 's# 1\\.[0-9][0-9]*\\(\\.[0-9][0-9p]*\\)*\\( ([a-z/]*)\\)\\?\$##
       s# *\$##'"
echo version.at:41 >$at_check_line_file
( $at_traceon; cvs --version |
  sed 's# 1\.[0-9][0-9]*\(\.[0-9][0-9p]*\)*\( ([a-z/]*)\)\?$##
       s# *$##' ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "
Concurrent Versions System (CVS)

Copyright (c) 1989-$this_year Brian Berliner, david d \`zoo' zuhn,
                        Jeff Polk, and other authors

CVS may be copied only under the terms of the GNU General Public License,
a copy of which can be found with the CVS distribution kit.

Specify the --help option for further information about CVS
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "version.at:41: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon








$at_traceoff
echo "version.at:59: cvs version |
  sed 's# 1\\.[0-9][0-9]*\\(\\.[0-9][0-9p]*\\)*\\( ([a-z/]*)\\)\\?\$##'"
echo version.at:59 >$at_check_line_file
( $at_traceon; cvs version |
  sed 's# 1\.[0-9][0-9]*\(\.[0-9][0-9p]*\)*\( ([a-z/]*)\)\?$##' ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Concurrent Versions System (CVS)
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "version.at:59: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon




      $at_traceoff
      $at_times_p && times >$at_times_file
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat $at_status_file`
    ;;

  7 ) # 7. version.at:16: version-r
    at_setup_line='version.at:16'
    at_desc='version-r'
    $at_quiet $ECHO_N "  7: version-r                                    $ECHO_C"
    at_xfail=no
    (
      echo "7. version.at:16: testing ..."
      $at_traceon
###
### Begin AT_CVS_SETUP([version])
###


#
# Set CVSROOT_DIR, method, & CVSROOT
#
CVSROOT_DIR=$at_group_dir/cvsroot
$at_traceoff
echo "version.at:16: cvs --version |grep client || exit 77"
echo version.at:16 >$at_check_line_file
( $at_traceon; cvs --version |grep client || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo stdout:; cat $at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "version.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "version.at:16: \$server --version |grep server || exit 77"
echo version.at:16 >$at_check_line_file
( $at_traceon; $server --version |grep server || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo stdout:; cat $at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "version.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

CVS_SERVER=$server; export CVS_SERVER
method=:fork:
CVSROOT=$method$CVSROOT_DIR
export CVSROOT
SPROG=`basename $server`

#
# Clear a possibly damaging inherited environment.
#

# Avoid picking up any stray .cvsrc, etc., from the user running the tests
mkdir home
HOME=$at_group_dir/home; export HOME

# Make sure this variable is not defined to anything that would
# change the format of RCS dates.  Otherwise people using e.g.,
# RCSINIT=-zLT get lots of spurious failures.
RCSINIT=

#
# Initialize the repository
#
$at_traceoff
echo "version.at:16: cvs init"
echo version.at:16 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "version.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Create the default project
#
mkdir top
cd top
$at_traceoff
echo "version.at:16: cvs -Q co -l ."
echo version.at:16 >$at_check_line_file
( $at_traceon; cvs -Q co -l . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "version.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

mkdir project
$at_traceoff
echo "version.at:16: cvs -Q add project"
echo version.at:16 >$at_check_line_file
( $at_traceon; cvs -Q add project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "version.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ..
rm -r top

#
# Check out the default project and cd into the workspace.
#
# I'm checking for error returns form the cd and printing error messages since,
# for instance, if the CVS executable picks up a ~/.cvsrc which causes empty
# directories to be pruned by checkout, the project directory will not be
# created but the `cvs co' will not return an error.
#
$at_traceoff
echo "version.at:16: cvs -Q co project"
echo version.at:16 >$at_check_line_file
( $at_traceon; cvs -Q co project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "version.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd project ||
  { { echo "$as_me:$LINENO: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&5
echo "$as_me: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&2;}
   { (exit 1); exit 1; }; }

###
### End AT_CVS_SETUP([version])
###



#
# There is some sense to sedding out the years as I do some of the other
# details below, but I think it is better to have a distcheck blocked because
# someone neglected to update the copyright notice than to avoid a few spurious
# failures when testing old versions of CVS.
#
this_year=`date +%Y`
$at_traceoff
echo "version.at:41: cvs --version |
  sed 's# 1\\.[0-9][0-9]*\\(\\.[0-9][0-9p]*\\)*\\( ([a-z/]*)\\)\\?\$##
       s# *\$##'"
echo version.at:41 >$at_check_line_file
( $at_traceon; cvs --version |
  sed 's# 1\.[0-9][0-9]*\(\.[0-9][0-9p]*\)*\( ([a-z/]*)\)\?$##
       s# *$##' ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "
Concurrent Versions System (CVS)

Copyright (c) 1989-$this_year Brian Berliner, david d \`zoo' zuhn,
                        Jeff Polk, and other authors

CVS may be copied only under the terms of the GNU General Public License,
a copy of which can be found with the CVS distribution kit.

Specify the --help option for further information about CVS
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "version.at:41: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon




$at_traceoff
echo "version.at:51: cvs version |
  sed 's#^\\(Client.*\\) 1\\.[0-9][0-9]*\\(\\.[0-9][0-9p]*\\)* (client\\(/server\\)\\?)\$#\\1 (client)#
       s#^\\(Server.*\\) 1\\.[0-9][0-9]*\\(\\.[0-9][0-9p]*\\)* (\\(client/\\)\\?server)\$#\\1 (server)#'"
echo version.at:51 >$at_check_line_file
( $at_traceon; cvs version |
  sed 's#^\(Client.*\) 1\.[0-9][0-9]*\(\.[0-9][0-9p]*\)* (client\(/server\)\?)$#\1 (client)#
       s#^\(Server.*\) 1\.[0-9][0-9]*\(\.[0-9][0-9p]*\)* (\(client/\)\?server)$#\1 (server)#' ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Client: Concurrent Versions System (CVS) (client)
Server: Concurrent Versions System (CVS) (server)
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "version.at:51: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon








      $at_traceoff
      $at_times_p && times >$at_times_file
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat $at_status_file`
    ;;

  8 ) # 8. version.at:16: version-r-l
    at_setup_line='version.at:16'
    at_desc='version-r-l'
    $at_quiet $ECHO_N "  8: version-r-l                                  $ECHO_C"
    at_xfail=no
    (
      echo "8. version.at:16: testing ..."
      $at_traceon
###
### Begin AT_CVS_SETUP([version])
###

#
# Create a symlinked CVSROOT_DIR
#
mkdir $at_group_dir/realcvsroot ||
  { { echo "$as_me:$LINENO: error: Cannot create directory \`$at_group_dir/realcvsroot'" >&5
echo "$as_me: error: Cannot create directory \`$at_group_dir/realcvsroot'" >&2;}
   { (exit 1); exit 1; }; }
$at_traceoff
echo "version.at:16: ln -s realcvsroot \$at_group_dir/cvsroot || exit 77"
echo version.at:16 >$at_check_line_file
( $at_traceon; ln -s realcvsroot $at_group_dir/cvsroot || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "version.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Set CVSROOT_DIR, method, & CVSROOT
#
CVSROOT_DIR=$at_group_dir/cvsroot
$at_traceoff
echo "version.at:16: cvs --version |grep client || exit 77"
echo version.at:16 >$at_check_line_file
( $at_traceon; cvs --version |grep client || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo stdout:; cat $at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "version.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "version.at:16: \$server --version |grep server || exit 77"
echo version.at:16 >$at_check_line_file
( $at_traceon; $server --version |grep server || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo stdout:; cat $at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "version.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

CVS_SERVER=$server; export CVS_SERVER
method=:fork:
CVSROOT=$method$CVSROOT_DIR
export CVSROOT
SPROG=`basename $server`

#
# Clear a possibly damaging inherited environment.
#

# Avoid picking up any stray .cvsrc, etc., from the user running the tests
mkdir home
HOME=$at_group_dir/home; export HOME

# Make sure this variable is not defined to anything that would
# change the format of RCS dates.  Otherwise people using e.g.,
# RCSINIT=-zLT get lots of spurious failures.
RCSINIT=

#
# Initialize the repository
#
$at_traceoff
echo "version.at:16: cvs init"
echo version.at:16 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "version.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Create the default project
#
mkdir top
cd top
$at_traceoff
echo "version.at:16: cvs -Q co -l ."
echo version.at:16 >$at_check_line_file
( $at_traceon; cvs -Q co -l . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "version.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

mkdir project
$at_traceoff
echo "version.at:16: cvs -Q add project"
echo version.at:16 >$at_check_line_file
( $at_traceon; cvs -Q add project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "version.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ..
rm -r top

#
# Check out the default project and cd into the workspace.
#
# I'm checking for error returns form the cd and printing error messages since,
# for instance, if the CVS executable picks up a ~/.cvsrc which causes empty
# directories to be pruned by checkout, the project directory will not be
# created but the `cvs co' will not return an error.
#
$at_traceoff
echo "version.at:16: cvs -Q co project"
echo version.at:16 >$at_check_line_file
( $at_traceon; cvs -Q co project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "version.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd project ||
  { { echo "$as_me:$LINENO: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&5
echo "$as_me: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&2;}
   { (exit 1); exit 1; }; }

###
### End AT_CVS_SETUP([version])
###



#
# There is some sense to sedding out the years as I do some of the other
# details below, but I think it is better to have a distcheck blocked because
# someone neglected to update the copyright notice than to avoid a few spurious
# failures when testing old versions of CVS.
#
this_year=`date +%Y`
$at_traceoff
echo "version.at:41: cvs --version |
  sed 's# 1\\.[0-9][0-9]*\\(\\.[0-9][0-9p]*\\)*\\( ([a-z/]*)\\)\\?\$##
       s# *\$##'"
echo version.at:41 >$at_check_line_file
( $at_traceon; cvs --version |
  sed 's# 1\.[0-9][0-9]*\(\.[0-9][0-9p]*\)*\( ([a-z/]*)\)\?$##
       s# *$##' ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "
Concurrent Versions System (CVS)

Copyright (c) 1989-$this_year Brian Berliner, david d \`zoo' zuhn,
                        Jeff Polk, and other authors

CVS may be copied only under the terms of the GNU General Public License,
a copy of which can be found with the CVS distribution kit.

Specify the --help option for further information about CVS
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "version.at:41: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon




$at_traceoff
echo "version.at:51: cvs version |
  sed 's#^\\(Client.*\\) 1\\.[0-9][0-9]*\\(\\.[0-9][0-9p]*\\)* (client\\(/server\\)\\?)\$#\\1 (client)#
       s#^\\(Server.*\\) 1\\.[0-9][0-9]*\\(\\.[0-9][0-9p]*\\)* (\\(client/\\)\\?server)\$#\\1 (server)#'"
echo version.at:51 >$at_check_line_file
( $at_traceon; cvs version |
  sed 's#^\(Client.*\) 1\.[0-9][0-9]*\(\.[0-9][0-9p]*\)* (client\(/server\)\?)$#\1 (client)#
       s#^\(Server.*\) 1\.[0-9][0-9]*\(\.[0-9][0-9p]*\)* (\(client/\)\?server)$#\1 (server)#' ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Client: Concurrent Versions System (CVS) (client)
Server: Concurrent Versions System (CVS) (server)
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "version.at:51: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon








      $at_traceoff
      $at_times_p && times >$at_times_file
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat $at_status_file`
    ;;


  banner-3 ) # Banner 3. basic.at:14
    cat <<\_ATEOF

Basic Functionality

_ATEOF
    ;;

  9 ) # 9. basic.at:16: Operations on empty projects
    at_setup_line='basic.at:16'
    at_desc='Operations on empty projects'
    $at_quiet $ECHO_N "  9: Operations on empty projects                 $ECHO_C"
    at_xfail=no
    (
      echo "9. basic.at:16: testing ..."
      $at_traceon
###
### Begin AT_CVS_SETUP([Operations on empty projects])
###


#
# Set CVSROOT_DIR, method, & CVSROOT
#
CVSROOT_DIR=$at_group_dir/cvsroot
method=
CVSROOT=$method$CVSROOT_DIR
export CVSROOT
SPROG=`basename $server`

#
# Clear a possibly damaging inherited environment.
#

# Avoid picking up any stray .cvsrc, etc., from the user running the tests
mkdir home
HOME=$at_group_dir/home; export HOME

# Make sure this variable is not defined to anything that would
# change the format of RCS dates.  Otherwise people using e.g.,
# RCSINIT=-zLT get lots of spurious failures.
RCSINIT=

#
# Initialize the repository
#
$at_traceoff
echo "basic.at:16: cvs init"
echo basic.at:16 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Create the default project
#
mkdir top
cd top
$at_traceoff
echo "basic.at:16: cvs -Q co -l ."
echo basic.at:16 >$at_check_line_file
( $at_traceon; cvs -Q co -l . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

mkdir project
$at_traceoff
echo "basic.at:16: cvs -Q add project"
echo basic.at:16 >$at_check_line_file
( $at_traceon; cvs -Q add project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ..
rm -r top

#
# Check out the default project and cd into the workspace.
#
# I'm checking for error returns form the cd and printing error messages since,
# for instance, if the CVS executable picks up a ~/.cvsrc which causes empty
# directories to be pruned by checkout, the project directory will not be
# created but the `cvs co' will not return an error.
#
$at_traceoff
echo "basic.at:16: cvs -Q co project"
echo basic.at:16 >$at_check_line_file
( $at_traceon; cvs -Q co project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd project ||
  { { echo "$as_me:$LINENO: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&5
echo "$as_me: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&2;}
   { (exit 1); exit 1; }; }

###
### End AT_CVS_SETUP([Operations on empty projects])
###

# Test a few operations, to ensure they gracefully do
# nothing in an empty directory.
$at_traceoff
echo "basic.at:20: cvs -q update"
echo basic.at:20 >$at_check_line_file
( $at_traceon; cvs -q update ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:20: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:21: cvs -q diff -c"
echo basic.at:21 >$at_check_line_file
( $at_traceon; cvs -q diff -c ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:21: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:22: cvs -q status"
echo basic.at:22 >$at_check_line_file
( $at_traceon; cvs -q status ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:22: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:23: cvs -q update ."
echo basic.at:23 >$at_check_line_file
( $at_traceon; cvs -q update . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:23: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:24: cvs -q update ./"
echo basic.at:24 >$at_check_line_file
( $at_traceon; cvs -q update ./ ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:24: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


      $at_traceoff
      $at_times_p && times >$at_times_file
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat $at_status_file`
    ;;

  10 ) # 10. basic.at:30: Adding directories and files
    at_setup_line='basic.at:30'
    at_desc='Adding directories and files'
    $at_quiet $ECHO_N " 10: Adding directories and files                 $ECHO_C"
    at_xfail=no
    (
      echo "10. basic.at:30: testing ..."
      $at_traceon
###
### Begin AT_CVS_SETUP([Adding directories and files])
###


#
# Set CVSROOT_DIR, method, & CVSROOT
#
CVSROOT_DIR=$at_group_dir/cvsroot
method=
CVSROOT=$method$CVSROOT_DIR
export CVSROOT
SPROG=`basename $server`

#
# Clear a possibly damaging inherited environment.
#

# Avoid picking up any stray .cvsrc, etc., from the user running the tests
mkdir home
HOME=$at_group_dir/home; export HOME

# Make sure this variable is not defined to anything that would
# change the format of RCS dates.  Otherwise people using e.g.,
# RCSINIT=-zLT get lots of spurious failures.
RCSINIT=

#
# Initialize the repository
#
$at_traceoff
echo "basic.at:30: cvs init"
echo basic.at:30 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:30: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Create the default project
#
mkdir top
cd top
$at_traceoff
echo "basic.at:30: cvs -Q co -l ."
echo basic.at:30 >$at_check_line_file
( $at_traceon; cvs -Q co -l . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:30: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

mkdir project
$at_traceoff
echo "basic.at:30: cvs -Q add project"
echo basic.at:30 >$at_check_line_file
( $at_traceon; cvs -Q add project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:30: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ..
rm -r top

#
# Check out the default project and cd into the workspace.
#
# I'm checking for error returns form the cd and printing error messages since,
# for instance, if the CVS executable picks up a ~/.cvsrc which causes empty
# directories to be pruned by checkout, the project directory will not be
# created but the `cvs co' will not return an error.
#
$at_traceoff
echo "basic.at:30: cvs -Q co project"
echo basic.at:30 >$at_check_line_file
( $at_traceon; cvs -Q co project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:30: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd project ||
  { { echo "$as_me:$LINENO: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&5
echo "$as_me: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&2;}
   { (exit 1); exit 1; }; }

###
### End AT_CVS_SETUP([Adding directories and files])
###

mkdir sdir

# FIXCVS
# Remote CVS gives the "cannot open CVS/Entries" error, which is
# clearly a bug, but not a simple one to fix.
$at_traceoff
echo "basic.at:39: cvs -n add sdir"
echo basic.at:39 >$at_check_line_file
( $at_traceon; cvs -n add sdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:39: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:40: test -d \$CVSROOT_DIR/project/sdir"
echo basic.at:40 >$at_check_line_file
( $at_traceon; test -d $CVSROOT_DIR/project/sdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:40: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:44: cvs add sdir"
echo basic.at:44 >$at_check_line_file
( $at_traceon; cvs add sdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:44: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


cd sdir
mkdir ssdir
$at_traceoff
echo "basic.at:50: cvs add ssdir"
echo basic.at:50 >$at_check_line_file
( $at_traceon; cvs add ssdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir/ssdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:50: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


cd ssdir
echo ssfile >ssfile

# Trying to commit it without a "cvs add" should be an error.
# The "use `cvs add' to create an entry" message is the one
# that I consider to be more correct, but local cvs prints the
# "nothing known" message and noone has gotten around to fixing it.
$at_traceoff
echo "basic.at:66: cvs -q ci ssfile"
echo basic.at:66 >$at_check_line_file
( $at_traceon; cvs -q ci ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$CPROG commit: nothing known about \`ssfile'
$CPROG [commit aborted]: correct above errors first!
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:66: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:71: cvs add ssfile"
echo basic.at:71 >$at_check_line_file
( $at_traceon; cvs add ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:71: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:71: (cat nstdout; cat nstderr >&2)"
echo basic.at:71 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: scheduling file \`ssfile' for addition
$SPROG command: use \`$SPROG commit' to add this file permanently
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:71: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

$at_traceoff
echo "basic.at:76: cvs tag tag0 ssfile"
echo basic.at:76 >$at_check_line_file
( $at_traceon; cvs tag tag0 ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:76: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:76: (cat nstdout; cat nstderr >&2)"
echo basic.at:76 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: nothing known about ssfile
$SPROG [command aborted]: correct the above errors first!
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:76: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

cd ../..
$at_traceoff
echo "basic.at:86: cvs -q ci -m add-it"
echo basic.at:86 >$at_check_line_file
( $at_traceon; cvs -q ci -m add-it ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
done
Checking in sdir/ssdir/ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
initial revision: 1.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:86: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


      $at_traceoff
      $at_times_p && times >$at_times_file
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat $at_status_file`
    ;;

  11 ) # 11. basic.at:130: tag, update, & diff
    at_setup_line='basic.at:130'
    at_desc='tag, update, & diff'
    $at_quiet $ECHO_N " 11: tag, update, & diff                          $ECHO_C"
    at_xfail=no
    (
      echo "11. basic.at:130: testing ..."
      $at_traceon
###
### Begin AT_CVS_SETUP([tag, update, & diff])
###


#
# Set CVSROOT_DIR, method, & CVSROOT
#
CVSROOT_DIR=$at_group_dir/cvsroot
method=
CVSROOT=$method$CVSROOT_DIR
export CVSROOT
SPROG=`basename $server`

#
# Clear a possibly damaging inherited environment.
#

# Avoid picking up any stray .cvsrc, etc., from the user running the tests
mkdir home
HOME=$at_group_dir/home; export HOME

# Make sure this variable is not defined to anything that would
# change the format of RCS dates.  Otherwise people using e.g.,
# RCSINIT=-zLT get lots of spurious failures.
RCSINIT=

#
# Initialize the repository
#
$at_traceoff
echo "basic.at:130: cvs init"
echo basic.at:130 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:130: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Create the default project
#
mkdir top
cd top
$at_traceoff
echo "basic.at:130: cvs -Q co -l ."
echo basic.at:130 >$at_check_line_file
( $at_traceon; cvs -Q co -l . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:130: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

mkdir project
$at_traceoff
echo "basic.at:130: cvs -Q add project"
echo basic.at:130 >$at_check_line_file
( $at_traceon; cvs -Q add project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:130: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ..
rm -r top

#
# Check out the default project and cd into the workspace.
#
# I'm checking for error returns form the cd and printing error messages since,
# for instance, if the CVS executable picks up a ~/.cvsrc which causes empty
# directories to be pruned by checkout, the project directory will not be
# created but the `cvs co' will not return an error.
#
$at_traceoff
echo "basic.at:130: cvs -Q co project"
echo basic.at:130 >$at_check_line_file
( $at_traceon; cvs -Q co project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:130: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd project ||
  { { echo "$as_me:$LINENO: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&5
echo "$as_me: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&2;}
   { (exit 1); exit 1; }; }

###
### End AT_CVS_SETUP([tag, update, & diff])
###

mkdir sdir
$at_traceoff
echo "basic.at:132: cvs add sdir"
echo basic.at:132 >$at_check_line_file
( $at_traceon; cvs add sdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:132: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd sdir
mkdir ssdir
$at_traceoff
echo "basic.at:132: cvs add ssdir"
echo basic.at:132 >$at_check_line_file
( $at_traceon; cvs add ssdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir/ssdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:132: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ssdir
echo ssfile >ssfile
$at_traceoff
echo "basic.at:132: cvs add ssfile"
echo basic.at:132 >$at_check_line_file
( $at_traceon; cvs add ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:132: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:132: (cat nstdout; cat nstderr >&2)"
echo basic.at:132 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: scheduling file \`ssfile' for addition
$SPROG command: use \`$SPROG commit' to add this file permanently
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:132: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout
$at_traceoff
echo "basic.at:132: cvs -q ci -m add-it"
echo basic.at:132 >$at_check_line_file
( $at_traceon; cvs -q ci -m add-it ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
done
Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
initial revision: 1.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:132: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ../..


$at_traceoff
echo "basic.at:137: cvs -q tag BASE sdir/ssdir/ssfile"
echo basic.at:137 >$at_check_line_file
( $at_traceon; cvs -q tag BASE sdir/ssdir/ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:137: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:137: (cat nstdout; cat nstderr >&2)"
echo basic.at:137 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: Attempt to add reserved tag name BASE
$SPROG [command aborted]: failed to set tag BASE to revision 1.1 in $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:137: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

$at_traceoff
echo "basic.at:140: cvs -q tag NOT_RESERVED"
echo basic.at:140 >$at_check_line_file
( $at_traceon; cvs -q tag NOT_RESERVED ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "T sdir/ssdir/ssfile
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:140: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:142: cvs -q update"
echo basic.at:142 >$at_check_line_file
( $at_traceon; cvs -q update ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:142: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


echo "ssfile line 2" >>sdir/ssdir/ssfile
$at_traceoff
echo "basic.at:158: cvs -q diff -c"
echo basic.at:158 >$at_check_line_file
( $at_traceon; cvs -q diff -c ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:158: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:158: (cat nstdout; cat nstderr >&2)"
echo basic.at:158 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Index: sdir/ssdir/ssfile
===================================================================
RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
retrieving revision 1.1
diff -c -r1.1 ssfile
*** sdir/ssdir/ssfile	RFCDATE	1.1
--- sdir/ssdir/ssfile	RFCDATE
***************
*** 1 ****
--- 1,2 ----
  ssfile
+ ssfile line 2
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:158: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

$at_traceoff
echo "basic.at:173: cvs -q diff -c -rBASE"
echo basic.at:173 >$at_check_line_file
( $at_traceon; cvs -q diff -c -rBASE ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:173: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:173: (cat nstdout; cat nstderr >&2)"
echo basic.at:173 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Index: sdir/ssdir/ssfile
===================================================================
RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
retrieving revision 1.1
diff -c -r1.1 ssfile
*** sdir/ssdir/ssfile	RFCDATE	1.1
--- sdir/ssdir/ssfile	RFCDATE
***************
*** 1 ****
--- 1,2 ----
  ssfile
+ ssfile line 2
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:173: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

$at_traceoff
echo "basic.at:183: cvs -q diff -c -rBASE -C3isacrowd"
echo basic.at:183 >$at_check_line_file
( $at_traceon; cvs -q diff -c -rBASE -C3isacrowd ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:183: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:183: (cat nstdout; cat nstderr >&2)"
echo basic.at:183 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: invalid context length argument
" | $at_diff - $at_stderr || at_failed=:
echo >>$at_stdout; echo "Index: sdir/ssdir/ssfile
===================================================================
RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
retrieving revision 1.1
diff -c -C3isacrowd -r1.1 ssfile
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:183: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

      $at_traceoff
      $at_times_p && times >$at_times_file
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat $at_status_file`
    ;;

  12 ) # 12. basic.at:189: commit -r, diff -r, strange resurrections
    at_setup_line='basic.at:189'
    at_desc='commit -r, diff -r, strange resurrections'
    $at_quiet $ECHO_N " 12: commit -r, diff -r, strange resurrections    $ECHO_C"
    at_xfail=no
    (
      echo "12. basic.at:189: testing ..."
      $at_traceon
###
### Begin AT_CVS_SETUP([commit -r, diff -r, strange resurrections])
###


#
# Set CVSROOT_DIR, method, & CVSROOT
#
CVSROOT_DIR=$at_group_dir/cvsroot
method=
CVSROOT=$method$CVSROOT_DIR
export CVSROOT
SPROG=`basename $server`

#
# Clear a possibly damaging inherited environment.
#

# Avoid picking up any stray .cvsrc, etc., from the user running the tests
mkdir home
HOME=$at_group_dir/home; export HOME

# Make sure this variable is not defined to anything that would
# change the format of RCS dates.  Otherwise people using e.g.,
# RCSINIT=-zLT get lots of spurious failures.
RCSINIT=

#
# Initialize the repository
#
$at_traceoff
echo "basic.at:189: cvs init"
echo basic.at:189 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:189: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Create the default project
#
mkdir top
cd top
$at_traceoff
echo "basic.at:189: cvs -Q co -l ."
echo basic.at:189 >$at_check_line_file
( $at_traceon; cvs -Q co -l . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:189: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

mkdir project
$at_traceoff
echo "basic.at:189: cvs -Q add project"
echo basic.at:189 >$at_check_line_file
( $at_traceon; cvs -Q add project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:189: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ..
rm -r top

#
# Check out the default project and cd into the workspace.
#
# I'm checking for error returns form the cd and printing error messages since,
# for instance, if the CVS executable picks up a ~/.cvsrc which causes empty
# directories to be pruned by checkout, the project directory will not be
# created but the `cvs co' will not return an error.
#
$at_traceoff
echo "basic.at:189: cvs -Q co project"
echo basic.at:189 >$at_check_line_file
( $at_traceon; cvs -Q co project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:189: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd project ||
  { { echo "$as_me:$LINENO: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&5
echo "$as_me: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&2;}
   { (exit 1); exit 1; }; }

###
### End AT_CVS_SETUP([commit -r, diff -r, strange resurrections])
###

mkdir sdir
$at_traceoff
echo "basic.at:191: cvs add sdir"
echo basic.at:191 >$at_check_line_file
( $at_traceon; cvs add sdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:191: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd sdir
mkdir ssdir
$at_traceoff
echo "basic.at:191: cvs add ssdir"
echo basic.at:191 >$at_check_line_file
( $at_traceon; cvs add ssdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir/ssdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:191: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ssdir
echo ssfile >ssfile
$at_traceoff
echo "basic.at:191: cvs add ssfile"
echo basic.at:191 >$at_check_line_file
( $at_traceon; cvs add ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:191: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:191: (cat nstdout; cat nstderr >&2)"
echo basic.at:191 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: scheduling file \`ssfile' for addition
$SPROG command: use \`$SPROG commit' to add this file permanently
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:191: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout
$at_traceoff
echo "basic.at:191: cvs -q ci -m add-it"
echo basic.at:191 >$at_check_line_file
( $at_traceon; cvs -q ci -m add-it ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
done
Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
initial revision: 1.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:191: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ../..

echo "ssfile line 2" >>sdir/ssdir/ssfile

$at_traceoff
echo "basic.at:199: cvs -q ci -m modify-it"
echo basic.at:199 >$at_check_line_file
( $at_traceon; cvs -q ci -m modify-it ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Checking in sdir/ssdir/ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 1.2; previous revision: 1.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:199: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:204: cvs -q ci nonexist"
echo basic.at:204 >$at_check_line_file
( $at_traceon; cvs -q ci nonexist ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$CPROG commit: nothing known about \`nonexist'
$CPROG [commit aborted]: correct above errors first!
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:204: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:206: cvs -q update ."
echo basic.at:206 >$at_check_line_file
( $at_traceon; cvs -q update . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:206: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


# Test the -f option to ci
cd sdir/ssdir
$at_traceoff
echo "basic.at:210: cvs -q ci -m not-modified ssfile"
echo basic.at:210 >$at_check_line_file
( $at_traceon; cvs -q ci -m not-modified ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:210: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:217: cvs -q ci -f -m force-it"
echo basic.at:217 >$at_check_line_file
( $at_traceon; cvs -q ci -f -m force-it ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 1.3; previous revision: 1.2
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:217: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:224: cvs -q ci -m bump-it -r 2.0"
echo basic.at:224 >$at_check_line_file
( $at_traceon; cvs -q ci -m bump-it -r 2.0 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 2.0; previous revision: 1.3
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:224: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


# -f should not be necessary, but it should be harmless.
# Also test the "-r 3" (rather than "-r 3.0") usage.
$at_traceoff
echo "basic.at:233: cvs -q ci -m bump-it -f -r 3"
echo basic.at:233 >$at_check_line_file
( $at_traceon; cvs -q ci -m bump-it -f -r 3 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 3.1; previous revision: 2.0
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:233: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


# Test using -r to create a branch
$at_traceoff
echo "basic.at:242: cvs -q ci -m bogus -r 3.0.0"
echo basic.at:242 >$at_check_line_file
( $at_traceon; cvs -q ci -m bogus -r 3.0.0 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:242: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:242: (cat nstdout; cat nstderr >&2)"
echo basic.at:242 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v: can't find branch point 3.0
$SPROG command: could not check in ssfile
" | $at_diff - $at_stderr || at_failed=:
echo >>$at_stdout; echo "Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:242: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

$at_traceoff
echo "basic.at:249: cvs -q ci -m valid -r 3.1.2"
echo basic.at:249 >$at_check_line_file
( $at_traceon; cvs -q ci -m valid -r 3.1.2 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 3.1.2.1; previous revision: 3.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:249: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


# now get rid of the sticky tag and go back to the trunk
$at_traceoff
echo "basic.at:254: cvs -q up -A ./"
echo basic.at:254 >$at_check_line_file
( $at_traceon; cvs -q up -A ./ ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:254: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:254: (cat nstdout; cat nstderr >&2)"
echo basic.at:254 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "U ssfile
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:254: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

$at_traceoff
echo "basic.at:256: cvs -q diff -r1.2 -r1.3"
echo basic.at:256 >$at_check_line_file
( $at_traceon; cvs -q diff -r1.2 -r1.3 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:256: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:258: cvs -q diff -r1.2 -r1.3 -C 3isacrowd"
echo basic.at:258 >$at_check_line_file
( $at_traceon; cvs -q diff -r1.2 -r1.3 -C 3isacrowd ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:258: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


# If memory serves, some systems (AIX?) have a different message than
# "No such file or directory".  When rediscovered, they will need to be
# accomodated below.
$at_traceoff
echo "basic.at:265: cvs -q -d \$at_group_dir/nonexist update"
echo basic.at:265 >$at_check_line_file
( $at_traceon; cvs -q -d $at_group_dir/nonexist update ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:265: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:265: (cat nstdout; cat nstderr >&2)"
echo basic.at:265 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$CPROG [command aborted]: $at_group_dir/nonexist/CVSROOT: No such file or directory
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:265: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

# Test resurrecting with strange revision numbers
$at_traceoff
echo "basic.at:271: cvs rm -f ssfile"
echo basic.at:271 >$at_check_line_file
( $at_traceon; cvs rm -f ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:271: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:271: (cat nstdout; cat nstderr >&2)"
echo basic.at:271 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: scheduling \`ssfile' for removal
$SPROG command: use \`${SPROG} commit' to remove this file permanently
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:271: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

$at_traceoff
echo "basic.at:278: cvs -q ci -m remove"
echo basic.at:278 >$at_check_line_file
( $at_traceon; cvs -q ci -m remove ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Removing ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: delete; previous revision: 3.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:278: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:280: cvs -q up -p -r 3.1 ./ssfile >ssfile"
echo basic.at:280 >$at_check_line_file
( $at_traceon; cvs -q up -p -r 3.1 ./ssfile >ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:280: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:284: cvs add ssfile"
echo basic.at:284 >$at_check_line_file
( $at_traceon; cvs add ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:284: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:284: (cat nstdout; cat nstderr >&2)"
echo basic.at:284 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: re-adding file \`ssfile' (in place of dead revision 3.2)
$SPROG command: use \`$SPROG commit' to add this file permanently
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:284: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

$at_traceoff
echo "basic.at:291: cvs -q ci -m resurrect"
echo basic.at:291 >$at_check_line_file
( $at_traceon; cvs -q ci -m resurrect ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 3.3; previous revision: 3.2
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:291: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


      $at_traceoff
      $at_times_p && times >$at_times_file
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat $at_status_file`
    ;;

  13 ) # 13. basic.at:297: annotate
    at_setup_line='basic.at:297'
    at_desc='annotate'
    $at_quiet $ECHO_N " 13: annotate                                     $ECHO_C"
    at_xfail=no
    (
      echo "13. basic.at:297: testing ..."
      $at_traceon
###
### Begin AT_CVS_SETUP([annotate])
###


#
# Set CVSROOT_DIR, method, & CVSROOT
#
CVSROOT_DIR=$at_group_dir/cvsroot
method=
CVSROOT=$method$CVSROOT_DIR
export CVSROOT
SPROG=`basename $server`

#
# Clear a possibly damaging inherited environment.
#

# Avoid picking up any stray .cvsrc, etc., from the user running the tests
mkdir home
HOME=$at_group_dir/home; export HOME

# Make sure this variable is not defined to anything that would
# change the format of RCS dates.  Otherwise people using e.g.,
# RCSINIT=-zLT get lots of spurious failures.
RCSINIT=

#
# Initialize the repository
#
$at_traceoff
echo "basic.at:297: cvs init"
echo basic.at:297 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:297: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Create the default project
#
mkdir top
cd top
$at_traceoff
echo "basic.at:297: cvs -Q co -l ."
echo basic.at:297 >$at_check_line_file
( $at_traceon; cvs -Q co -l . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:297: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

mkdir project
$at_traceoff
echo "basic.at:297: cvs -Q add project"
echo basic.at:297 >$at_check_line_file
( $at_traceon; cvs -Q add project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:297: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ..
rm -r top

#
# Check out the default project and cd into the workspace.
#
# I'm checking for error returns form the cd and printing error messages since,
# for instance, if the CVS executable picks up a ~/.cvsrc which causes empty
# directories to be pruned by checkout, the project directory will not be
# created but the `cvs co' will not return an error.
#
$at_traceoff
echo "basic.at:297: cvs -Q co project"
echo basic.at:297 >$at_check_line_file
( $at_traceon; cvs -Q co project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:297: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd project ||
  { { echo "$as_me:$LINENO: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&5
echo "$as_me: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&2;}
   { (exit 1); exit 1; }; }

###
### End AT_CVS_SETUP([annotate])
###

mkdir sdir
$at_traceoff
echo "basic.at:299: cvs add sdir"
echo basic.at:299 >$at_check_line_file
( $at_traceon; cvs add sdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:299: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd sdir
mkdir ssdir
$at_traceoff
echo "basic.at:299: cvs add ssdir"
echo basic.at:299 >$at_check_line_file
( $at_traceon; cvs add ssdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir/ssdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:299: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ssdir
echo ssfile >ssfile
$at_traceoff
echo "basic.at:299: cvs add ssfile"
echo basic.at:299 >$at_check_line_file
( $at_traceon; cvs add ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:299: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:299: (cat nstdout; cat nstderr >&2)"
echo basic.at:299 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: scheduling file \`ssfile' for addition
$SPROG command: use \`$SPROG commit' to add this file permanently
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:299: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout
$at_traceoff
echo "basic.at:299: cvs -q ci -m add-it"
echo basic.at:299 >$at_check_line_file
( $at_traceon; cvs -q ci -m add-it ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
done
Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
initial revision: 1.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:299: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ../..

echo "ssfile line 2" >>sdir/ssdir/ssfile
$at_traceoff
echo "basic.at:306: cvs -q ci -m modify-it"
echo basic.at:306 >$at_check_line_file
( $at_traceon; cvs -q ci -m modify-it ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Checking in sdir/ssdir/ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 1.2; previous revision: 1.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:306: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


# Skip this group if we don't know our username
$at_traceoff
echo "basic.at:315: \$as_cvs_have_username || exit 77"
echo basic.at:315 >$at_check_line_file
( $at_traceon; $as_cvs_have_username || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:315: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


# Set $nsrname to $username normalized to account for the fact that most CVS
# output is optimized to print $username in 8 characters.
if echo $username |awk -F '' '{if () exit 1}'; then
  nsrname=$username
else
  nsrname=`echo "$username       " |sed 's/^\(........\).*$/\1/'`
fi


# Now for the actual test
$at_traceoff
echo "basic.at:315: cvs annotate"
echo basic.at:315 >$at_check_line_file
( $at_traceon; cvs annotate ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:315: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


# Normalize the output of the previous command
sed -e "s/($nsrname [0-9][0-9]-[A-Z][a-z][a-z]-[0-9][0-9])/(USERNAME DATE)/" \
    <stdout >nstdout
sed -e "s/($nsrname [0-9][0-9]-[A-Z][a-z][a-z]-[0-9][0-9])/(USERNAME DATE)/" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:315: (cat nstdout; cat nstderr >&2)"
echo basic.at:315 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "
Annotations for sdir/ssdir/ssfile
***************
" | $at_diff - $at_stderr || at_failed=:
echo >>$at_stdout; echo "1.1          (USERNAME DATE): ssfile
1.2          (USERNAME DATE): ssfile line 2
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:315: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

      $at_traceoff
      $at_times_p && times >$at_times_file
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat $at_status_file`
    ;;

  14 ) # 14. basic.at:321: Resurrection
    at_setup_line='basic.at:321'
    at_desc='Resurrection'
    $at_quiet $ECHO_N " 14: Resurrection                                 $ECHO_C"
    at_xfail=no
    (
      echo "14. basic.at:321: testing ..."
      $at_traceon
###
### Begin AT_CVS_SETUP([Resurrection])
###


#
# Set CVSROOT_DIR, method, & CVSROOT
#
CVSROOT_DIR=$at_group_dir/cvsroot
method=
CVSROOT=$method$CVSROOT_DIR
export CVSROOT
SPROG=`basename $server`

#
# Clear a possibly damaging inherited environment.
#

# Avoid picking up any stray .cvsrc, etc., from the user running the tests
mkdir home
HOME=$at_group_dir/home; export HOME

# Make sure this variable is not defined to anything that would
# change the format of RCS dates.  Otherwise people using e.g.,
# RCSINIT=-zLT get lots of spurious failures.
RCSINIT=

#
# Initialize the repository
#
$at_traceoff
echo "basic.at:321: cvs init"
echo basic.at:321 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:321: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Create the default project
#
mkdir top
cd top
$at_traceoff
echo "basic.at:321: cvs -Q co -l ."
echo basic.at:321 >$at_check_line_file
( $at_traceon; cvs -Q co -l . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:321: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

mkdir project
$at_traceoff
echo "basic.at:321: cvs -Q add project"
echo basic.at:321 >$at_check_line_file
( $at_traceon; cvs -Q add project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:321: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ..
rm -r top

#
# Check out the default project and cd into the workspace.
#
# I'm checking for error returns form the cd and printing error messages since,
# for instance, if the CVS executable picks up a ~/.cvsrc which causes empty
# directories to be pruned by checkout, the project directory will not be
# created but the `cvs co' will not return an error.
#
$at_traceoff
echo "basic.at:321: cvs -Q co project"
echo basic.at:321 >$at_check_line_file
( $at_traceon; cvs -Q co project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:321: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd project ||
  { { echo "$as_me:$LINENO: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&5
echo "$as_me: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&2;}
   { (exit 1); exit 1; }; }

###
### End AT_CVS_SETUP([Resurrection])
###

mkdir sdir
$at_traceoff
echo "basic.at:323: cvs add sdir"
echo basic.at:323 >$at_check_line_file
( $at_traceon; cvs add sdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:323: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd sdir
mkdir ssdir
$at_traceoff
echo "basic.at:323: cvs add ssdir"
echo basic.at:323 >$at_check_line_file
( $at_traceon; cvs add ssdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir/ssdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:323: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ssdir
echo ssfile >ssfile
$at_traceoff
echo "basic.at:323: cvs add ssfile"
echo basic.at:323 >$at_check_line_file
( $at_traceon; cvs add ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:323: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:323: (cat nstdout; cat nstderr >&2)"
echo basic.at:323 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: scheduling file \`ssfile' for addition
$SPROG command: use \`$SPROG commit' to add this file permanently
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:323: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout
$at_traceoff
echo "basic.at:323: cvs -q ci -m add-it"
echo basic.at:323 >$at_check_line_file
( $at_traceon; cvs -q ci -m add-it ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
done
Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
initial revision: 1.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:323: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ../..


$at_traceoff
echo "basic.at:325: exit 77"
echo basic.at:325 >$at_check_line_file
( $at_traceon; exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:325: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


	  # As long as we have a file with a few revisions, test
	  # a few "cvs admin -o" invocations.
	  cd sdir/ssdir
	  dotest_fail basica-o1 "${testcvs} admin -o 1.2::1.2" \
"${CPROG} admin: while processing more than one file:
${CPROG} \admin aborted\: attempt to specify a numeric revision"
	  dotest basica-o2 "${testcvs} admin -o 1.2::1.2 ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
done"
	  dotest basica-o2a "${testcvs} admin -o 1.1::NOT_RESERVED ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
done"
	  dotest_fail basica-o2b "${testcvs} admin -o 1.1::NOT_EXIST ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
${SPROG} a-z*: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v: Revision NOT_EXIST doesn't exist.
${SPROG} a-z*: RCS file for .ssfile. not modified\."
	  dotest basica-o3 "${testcvs} admin -o 1.2::1.3 ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
done"
	  dotest basica-o4 "${testcvs} admin -o 3.1:: ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
deleting revision 3\.3
deleting revision 3\.2
done"
	  dotest basica-o5 "${testcvs} admin -o ::1.1 ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
done"
	  dotest basica-o5a "${testcvs} -n admin -o 1.2::3.1 ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
deleting revision 2\.0
deleting revision 1\.3
done"
	  dotest basica-o6 "${testcvs} admin -o 1.2::3.1 ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
deleting revision 2\.0
deleting revision 1\.3
done"
	  dotest basica-o6a "${testcvs} admin -o 3.1.2: ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
deleting revision 3\.1\.2\.1
done"
	  dotest basica-o7 "${testcvs} log -N ssfile" "
RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
Working file: ssfile
head: 3\.1
branch:
locks: strict
access list:
keyword substitution: kv
total revisions: 3;	selected revisions: 3
description:
----------------------------
revision 3\.1
date: 0-9/* 0-9:*;  author: ${username};  state: Exp;  lines: ${PLUS}0 -0
bump-it
----------------------------
revision 1\.2
date: 0-9/* 0-9:*;  author: ${username};  state: Exp;  lines: ${PLUS}1 -0
modify-it
----------------------------
revision 1\.1
date: 0-9/* 0-9:*;  author: ${username};  state: Exp;
add-it
============================================================================="
	  dotest basica-o8 "${testcvs} -q update -p -r 1.1 ./ssfile" "ssfile"
      $at_traceoff
      $at_times_p && times >$at_times_file
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat $at_status_file`
    ;;

  15 ) # 15. basic.at:16: Operations on empty projects-l
    at_setup_line='basic.at:16'
    at_desc='Operations on empty projects-l'
    $at_quiet $ECHO_N " 15: Operations on empty projects-l               $ECHO_C"
    at_xfail=no
    (
      echo "15. basic.at:16: testing ..."
      $at_traceon
###
### Begin AT_CVS_SETUP([Operations on empty projects])
###

#
# Create a symlinked CVSROOT_DIR
#
mkdir $at_group_dir/realcvsroot ||
  { { echo "$as_me:$LINENO: error: Cannot create directory \`$at_group_dir/realcvsroot'" >&5
echo "$as_me: error: Cannot create directory \`$at_group_dir/realcvsroot'" >&2;}
   { (exit 1); exit 1; }; }
$at_traceoff
echo "basic.at:16: ln -s realcvsroot \$at_group_dir/cvsroot || exit 77"
echo basic.at:16 >$at_check_line_file
( $at_traceon; ln -s realcvsroot $at_group_dir/cvsroot || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Set CVSROOT_DIR, method, & CVSROOT
#
CVSROOT_DIR=$at_group_dir/cvsroot
method=
CVSROOT=$method$CVSROOT_DIR
export CVSROOT
SPROG=`basename $server`

#
# Clear a possibly damaging inherited environment.
#

# Avoid picking up any stray .cvsrc, etc., from the user running the tests
mkdir home
HOME=$at_group_dir/home; export HOME

# Make sure this variable is not defined to anything that would
# change the format of RCS dates.  Otherwise people using e.g.,
# RCSINIT=-zLT get lots of spurious failures.
RCSINIT=

#
# Initialize the repository
#
$at_traceoff
echo "basic.at:16: cvs init"
echo basic.at:16 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Create the default project
#
mkdir top
cd top
$at_traceoff
echo "basic.at:16: cvs -Q co -l ."
echo basic.at:16 >$at_check_line_file
( $at_traceon; cvs -Q co -l . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

mkdir project
$at_traceoff
echo "basic.at:16: cvs -Q add project"
echo basic.at:16 >$at_check_line_file
( $at_traceon; cvs -Q add project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ..
rm -r top

#
# Check out the default project and cd into the workspace.
#
# I'm checking for error returns form the cd and printing error messages since,
# for instance, if the CVS executable picks up a ~/.cvsrc which causes empty
# directories to be pruned by checkout, the project directory will not be
# created but the `cvs co' will not return an error.
#
$at_traceoff
echo "basic.at:16: cvs -Q co project"
echo basic.at:16 >$at_check_line_file
( $at_traceon; cvs -Q co project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd project ||
  { { echo "$as_me:$LINENO: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&5
echo "$as_me: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&2;}
   { (exit 1); exit 1; }; }

###
### End AT_CVS_SETUP([Operations on empty projects])
###

# Test a few operations, to ensure they gracefully do
# nothing in an empty directory.
$at_traceoff
echo "basic.at:20: cvs -q update"
echo basic.at:20 >$at_check_line_file
( $at_traceon; cvs -q update ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:20: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:21: cvs -q diff -c"
echo basic.at:21 >$at_check_line_file
( $at_traceon; cvs -q diff -c ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:21: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:22: cvs -q status"
echo basic.at:22 >$at_check_line_file
( $at_traceon; cvs -q status ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:22: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:23: cvs -q update ."
echo basic.at:23 >$at_check_line_file
( $at_traceon; cvs -q update . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:23: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:24: cvs -q update ./"
echo basic.at:24 >$at_check_line_file
( $at_traceon; cvs -q update ./ ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:24: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


      $at_traceoff
      $at_times_p && times >$at_times_file
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat $at_status_file`
    ;;

  16 ) # 16. basic.at:30: Adding directories and files-l
    at_setup_line='basic.at:30'
    at_desc='Adding directories and files-l'
    $at_quiet $ECHO_N " 16: Adding directories and files-l               $ECHO_C"
    at_xfail=no
    (
      echo "16. basic.at:30: testing ..."
      $at_traceon
###
### Begin AT_CVS_SETUP([Adding directories and files])
###

#
# Create a symlinked CVSROOT_DIR
#
mkdir $at_group_dir/realcvsroot ||
  { { echo "$as_me:$LINENO: error: Cannot create directory \`$at_group_dir/realcvsroot'" >&5
echo "$as_me: error: Cannot create directory \`$at_group_dir/realcvsroot'" >&2;}
   { (exit 1); exit 1; }; }
$at_traceoff
echo "basic.at:30: ln -s realcvsroot \$at_group_dir/cvsroot || exit 77"
echo basic.at:30 >$at_check_line_file
( $at_traceon; ln -s realcvsroot $at_group_dir/cvsroot || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:30: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Set CVSROOT_DIR, method, & CVSROOT
#
CVSROOT_DIR=$at_group_dir/cvsroot
method=
CVSROOT=$method$CVSROOT_DIR
export CVSROOT
SPROG=`basename $server`

#
# Clear a possibly damaging inherited environment.
#

# Avoid picking up any stray .cvsrc, etc., from the user running the tests
mkdir home
HOME=$at_group_dir/home; export HOME

# Make sure this variable is not defined to anything that would
# change the format of RCS dates.  Otherwise people using e.g.,
# RCSINIT=-zLT get lots of spurious failures.
RCSINIT=

#
# Initialize the repository
#
$at_traceoff
echo "basic.at:30: cvs init"
echo basic.at:30 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:30: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Create the default project
#
mkdir top
cd top
$at_traceoff
echo "basic.at:30: cvs -Q co -l ."
echo basic.at:30 >$at_check_line_file
( $at_traceon; cvs -Q co -l . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:30: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

mkdir project
$at_traceoff
echo "basic.at:30: cvs -Q add project"
echo basic.at:30 >$at_check_line_file
( $at_traceon; cvs -Q add project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:30: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ..
rm -r top

#
# Check out the default project and cd into the workspace.
#
# I'm checking for error returns form the cd and printing error messages since,
# for instance, if the CVS executable picks up a ~/.cvsrc which causes empty
# directories to be pruned by checkout, the project directory will not be
# created but the `cvs co' will not return an error.
#
$at_traceoff
echo "basic.at:30: cvs -Q co project"
echo basic.at:30 >$at_check_line_file
( $at_traceon; cvs -Q co project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:30: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd project ||
  { { echo "$as_me:$LINENO: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&5
echo "$as_me: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&2;}
   { (exit 1); exit 1; }; }

###
### End AT_CVS_SETUP([Adding directories and files])
###

mkdir sdir

# FIXCVS
# Remote CVS gives the "cannot open CVS/Entries" error, which is
# clearly a bug, but not a simple one to fix.
$at_traceoff
echo "basic.at:39: cvs -n add sdir"
echo basic.at:39 >$at_check_line_file
( $at_traceon; cvs -n add sdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:39: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:40: test -d \$CVSROOT_DIR/project/sdir"
echo basic.at:40 >$at_check_line_file
( $at_traceon; test -d $CVSROOT_DIR/project/sdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:40: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:44: cvs add sdir"
echo basic.at:44 >$at_check_line_file
( $at_traceon; cvs add sdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:44: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


cd sdir
mkdir ssdir
$at_traceoff
echo "basic.at:50: cvs add ssdir"
echo basic.at:50 >$at_check_line_file
( $at_traceon; cvs add ssdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir/ssdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:50: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


cd ssdir
echo ssfile >ssfile

# Trying to commit it without a "cvs add" should be an error.
# The "use `cvs add' to create an entry" message is the one
# that I consider to be more correct, but local cvs prints the
# "nothing known" message and noone has gotten around to fixing it.
$at_traceoff
echo "basic.at:66: cvs -q ci ssfile"
echo basic.at:66 >$at_check_line_file
( $at_traceon; cvs -q ci ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$CPROG commit: nothing known about \`ssfile'
$CPROG [commit aborted]: correct above errors first!
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:66: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:71: cvs add ssfile"
echo basic.at:71 >$at_check_line_file
( $at_traceon; cvs add ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:71: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:71: (cat nstdout; cat nstderr >&2)"
echo basic.at:71 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: scheduling file \`ssfile' for addition
$SPROG command: use \`$SPROG commit' to add this file permanently
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:71: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

$at_traceoff
echo "basic.at:76: cvs tag tag0 ssfile"
echo basic.at:76 >$at_check_line_file
( $at_traceon; cvs tag tag0 ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:76: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:76: (cat nstdout; cat nstderr >&2)"
echo basic.at:76 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: nothing known about ssfile
$SPROG [command aborted]: correct the above errors first!
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:76: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

cd ../..
$at_traceoff
echo "basic.at:86: cvs -q ci -m add-it"
echo basic.at:86 >$at_check_line_file
( $at_traceon; cvs -q ci -m add-it ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
done
Checking in sdir/ssdir/ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
initial revision: 1.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:86: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


      $at_traceoff
      $at_times_p && times >$at_times_file
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat $at_status_file`
    ;;

  17 ) # 17. basic.at:130: tag, update, & diff-l
    at_setup_line='basic.at:130'
    at_desc='tag, update, & diff-l'
    $at_quiet $ECHO_N " 17: tag, update, & diff-l                        $ECHO_C"
    at_xfail=no
    (
      echo "17. basic.at:130: testing ..."
      $at_traceon
###
### Begin AT_CVS_SETUP([tag, update, & diff])
###

#
# Create a symlinked CVSROOT_DIR
#
mkdir $at_group_dir/realcvsroot ||
  { { echo "$as_me:$LINENO: error: Cannot create directory \`$at_group_dir/realcvsroot'" >&5
echo "$as_me: error: Cannot create directory \`$at_group_dir/realcvsroot'" >&2;}
   { (exit 1); exit 1; }; }
$at_traceoff
echo "basic.at:130: ln -s realcvsroot \$at_group_dir/cvsroot || exit 77"
echo basic.at:130 >$at_check_line_file
( $at_traceon; ln -s realcvsroot $at_group_dir/cvsroot || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:130: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Set CVSROOT_DIR, method, & CVSROOT
#
CVSROOT_DIR=$at_group_dir/cvsroot
method=
CVSROOT=$method$CVSROOT_DIR
export CVSROOT
SPROG=`basename $server`

#
# Clear a possibly damaging inherited environment.
#

# Avoid picking up any stray .cvsrc, etc., from the user running the tests
mkdir home
HOME=$at_group_dir/home; export HOME

# Make sure this variable is not defined to anything that would
# change the format of RCS dates.  Otherwise people using e.g.,
# RCSINIT=-zLT get lots of spurious failures.
RCSINIT=

#
# Initialize the repository
#
$at_traceoff
echo "basic.at:130: cvs init"
echo basic.at:130 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:130: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Create the default project
#
mkdir top
cd top
$at_traceoff
echo "basic.at:130: cvs -Q co -l ."
echo basic.at:130 >$at_check_line_file
( $at_traceon; cvs -Q co -l . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:130: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

mkdir project
$at_traceoff
echo "basic.at:130: cvs -Q add project"
echo basic.at:130 >$at_check_line_file
( $at_traceon; cvs -Q add project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:130: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ..
rm -r top

#
# Check out the default project and cd into the workspace.
#
# I'm checking for error returns form the cd and printing error messages since,
# for instance, if the CVS executable picks up a ~/.cvsrc which causes empty
# directories to be pruned by checkout, the project directory will not be
# created but the `cvs co' will not return an error.
#
$at_traceoff
echo "basic.at:130: cvs -Q co project"
echo basic.at:130 >$at_check_line_file
( $at_traceon; cvs -Q co project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:130: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd project ||
  { { echo "$as_me:$LINENO: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&5
echo "$as_me: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&2;}
   { (exit 1); exit 1; }; }

###
### End AT_CVS_SETUP([tag, update, & diff])
###

mkdir sdir
$at_traceoff
echo "basic.at:132: cvs add sdir"
echo basic.at:132 >$at_check_line_file
( $at_traceon; cvs add sdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:132: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd sdir
mkdir ssdir
$at_traceoff
echo "basic.at:132: cvs add ssdir"
echo basic.at:132 >$at_check_line_file
( $at_traceon; cvs add ssdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir/ssdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:132: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ssdir
echo ssfile >ssfile
$at_traceoff
echo "basic.at:132: cvs add ssfile"
echo basic.at:132 >$at_check_line_file
( $at_traceon; cvs add ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:132: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:132: (cat nstdout; cat nstderr >&2)"
echo basic.at:132 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: scheduling file \`ssfile' for addition
$SPROG command: use \`$SPROG commit' to add this file permanently
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:132: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout
$at_traceoff
echo "basic.at:132: cvs -q ci -m add-it"
echo basic.at:132 >$at_check_line_file
( $at_traceon; cvs -q ci -m add-it ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
done
Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
initial revision: 1.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:132: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ../..


$at_traceoff
echo "basic.at:137: cvs -q tag BASE sdir/ssdir/ssfile"
echo basic.at:137 >$at_check_line_file
( $at_traceon; cvs -q tag BASE sdir/ssdir/ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:137: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:137: (cat nstdout; cat nstderr >&2)"
echo basic.at:137 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: Attempt to add reserved tag name BASE
$SPROG [command aborted]: failed to set tag BASE to revision 1.1 in $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:137: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

$at_traceoff
echo "basic.at:140: cvs -q tag NOT_RESERVED"
echo basic.at:140 >$at_check_line_file
( $at_traceon; cvs -q tag NOT_RESERVED ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "T sdir/ssdir/ssfile
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:140: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:142: cvs -q update"
echo basic.at:142 >$at_check_line_file
( $at_traceon; cvs -q update ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:142: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


echo "ssfile line 2" >>sdir/ssdir/ssfile
$at_traceoff
echo "basic.at:158: cvs -q diff -c"
echo basic.at:158 >$at_check_line_file
( $at_traceon; cvs -q diff -c ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:158: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:158: (cat nstdout; cat nstderr >&2)"
echo basic.at:158 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Index: sdir/ssdir/ssfile
===================================================================
RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
retrieving revision 1.1
diff -c -r1.1 ssfile
*** sdir/ssdir/ssfile	RFCDATE	1.1
--- sdir/ssdir/ssfile	RFCDATE
***************
*** 1 ****
--- 1,2 ----
  ssfile
+ ssfile line 2
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:158: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

$at_traceoff
echo "basic.at:173: cvs -q diff -c -rBASE"
echo basic.at:173 >$at_check_line_file
( $at_traceon; cvs -q diff -c -rBASE ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:173: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:173: (cat nstdout; cat nstderr >&2)"
echo basic.at:173 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Index: sdir/ssdir/ssfile
===================================================================
RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
retrieving revision 1.1
diff -c -r1.1 ssfile
*** sdir/ssdir/ssfile	RFCDATE	1.1
--- sdir/ssdir/ssfile	RFCDATE
***************
*** 1 ****
--- 1,2 ----
  ssfile
+ ssfile line 2
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:173: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

$at_traceoff
echo "basic.at:183: cvs -q diff -c -rBASE -C3isacrowd"
echo basic.at:183 >$at_check_line_file
( $at_traceon; cvs -q diff -c -rBASE -C3isacrowd ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:183: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:183: (cat nstdout; cat nstderr >&2)"
echo basic.at:183 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: invalid context length argument
" | $at_diff - $at_stderr || at_failed=:
echo >>$at_stdout; echo "Index: sdir/ssdir/ssfile
===================================================================
RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
retrieving revision 1.1
diff -c -C3isacrowd -r1.1 ssfile
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:183: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

      $at_traceoff
      $at_times_p && times >$at_times_file
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat $at_status_file`
    ;;

  18 ) # 18. basic.at:189: commit -r, diff -r, strange resurrections-l
    at_setup_line='basic.at:189'
    at_desc='commit -r, diff -r, strange resurrections-l'
    $at_quiet $ECHO_N " 18: commit -r, diff -r, strange resurrections-l  $ECHO_C"
    at_xfail=no
    (
      echo "18. basic.at:189: testing ..."
      $at_traceon
###
### Begin AT_CVS_SETUP([commit -r, diff -r, strange resurrections])
###

#
# Create a symlinked CVSROOT_DIR
#
mkdir $at_group_dir/realcvsroot ||
  { { echo "$as_me:$LINENO: error: Cannot create directory \`$at_group_dir/realcvsroot'" >&5
echo "$as_me: error: Cannot create directory \`$at_group_dir/realcvsroot'" >&2;}
   { (exit 1); exit 1; }; }
$at_traceoff
echo "basic.at:189: ln -s realcvsroot \$at_group_dir/cvsroot || exit 77"
echo basic.at:189 >$at_check_line_file
( $at_traceon; ln -s realcvsroot $at_group_dir/cvsroot || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:189: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Set CVSROOT_DIR, method, & CVSROOT
#
CVSROOT_DIR=$at_group_dir/cvsroot
method=
CVSROOT=$method$CVSROOT_DIR
export CVSROOT
SPROG=`basename $server`

#
# Clear a possibly damaging inherited environment.
#

# Avoid picking up any stray .cvsrc, etc., from the user running the tests
mkdir home
HOME=$at_group_dir/home; export HOME

# Make sure this variable is not defined to anything that would
# change the format of RCS dates.  Otherwise people using e.g.,
# RCSINIT=-zLT get lots of spurious failures.
RCSINIT=

#
# Initialize the repository
#
$at_traceoff
echo "basic.at:189: cvs init"
echo basic.at:189 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:189: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Create the default project
#
mkdir top
cd top
$at_traceoff
echo "basic.at:189: cvs -Q co -l ."
echo basic.at:189 >$at_check_line_file
( $at_traceon; cvs -Q co -l . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:189: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

mkdir project
$at_traceoff
echo "basic.at:189: cvs -Q add project"
echo basic.at:189 >$at_check_line_file
( $at_traceon; cvs -Q add project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:189: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ..
rm -r top

#
# Check out the default project and cd into the workspace.
#
# I'm checking for error returns form the cd and printing error messages since,
# for instance, if the CVS executable picks up a ~/.cvsrc which causes empty
# directories to be pruned by checkout, the project directory will not be
# created but the `cvs co' will not return an error.
#
$at_traceoff
echo "basic.at:189: cvs -Q co project"
echo basic.at:189 >$at_check_line_file
( $at_traceon; cvs -Q co project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:189: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd project ||
  { { echo "$as_me:$LINENO: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&5
echo "$as_me: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&2;}
   { (exit 1); exit 1; }; }

###
### End AT_CVS_SETUP([commit -r, diff -r, strange resurrections])
###

mkdir sdir
$at_traceoff
echo "basic.at:191: cvs add sdir"
echo basic.at:191 >$at_check_line_file
( $at_traceon; cvs add sdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:191: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd sdir
mkdir ssdir
$at_traceoff
echo "basic.at:191: cvs add ssdir"
echo basic.at:191 >$at_check_line_file
( $at_traceon; cvs add ssdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir/ssdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:191: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ssdir
echo ssfile >ssfile
$at_traceoff
echo "basic.at:191: cvs add ssfile"
echo basic.at:191 >$at_check_line_file
( $at_traceon; cvs add ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:191: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:191: (cat nstdout; cat nstderr >&2)"
echo basic.at:191 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: scheduling file \`ssfile' for addition
$SPROG command: use \`$SPROG commit' to add this file permanently
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:191: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout
$at_traceoff
echo "basic.at:191: cvs -q ci -m add-it"
echo basic.at:191 >$at_check_line_file
( $at_traceon; cvs -q ci -m add-it ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
done
Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
initial revision: 1.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:191: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ../..

echo "ssfile line 2" >>sdir/ssdir/ssfile

$at_traceoff
echo "basic.at:199: cvs -q ci -m modify-it"
echo basic.at:199 >$at_check_line_file
( $at_traceon; cvs -q ci -m modify-it ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Checking in sdir/ssdir/ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 1.2; previous revision: 1.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:199: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:204: cvs -q ci nonexist"
echo basic.at:204 >$at_check_line_file
( $at_traceon; cvs -q ci nonexist ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$CPROG commit: nothing known about \`nonexist'
$CPROG [commit aborted]: correct above errors first!
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:204: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:206: cvs -q update ."
echo basic.at:206 >$at_check_line_file
( $at_traceon; cvs -q update . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:206: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


# Test the -f option to ci
cd sdir/ssdir
$at_traceoff
echo "basic.at:210: cvs -q ci -m not-modified ssfile"
echo basic.at:210 >$at_check_line_file
( $at_traceon; cvs -q ci -m not-modified ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:210: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:217: cvs -q ci -f -m force-it"
echo basic.at:217 >$at_check_line_file
( $at_traceon; cvs -q ci -f -m force-it ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 1.3; previous revision: 1.2
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:217: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:224: cvs -q ci -m bump-it -r 2.0"
echo basic.at:224 >$at_check_line_file
( $at_traceon; cvs -q ci -m bump-it -r 2.0 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 2.0; previous revision: 1.3
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:224: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


# -f should not be necessary, but it should be harmless.
# Also test the "-r 3" (rather than "-r 3.0") usage.
$at_traceoff
echo "basic.at:233: cvs -q ci -m bump-it -f -r 3"
echo basic.at:233 >$at_check_line_file
( $at_traceon; cvs -q ci -m bump-it -f -r 3 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 3.1; previous revision: 2.0
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:233: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


# Test using -r to create a branch
$at_traceoff
echo "basic.at:242: cvs -q ci -m bogus -r 3.0.0"
echo basic.at:242 >$at_check_line_file
( $at_traceon; cvs -q ci -m bogus -r 3.0.0 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:242: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:242: (cat nstdout; cat nstderr >&2)"
echo basic.at:242 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v: can't find branch point 3.0
$SPROG command: could not check in ssfile
" | $at_diff - $at_stderr || at_failed=:
echo >>$at_stdout; echo "Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:242: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

$at_traceoff
echo "basic.at:249: cvs -q ci -m valid -r 3.1.2"
echo basic.at:249 >$at_check_line_file
( $at_traceon; cvs -q ci -m valid -r 3.1.2 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 3.1.2.1; previous revision: 3.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:249: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


# now get rid of the sticky tag and go back to the trunk
$at_traceoff
echo "basic.at:254: cvs -q up -A ./"
echo basic.at:254 >$at_check_line_file
( $at_traceon; cvs -q up -A ./ ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:254: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:254: (cat nstdout; cat nstderr >&2)"
echo basic.at:254 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "U ssfile
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:254: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

$at_traceoff
echo "basic.at:256: cvs -q diff -r1.2 -r1.3"
echo basic.at:256 >$at_check_line_file
( $at_traceon; cvs -q diff -r1.2 -r1.3 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:256: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:258: cvs -q diff -r1.2 -r1.3 -C 3isacrowd"
echo basic.at:258 >$at_check_line_file
( $at_traceon; cvs -q diff -r1.2 -r1.3 -C 3isacrowd ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:258: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


# If memory serves, some systems (AIX?) have a different message than
# "No such file or directory".  When rediscovered, they will need to be
# accomodated below.
$at_traceoff
echo "basic.at:265: cvs -q -d \$at_group_dir/nonexist update"
echo basic.at:265 >$at_check_line_file
( $at_traceon; cvs -q -d $at_group_dir/nonexist update ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:265: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:265: (cat nstdout; cat nstderr >&2)"
echo basic.at:265 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$CPROG [command aborted]: $at_group_dir/nonexist/CVSROOT: No such file or directory
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:265: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

# Test resurrecting with strange revision numbers
$at_traceoff
echo "basic.at:271: cvs rm -f ssfile"
echo basic.at:271 >$at_check_line_file
( $at_traceon; cvs rm -f ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:271: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:271: (cat nstdout; cat nstderr >&2)"
echo basic.at:271 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: scheduling \`ssfile' for removal
$SPROG command: use \`${SPROG} commit' to remove this file permanently
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:271: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

$at_traceoff
echo "basic.at:278: cvs -q ci -m remove"
echo basic.at:278 >$at_check_line_file
( $at_traceon; cvs -q ci -m remove ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Removing ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: delete; previous revision: 3.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:278: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:280: cvs -q up -p -r 3.1 ./ssfile >ssfile"
echo basic.at:280 >$at_check_line_file
( $at_traceon; cvs -q up -p -r 3.1 ./ssfile >ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:280: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:284: cvs add ssfile"
echo basic.at:284 >$at_check_line_file
( $at_traceon; cvs add ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:284: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:284: (cat nstdout; cat nstderr >&2)"
echo basic.at:284 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: re-adding file \`ssfile' (in place of dead revision 3.2)
$SPROG command: use \`$SPROG commit' to add this file permanently
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:284: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

$at_traceoff
echo "basic.at:291: cvs -q ci -m resurrect"
echo basic.at:291 >$at_check_line_file
( $at_traceon; cvs -q ci -m resurrect ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 3.3; previous revision: 3.2
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:291: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


      $at_traceoff
      $at_times_p && times >$at_times_file
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat $at_status_file`
    ;;

  19 ) # 19. basic.at:297: annotate-l
    at_setup_line='basic.at:297'
    at_desc='annotate-l'
    $at_quiet $ECHO_N " 19: annotate-l                                   $ECHO_C"
    at_xfail=no
    (
      echo "19. basic.at:297: testing ..."
      $at_traceon
###
### Begin AT_CVS_SETUP([annotate])
###

#
# Create a symlinked CVSROOT_DIR
#
mkdir $at_group_dir/realcvsroot ||
  { { echo "$as_me:$LINENO: error: Cannot create directory \`$at_group_dir/realcvsroot'" >&5
echo "$as_me: error: Cannot create directory \`$at_group_dir/realcvsroot'" >&2;}
   { (exit 1); exit 1; }; }
$at_traceoff
echo "basic.at:297: ln -s realcvsroot \$at_group_dir/cvsroot || exit 77"
echo basic.at:297 >$at_check_line_file
( $at_traceon; ln -s realcvsroot $at_group_dir/cvsroot || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:297: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Set CVSROOT_DIR, method, & CVSROOT
#
CVSROOT_DIR=$at_group_dir/cvsroot
method=
CVSROOT=$method$CVSROOT_DIR
export CVSROOT
SPROG=`basename $server`

#
# Clear a possibly damaging inherited environment.
#

# Avoid picking up any stray .cvsrc, etc., from the user running the tests
mkdir home
HOME=$at_group_dir/home; export HOME

# Make sure this variable is not defined to anything that would
# change the format of RCS dates.  Otherwise people using e.g.,
# RCSINIT=-zLT get lots of spurious failures.
RCSINIT=

#
# Initialize the repository
#
$at_traceoff
echo "basic.at:297: cvs init"
echo basic.at:297 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:297: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Create the default project
#
mkdir top
cd top
$at_traceoff
echo "basic.at:297: cvs -Q co -l ."
echo basic.at:297 >$at_check_line_file
( $at_traceon; cvs -Q co -l . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:297: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

mkdir project
$at_traceoff
echo "basic.at:297: cvs -Q add project"
echo basic.at:297 >$at_check_line_file
( $at_traceon; cvs -Q add project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:297: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ..
rm -r top

#
# Check out the default project and cd into the workspace.
#
# I'm checking for error returns form the cd and printing error messages since,
# for instance, if the CVS executable picks up a ~/.cvsrc which causes empty
# directories to be pruned by checkout, the project directory will not be
# created but the `cvs co' will not return an error.
#
$at_traceoff
echo "basic.at:297: cvs -Q co project"
echo basic.at:297 >$at_check_line_file
( $at_traceon; cvs -Q co project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:297: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd project ||
  { { echo "$as_me:$LINENO: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&5
echo "$as_me: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&2;}
   { (exit 1); exit 1; }; }

###
### End AT_CVS_SETUP([annotate])
###

mkdir sdir
$at_traceoff
echo "basic.at:299: cvs add sdir"
echo basic.at:299 >$at_check_line_file
( $at_traceon; cvs add sdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:299: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd sdir
mkdir ssdir
$at_traceoff
echo "basic.at:299: cvs add ssdir"
echo basic.at:299 >$at_check_line_file
( $at_traceon; cvs add ssdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir/ssdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:299: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ssdir
echo ssfile >ssfile
$at_traceoff
echo "basic.at:299: cvs add ssfile"
echo basic.at:299 >$at_check_line_file
( $at_traceon; cvs add ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:299: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:299: (cat nstdout; cat nstderr >&2)"
echo basic.at:299 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: scheduling file \`ssfile' for addition
$SPROG command: use \`$SPROG commit' to add this file permanently
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:299: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout
$at_traceoff
echo "basic.at:299: cvs -q ci -m add-it"
echo basic.at:299 >$at_check_line_file
( $at_traceon; cvs -q ci -m add-it ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
done
Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
initial revision: 1.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:299: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ../..

echo "ssfile line 2" >>sdir/ssdir/ssfile
$at_traceoff
echo "basic.at:306: cvs -q ci -m modify-it"
echo basic.at:306 >$at_check_line_file
( $at_traceon; cvs -q ci -m modify-it ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Checking in sdir/ssdir/ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 1.2; previous revision: 1.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:306: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


# Skip this group if we don't know our username
$at_traceoff
echo "basic.at:315: \$as_cvs_have_username || exit 77"
echo basic.at:315 >$at_check_line_file
( $at_traceon; $as_cvs_have_username || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:315: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


# Set $nsrname to $username normalized to account for the fact that most CVS
# output is optimized to print $username in 8 characters.
if echo $username |awk -F '' '{if () exit 1}'; then
  nsrname=$username
else
  nsrname=`echo "$username       " |sed 's/^\(........\).*$/\1/'`
fi


# Now for the actual test
$at_traceoff
echo "basic.at:315: cvs annotate"
echo basic.at:315 >$at_check_line_file
( $at_traceon; cvs annotate ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:315: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


# Normalize the output of the previous command
sed -e "s/($nsrname [0-9][0-9]-[A-Z][a-z][a-z]-[0-9][0-9])/(USERNAME DATE)/" \
    <stdout >nstdout
sed -e "s/($nsrname [0-9][0-9]-[A-Z][a-z][a-z]-[0-9][0-9])/(USERNAME DATE)/" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:315: (cat nstdout; cat nstderr >&2)"
echo basic.at:315 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "
Annotations for sdir/ssdir/ssfile
***************
" | $at_diff - $at_stderr || at_failed=:
echo >>$at_stdout; echo "1.1          (USERNAME DATE): ssfile
1.2          (USERNAME DATE): ssfile line 2
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:315: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

      $at_traceoff
      $at_times_p && times >$at_times_file
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat $at_status_file`
    ;;

  20 ) # 20. basic.at:321: Resurrection-l
    at_setup_line='basic.at:321'
    at_desc='Resurrection-l'
    $at_quiet $ECHO_N " 20: Resurrection-l                               $ECHO_C"
    at_xfail=no
    (
      echo "20. basic.at:321: testing ..."
      $at_traceon
###
### Begin AT_CVS_SETUP([Resurrection])
###

#
# Create a symlinked CVSROOT_DIR
#
mkdir $at_group_dir/realcvsroot ||
  { { echo "$as_me:$LINENO: error: Cannot create directory \`$at_group_dir/realcvsroot'" >&5
echo "$as_me: error: Cannot create directory \`$at_group_dir/realcvsroot'" >&2;}
   { (exit 1); exit 1; }; }
$at_traceoff
echo "basic.at:321: ln -s realcvsroot \$at_group_dir/cvsroot || exit 77"
echo basic.at:321 >$at_check_line_file
( $at_traceon; ln -s realcvsroot $at_group_dir/cvsroot || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:321: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Set CVSROOT_DIR, method, & CVSROOT
#
CVSROOT_DIR=$at_group_dir/cvsroot
method=
CVSROOT=$method$CVSROOT_DIR
export CVSROOT
SPROG=`basename $server`

#
# Clear a possibly damaging inherited environment.
#

# Avoid picking up any stray .cvsrc, etc., from the user running the tests
mkdir home
HOME=$at_group_dir/home; export HOME

# Make sure this variable is not defined to anything that would
# change the format of RCS dates.  Otherwise people using e.g.,
# RCSINIT=-zLT get lots of spurious failures.
RCSINIT=

#
# Initialize the repository
#
$at_traceoff
echo "basic.at:321: cvs init"
echo basic.at:321 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:321: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Create the default project
#
mkdir top
cd top
$at_traceoff
echo "basic.at:321: cvs -Q co -l ."
echo basic.at:321 >$at_check_line_file
( $at_traceon; cvs -Q co -l . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:321: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

mkdir project
$at_traceoff
echo "basic.at:321: cvs -Q add project"
echo basic.at:321 >$at_check_line_file
( $at_traceon; cvs -Q add project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:321: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ..
rm -r top

#
# Check out the default project and cd into the workspace.
#
# I'm checking for error returns form the cd and printing error messages since,
# for instance, if the CVS executable picks up a ~/.cvsrc which causes empty
# directories to be pruned by checkout, the project directory will not be
# created but the `cvs co' will not return an error.
#
$at_traceoff
echo "basic.at:321: cvs -Q co project"
echo basic.at:321 >$at_check_line_file
( $at_traceon; cvs -Q co project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:321: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd project ||
  { { echo "$as_me:$LINENO: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&5
echo "$as_me: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&2;}
   { (exit 1); exit 1; }; }

###
### End AT_CVS_SETUP([Resurrection])
###

mkdir sdir
$at_traceoff
echo "basic.at:323: cvs add sdir"
echo basic.at:323 >$at_check_line_file
( $at_traceon; cvs add sdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:323: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd sdir
mkdir ssdir
$at_traceoff
echo "basic.at:323: cvs add ssdir"
echo basic.at:323 >$at_check_line_file
( $at_traceon; cvs add ssdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir/ssdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:323: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ssdir
echo ssfile >ssfile
$at_traceoff
echo "basic.at:323: cvs add ssfile"
echo basic.at:323 >$at_check_line_file
( $at_traceon; cvs add ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:323: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:323: (cat nstdout; cat nstderr >&2)"
echo basic.at:323 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: scheduling file \`ssfile' for addition
$SPROG command: use \`$SPROG commit' to add this file permanently
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:323: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout
$at_traceoff
echo "basic.at:323: cvs -q ci -m add-it"
echo basic.at:323 >$at_check_line_file
( $at_traceon; cvs -q ci -m add-it ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
done
Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
initial revision: 1.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:323: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ../..


$at_traceoff
echo "basic.at:325: exit 77"
echo basic.at:325 >$at_check_line_file
( $at_traceon; exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:325: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


	  # As long as we have a file with a few revisions, test
	  # a few "cvs admin -o" invocations.
	  cd sdir/ssdir
	  dotest_fail basica-o1 "${testcvs} admin -o 1.2::1.2" \
"${CPROG} admin: while processing more than one file:
${CPROG} \admin aborted\: attempt to specify a numeric revision"
	  dotest basica-o2 "${testcvs} admin -o 1.2::1.2 ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
done"
	  dotest basica-o2a "${testcvs} admin -o 1.1::NOT_RESERVED ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
done"
	  dotest_fail basica-o2b "${testcvs} admin -o 1.1::NOT_EXIST ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
${SPROG} a-z*: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v: Revision NOT_EXIST doesn't exist.
${SPROG} a-z*: RCS file for .ssfile. not modified\."
	  dotest basica-o3 "${testcvs} admin -o 1.2::1.3 ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
done"
	  dotest basica-o4 "${testcvs} admin -o 3.1:: ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
deleting revision 3\.3
deleting revision 3\.2
done"
	  dotest basica-o5 "${testcvs} admin -o ::1.1 ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
done"
	  dotest basica-o5a "${testcvs} -n admin -o 1.2::3.1 ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
deleting revision 2\.0
deleting revision 1\.3
done"
	  dotest basica-o6 "${testcvs} admin -o 1.2::3.1 ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
deleting revision 2\.0
deleting revision 1\.3
done"
	  dotest basica-o6a "${testcvs} admin -o 3.1.2: ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
deleting revision 3\.1\.2\.1
done"
	  dotest basica-o7 "${testcvs} log -N ssfile" "
RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
Working file: ssfile
head: 3\.1
branch:
locks: strict
access list:
keyword substitution: kv
total revisions: 3;	selected revisions: 3
description:
----------------------------
revision 3\.1
date: 0-9/* 0-9:*;  author: ${username};  state: Exp;  lines: ${PLUS}0 -0
bump-it
----------------------------
revision 1\.2
date: 0-9/* 0-9:*;  author: ${username};  state: Exp;  lines: ${PLUS}1 -0
modify-it
----------------------------
revision 1\.1
date: 0-9/* 0-9:*;  author: ${username};  state: Exp;
add-it
============================================================================="
	  dotest basica-o8 "${testcvs} -q update -p -r 1.1 ./ssfile" "ssfile"
      $at_traceoff
      $at_times_p && times >$at_times_file
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat $at_status_file`
    ;;

  21 ) # 21. basic.at:16: Operations on empty projects-r
    at_setup_line='basic.at:16'
    at_desc='Operations on empty projects-r'
    $at_quiet $ECHO_N " 21: Operations on empty projects-r               $ECHO_C"
    at_xfail=no
    (
      echo "21. basic.at:16: testing ..."
      $at_traceon
###
### Begin AT_CVS_SETUP([Operations on empty projects])
###


#
# Set CVSROOT_DIR, method, & CVSROOT
#
CVSROOT_DIR=$at_group_dir/cvsroot
$at_traceoff
echo "basic.at:16: cvs --version |grep client || exit 77"
echo basic.at:16 >$at_check_line_file
( $at_traceon; cvs --version |grep client || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo stdout:; cat $at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:16: \$server --version |grep server || exit 77"
echo basic.at:16 >$at_check_line_file
( $at_traceon; $server --version |grep server || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo stdout:; cat $at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

CVS_SERVER=$server; export CVS_SERVER
method=:fork:
CVSROOT=$method$CVSROOT_DIR
export CVSROOT
SPROG=`basename $server`

#
# Clear a possibly damaging inherited environment.
#

# Avoid picking up any stray .cvsrc, etc., from the user running the tests
mkdir home
HOME=$at_group_dir/home; export HOME

# Make sure this variable is not defined to anything that would
# change the format of RCS dates.  Otherwise people using e.g.,
# RCSINIT=-zLT get lots of spurious failures.
RCSINIT=

#
# Initialize the repository
#
$at_traceoff
echo "basic.at:16: cvs init"
echo basic.at:16 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Create the default project
#
mkdir top
cd top
$at_traceoff
echo "basic.at:16: cvs -Q co -l ."
echo basic.at:16 >$at_check_line_file
( $at_traceon; cvs -Q co -l . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

mkdir project
$at_traceoff
echo "basic.at:16: cvs -Q add project"
echo basic.at:16 >$at_check_line_file
( $at_traceon; cvs -Q add project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ..
rm -r top

#
# Check out the default project and cd into the workspace.
#
# I'm checking for error returns form the cd and printing error messages since,
# for instance, if the CVS executable picks up a ~/.cvsrc which causes empty
# directories to be pruned by checkout, the project directory will not be
# created but the `cvs co' will not return an error.
#
$at_traceoff
echo "basic.at:16: cvs -Q co project"
echo basic.at:16 >$at_check_line_file
( $at_traceon; cvs -Q co project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd project ||
  { { echo "$as_me:$LINENO: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&5
echo "$as_me: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&2;}
   { (exit 1); exit 1; }; }

###
### End AT_CVS_SETUP([Operations on empty projects])
###

# Test a few operations, to ensure they gracefully do
# nothing in an empty directory.
$at_traceoff
echo "basic.at:20: cvs -q update"
echo basic.at:20 >$at_check_line_file
( $at_traceon; cvs -q update ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:20: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:21: cvs -q diff -c"
echo basic.at:21 >$at_check_line_file
( $at_traceon; cvs -q diff -c ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:21: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:22: cvs -q status"
echo basic.at:22 >$at_check_line_file
( $at_traceon; cvs -q status ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:22: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:23: cvs -q update ."
echo basic.at:23 >$at_check_line_file
( $at_traceon; cvs -q update . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:23: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:24: cvs -q update ./"
echo basic.at:24 >$at_check_line_file
( $at_traceon; cvs -q update ./ ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:24: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


      $at_traceoff
      $at_times_p && times >$at_times_file
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat $at_status_file`
    ;;

  22 ) # 22. basic.at:30: Adding directories and files-r
    at_setup_line='basic.at:30'
    at_desc='Adding directories and files-r'
    $at_quiet $ECHO_N " 22: Adding directories and files-r               $ECHO_C"
    at_xfail=no
    (
      echo "22. basic.at:30: testing ..."
      $at_traceon
###
### Begin AT_CVS_SETUP([Adding directories and files])
###


#
# Set CVSROOT_DIR, method, & CVSROOT
#
CVSROOT_DIR=$at_group_dir/cvsroot
$at_traceoff
echo "basic.at:30: cvs --version |grep client || exit 77"
echo basic.at:30 >$at_check_line_file
( $at_traceon; cvs --version |grep client || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo stdout:; cat $at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:30: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:30: \$server --version |grep server || exit 77"
echo basic.at:30 >$at_check_line_file
( $at_traceon; $server --version |grep server || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo stdout:; cat $at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:30: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

CVS_SERVER=$server; export CVS_SERVER
method=:fork:
CVSROOT=$method$CVSROOT_DIR
export CVSROOT
SPROG=`basename $server`

#
# Clear a possibly damaging inherited environment.
#

# Avoid picking up any stray .cvsrc, etc., from the user running the tests
mkdir home
HOME=$at_group_dir/home; export HOME

# Make sure this variable is not defined to anything that would
# change the format of RCS dates.  Otherwise people using e.g.,
# RCSINIT=-zLT get lots of spurious failures.
RCSINIT=

#
# Initialize the repository
#
$at_traceoff
echo "basic.at:30: cvs init"
echo basic.at:30 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:30: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Create the default project
#
mkdir top
cd top
$at_traceoff
echo "basic.at:30: cvs -Q co -l ."
echo basic.at:30 >$at_check_line_file
( $at_traceon; cvs -Q co -l . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:30: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

mkdir project
$at_traceoff
echo "basic.at:30: cvs -Q add project"
echo basic.at:30 >$at_check_line_file
( $at_traceon; cvs -Q add project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:30: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ..
rm -r top

#
# Check out the default project and cd into the workspace.
#
# I'm checking for error returns form the cd and printing error messages since,
# for instance, if the CVS executable picks up a ~/.cvsrc which causes empty
# directories to be pruned by checkout, the project directory will not be
# created but the `cvs co' will not return an error.
#
$at_traceoff
echo "basic.at:30: cvs -Q co project"
echo basic.at:30 >$at_check_line_file
( $at_traceon; cvs -Q co project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:30: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd project ||
  { { echo "$as_me:$LINENO: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&5
echo "$as_me: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&2;}
   { (exit 1); exit 1; }; }

###
### End AT_CVS_SETUP([Adding directories and files])
###

mkdir sdir

# FIXCVS
# Remote CVS gives the "cannot open CVS/Entries" error, which is
# clearly a bug, but not a simple one to fix.
$at_traceoff
echo "basic.at:39: cvs -n add sdir"
echo basic.at:39 >$at_check_line_file
( $at_traceon; cvs -n add sdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:39: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:40: test -d \$CVSROOT_DIR/project/sdir"
echo basic.at:40 >$at_check_line_file
( $at_traceon; test -d $CVSROOT_DIR/project/sdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:40: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:44: cvs add sdir"
echo basic.at:44 >$at_check_line_file
( $at_traceon; cvs add sdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:44: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


cd sdir
mkdir ssdir
$at_traceoff
echo "basic.at:50: cvs add ssdir"
echo basic.at:50 >$at_check_line_file
( $at_traceon; cvs add ssdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir/ssdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:50: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


cd ssdir
echo ssfile >ssfile

# Trying to commit it without a "cvs add" should be an error.
# The "use `cvs add' to create an entry" message is the one
# that I consider to be more correct, but local cvs prints the
# "nothing known" message and noone has gotten around to fixing it.
$at_traceoff
echo "basic.at:66: cvs -q ci ssfile"
echo basic.at:66 >$at_check_line_file
( $at_traceon; cvs -q ci ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$CPROG commit: use \`$CPROG add' to create an entry for ssfile
$CPROG [commit aborted]: correct above errors first!
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:66: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:71: cvs add ssfile"
echo basic.at:71 >$at_check_line_file
( $at_traceon; cvs add ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:71: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:71: (cat nstdout; cat nstderr >&2)"
echo basic.at:71 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: scheduling file \`ssfile' for addition
$SPROG command: use \`$SPROG commit' to add this file permanently
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:71: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

$at_traceoff
echo "basic.at:76: cvs tag tag0 ssfile"
echo basic.at:76 >$at_check_line_file
( $at_traceon; cvs tag tag0 ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:76: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:76: (cat nstdout; cat nstderr >&2)"
echo basic.at:76 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: nothing known about ssfile
$SPROG [command aborted]: correct the above errors first!
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:76: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

cd ../..
$at_traceoff
echo "basic.at:86: cvs -q ci -m add-it"
echo basic.at:86 >$at_check_line_file
( $at_traceon; cvs -q ci -m add-it ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
done
Checking in sdir/ssdir/ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
initial revision: 1.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:86: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


      $at_traceoff
      $at_times_p && times >$at_times_file
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat $at_status_file`
    ;;

  23 ) # 23. basic.at:130: tag, update, & diff-r
    at_setup_line='basic.at:130'
    at_desc='tag, update, & diff-r'
    $at_quiet $ECHO_N " 23: tag, update, & diff-r                        $ECHO_C"
    at_xfail=no
    (
      echo "23. basic.at:130: testing ..."
      $at_traceon
###
### Begin AT_CVS_SETUP([tag, update, & diff])
###


#
# Set CVSROOT_DIR, method, & CVSROOT
#
CVSROOT_DIR=$at_group_dir/cvsroot
$at_traceoff
echo "basic.at:130: cvs --version |grep client || exit 77"
echo basic.at:130 >$at_check_line_file
( $at_traceon; cvs --version |grep client || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo stdout:; cat $at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:130: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:130: \$server --version |grep server || exit 77"
echo basic.at:130 >$at_check_line_file
( $at_traceon; $server --version |grep server || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo stdout:; cat $at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:130: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

CVS_SERVER=$server; export CVS_SERVER
method=:fork:
CVSROOT=$method$CVSROOT_DIR
export CVSROOT
SPROG=`basename $server`

#
# Clear a possibly damaging inherited environment.
#

# Avoid picking up any stray .cvsrc, etc., from the user running the tests
mkdir home
HOME=$at_group_dir/home; export HOME

# Make sure this variable is not defined to anything that would
# change the format of RCS dates.  Otherwise people using e.g.,
# RCSINIT=-zLT get lots of spurious failures.
RCSINIT=

#
# Initialize the repository
#
$at_traceoff
echo "basic.at:130: cvs init"
echo basic.at:130 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:130: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Create the default project
#
mkdir top
cd top
$at_traceoff
echo "basic.at:130: cvs -Q co -l ."
echo basic.at:130 >$at_check_line_file
( $at_traceon; cvs -Q co -l . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:130: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

mkdir project
$at_traceoff
echo "basic.at:130: cvs -Q add project"
echo basic.at:130 >$at_check_line_file
( $at_traceon; cvs -Q add project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:130: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ..
rm -r top

#
# Check out the default project and cd into the workspace.
#
# I'm checking for error returns form the cd and printing error messages since,
# for instance, if the CVS executable picks up a ~/.cvsrc which causes empty
# directories to be pruned by checkout, the project directory will not be
# created but the `cvs co' will not return an error.
#
$at_traceoff
echo "basic.at:130: cvs -Q co project"
echo basic.at:130 >$at_check_line_file
( $at_traceon; cvs -Q co project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:130: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd project ||
  { { echo "$as_me:$LINENO: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&5
echo "$as_me: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&2;}
   { (exit 1); exit 1; }; }

###
### End AT_CVS_SETUP([tag, update, & diff])
###

mkdir sdir
$at_traceoff
echo "basic.at:132: cvs add sdir"
echo basic.at:132 >$at_check_line_file
( $at_traceon; cvs add sdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:132: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd sdir
mkdir ssdir
$at_traceoff
echo "basic.at:132: cvs add ssdir"
echo basic.at:132 >$at_check_line_file
( $at_traceon; cvs add ssdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir/ssdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:132: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ssdir
echo ssfile >ssfile
$at_traceoff
echo "basic.at:132: cvs add ssfile"
echo basic.at:132 >$at_check_line_file
( $at_traceon; cvs add ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:132: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:132: (cat nstdout; cat nstderr >&2)"
echo basic.at:132 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: scheduling file \`ssfile' for addition
$SPROG command: use \`$SPROG commit' to add this file permanently
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:132: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout
$at_traceoff
echo "basic.at:132: cvs -q ci -m add-it"
echo basic.at:132 >$at_check_line_file
( $at_traceon; cvs -q ci -m add-it ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
done
Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
initial revision: 1.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:132: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ../..


$at_traceoff
echo "basic.at:137: cvs -q tag BASE sdir/ssdir/ssfile"
echo basic.at:137 >$at_check_line_file
( $at_traceon; cvs -q tag BASE sdir/ssdir/ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:137: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:137: (cat nstdout; cat nstderr >&2)"
echo basic.at:137 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: Attempt to add reserved tag name BASE
$SPROG [command aborted]: failed to set tag BASE to revision 1.1 in $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:137: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

$at_traceoff
echo "basic.at:140: cvs -q tag NOT_RESERVED"
echo basic.at:140 >$at_check_line_file
( $at_traceon; cvs -q tag NOT_RESERVED ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "T sdir/ssdir/ssfile
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:140: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:142: cvs -q update"
echo basic.at:142 >$at_check_line_file
( $at_traceon; cvs -q update ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:142: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


echo "ssfile line 2" >>sdir/ssdir/ssfile
$at_traceoff
echo "basic.at:158: cvs -q diff -c"
echo basic.at:158 >$at_check_line_file
( $at_traceon; cvs -q diff -c ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:158: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:158: (cat nstdout; cat nstderr >&2)"
echo basic.at:158 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Index: sdir/ssdir/ssfile
===================================================================
RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
retrieving revision 1.1
diff -c -r1.1 ssfile
*** sdir/ssdir/ssfile	RFCDATE	1.1
--- sdir/ssdir/ssfile	RFCDATE
***************
*** 1 ****
--- 1,2 ----
  ssfile
+ ssfile line 2
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:158: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

$at_traceoff
echo "basic.at:173: cvs -q diff -c -rBASE"
echo basic.at:173 >$at_check_line_file
( $at_traceon; cvs -q diff -c -rBASE ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:173: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:173: (cat nstdout; cat nstderr >&2)"
echo basic.at:173 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Index: sdir/ssdir/ssfile
===================================================================
RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
retrieving revision 1.1
diff -c -r1.1 ssfile
*** sdir/ssdir/ssfile	RFCDATE	1.1
--- sdir/ssdir/ssfile	RFCDATE
***************
*** 1 ****
--- 1,2 ----
  ssfile
+ ssfile line 2
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:173: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

$at_traceoff
echo "basic.at:183: cvs -q diff -c -rBASE -C3isacrowd"
echo basic.at:183 >$at_check_line_file
( $at_traceon; cvs -q diff -c -rBASE -C3isacrowd ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:183: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:183: (cat nstdout; cat nstderr >&2)"
echo basic.at:183 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: invalid context length argument
" | $at_diff - $at_stderr || at_failed=:
echo >>$at_stdout; echo "Index: sdir/ssdir/ssfile
===================================================================
RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
retrieving revision 1.1
diff -c -C3isacrowd -r1.1 ssfile
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:183: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

      $at_traceoff
      $at_times_p && times >$at_times_file
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat $at_status_file`
    ;;

  24 ) # 24. basic.at:189: commit -r, diff -r, strange resurrections-r
    at_setup_line='basic.at:189'
    at_desc='commit -r, diff -r, strange resurrections-r'
    $at_quiet $ECHO_N " 24: commit -r, diff -r, strange resurrections-r  $ECHO_C"
    at_xfail=no
    (
      echo "24. basic.at:189: testing ..."
      $at_traceon
###
### Begin AT_CVS_SETUP([commit -r, diff -r, strange resurrections])
###


#
# Set CVSROOT_DIR, method, & CVSROOT
#
CVSROOT_DIR=$at_group_dir/cvsroot
$at_traceoff
echo "basic.at:189: cvs --version |grep client || exit 77"
echo basic.at:189 >$at_check_line_file
( $at_traceon; cvs --version |grep client || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo stdout:; cat $at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:189: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:189: \$server --version |grep server || exit 77"
echo basic.at:189 >$at_check_line_file
( $at_traceon; $server --version |grep server || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo stdout:; cat $at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:189: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

CVS_SERVER=$server; export CVS_SERVER
method=:fork:
CVSROOT=$method$CVSROOT_DIR
export CVSROOT
SPROG=`basename $server`

#
# Clear a possibly damaging inherited environment.
#

# Avoid picking up any stray .cvsrc, etc., from the user running the tests
mkdir home
HOME=$at_group_dir/home; export HOME

# Make sure this variable is not defined to anything that would
# change the format of RCS dates.  Otherwise people using e.g.,
# RCSINIT=-zLT get lots of spurious failures.
RCSINIT=

#
# Initialize the repository
#
$at_traceoff
echo "basic.at:189: cvs init"
echo basic.at:189 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:189: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Create the default project
#
mkdir top
cd top
$at_traceoff
echo "basic.at:189: cvs -Q co -l ."
echo basic.at:189 >$at_check_line_file
( $at_traceon; cvs -Q co -l . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:189: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

mkdir project
$at_traceoff
echo "basic.at:189: cvs -Q add project"
echo basic.at:189 >$at_check_line_file
( $at_traceon; cvs -Q add project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:189: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ..
rm -r top

#
# Check out the default project and cd into the workspace.
#
# I'm checking for error returns form the cd and printing error messages since,
# for instance, if the CVS executable picks up a ~/.cvsrc which causes empty
# directories to be pruned by checkout, the project directory will not be
# created but the `cvs co' will not return an error.
#
$at_traceoff
echo "basic.at:189: cvs -Q co project"
echo basic.at:189 >$at_check_line_file
( $at_traceon; cvs -Q co project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:189: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd project ||
  { { echo "$as_me:$LINENO: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&5
echo "$as_me: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&2;}
   { (exit 1); exit 1; }; }

###
### End AT_CVS_SETUP([commit -r, diff -r, strange resurrections])
###

mkdir sdir
$at_traceoff
echo "basic.at:191: cvs add sdir"
echo basic.at:191 >$at_check_line_file
( $at_traceon; cvs add sdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:191: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd sdir
mkdir ssdir
$at_traceoff
echo "basic.at:191: cvs add ssdir"
echo basic.at:191 >$at_check_line_file
( $at_traceon; cvs add ssdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir/ssdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:191: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ssdir
echo ssfile >ssfile
$at_traceoff
echo "basic.at:191: cvs add ssfile"
echo basic.at:191 >$at_check_line_file
( $at_traceon; cvs add ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:191: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:191: (cat nstdout; cat nstderr >&2)"
echo basic.at:191 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: scheduling file \`ssfile' for addition
$SPROG command: use \`$SPROG commit' to add this file permanently
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:191: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout
$at_traceoff
echo "basic.at:191: cvs -q ci -m add-it"
echo basic.at:191 >$at_check_line_file
( $at_traceon; cvs -q ci -m add-it ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
done
Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
initial revision: 1.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:191: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ../..

echo "ssfile line 2" >>sdir/ssdir/ssfile

$at_traceoff
echo "basic.at:199: cvs -q ci -m modify-it"
echo basic.at:199 >$at_check_line_file
( $at_traceon; cvs -q ci -m modify-it ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Checking in sdir/ssdir/ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 1.2; previous revision: 1.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:199: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:204: cvs -q ci nonexist"
echo basic.at:204 >$at_check_line_file
( $at_traceon; cvs -q ci nonexist ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$CPROG commit: nothing known about \`nonexist'
$CPROG [commit aborted]: correct above errors first!
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:204: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:206: cvs -q update ."
echo basic.at:206 >$at_check_line_file
( $at_traceon; cvs -q update . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:206: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


# Test the -f option to ci
cd sdir/ssdir
$at_traceoff
echo "basic.at:210: cvs -q ci -m not-modified ssfile"
echo basic.at:210 >$at_check_line_file
( $at_traceon; cvs -q ci -m not-modified ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:210: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:217: cvs -q ci -f -m force-it"
echo basic.at:217 >$at_check_line_file
( $at_traceon; cvs -q ci -f -m force-it ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 1.3; previous revision: 1.2
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:217: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:224: cvs -q ci -m bump-it -r 2.0"
echo basic.at:224 >$at_check_line_file
( $at_traceon; cvs -q ci -m bump-it -r 2.0 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 2.0; previous revision: 1.3
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:224: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


# -f should not be necessary, but it should be harmless.
# Also test the "-r 3" (rather than "-r 3.0") usage.
$at_traceoff
echo "basic.at:233: cvs -q ci -m bump-it -f -r 3"
echo basic.at:233 >$at_check_line_file
( $at_traceon; cvs -q ci -m bump-it -f -r 3 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 3.1; previous revision: 2.0
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:233: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


# Test using -r to create a branch
$at_traceoff
echo "basic.at:242: cvs -q ci -m bogus -r 3.0.0"
echo basic.at:242 >$at_check_line_file
( $at_traceon; cvs -q ci -m bogus -r 3.0.0 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:242: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:242: (cat nstdout; cat nstderr >&2)"
echo basic.at:242 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v: can't find branch point 3.0
$SPROG command: could not check in ssfile
" | $at_diff - $at_stderr || at_failed=:
echo >>$at_stdout; echo "Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:242: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

$at_traceoff
echo "basic.at:249: cvs -q ci -m valid -r 3.1.2"
echo basic.at:249 >$at_check_line_file
( $at_traceon; cvs -q ci -m valid -r 3.1.2 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 3.1.2.1; previous revision: 3.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:249: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


# now get rid of the sticky tag and go back to the trunk
$at_traceoff
echo "basic.at:254: cvs -q up -A ./"
echo basic.at:254 >$at_check_line_file
( $at_traceon; cvs -q up -A ./ ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:254: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:254: (cat nstdout; cat nstderr >&2)"
echo basic.at:254 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "U ssfile
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:254: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

$at_traceoff
echo "basic.at:256: cvs -q diff -r1.2 -r1.3"
echo basic.at:256 >$at_check_line_file
( $at_traceon; cvs -q diff -r1.2 -r1.3 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:256: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:258: cvs -q diff -r1.2 -r1.3 -C 3isacrowd"
echo basic.at:258 >$at_check_line_file
( $at_traceon; cvs -q diff -r1.2 -r1.3 -C 3isacrowd ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:258: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


# If memory serves, some systems (AIX?) have a different message than
# "No such file or directory".  When rediscovered, they will need to be
# accomodated below.
$at_traceoff
echo "basic.at:265: cvs -q -d \$at_group_dir/nonexist update"
echo basic.at:265 >$at_check_line_file
( $at_traceon; cvs -q -d $at_group_dir/nonexist update ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:265: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:265: (cat nstdout; cat nstderr >&2)"
echo basic.at:265 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$CPROG [command aborted]: $at_group_dir/nonexist/CVSROOT: No such file or directory
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:265: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

# Test resurrecting with strange revision numbers
$at_traceoff
echo "basic.at:271: cvs rm -f ssfile"
echo basic.at:271 >$at_check_line_file
( $at_traceon; cvs rm -f ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:271: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:271: (cat nstdout; cat nstderr >&2)"
echo basic.at:271 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: scheduling \`ssfile' for removal
$SPROG command: use \`${SPROG} commit' to remove this file permanently
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:271: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

$at_traceoff
echo "basic.at:278: cvs -q ci -m remove"
echo basic.at:278 >$at_check_line_file
( $at_traceon; cvs -q ci -m remove ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Removing ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: delete; previous revision: 3.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:278: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:280: cvs -q up -p -r 3.1 ./ssfile >ssfile"
echo basic.at:280 >$at_check_line_file
( $at_traceon; cvs -q up -p -r 3.1 ./ssfile >ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:280: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:284: cvs add ssfile"
echo basic.at:284 >$at_check_line_file
( $at_traceon; cvs add ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:284: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:284: (cat nstdout; cat nstderr >&2)"
echo basic.at:284 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: re-adding file \`ssfile' (in place of dead revision 3.2)
$SPROG command: use \`$SPROG commit' to add this file permanently
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:284: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

$at_traceoff
echo "basic.at:291: cvs -q ci -m resurrect"
echo basic.at:291 >$at_check_line_file
( $at_traceon; cvs -q ci -m resurrect ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 3.3; previous revision: 3.2
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:291: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


      $at_traceoff
      $at_times_p && times >$at_times_file
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat $at_status_file`
    ;;

  25 ) # 25. basic.at:297: annotate-r
    at_setup_line='basic.at:297'
    at_desc='annotate-r'
    $at_quiet $ECHO_N " 25: annotate-r                                   $ECHO_C"
    at_xfail=no
    (
      echo "25. basic.at:297: testing ..."
      $at_traceon
###
### Begin AT_CVS_SETUP([annotate])
###


#
# Set CVSROOT_DIR, method, & CVSROOT
#
CVSROOT_DIR=$at_group_dir/cvsroot
$at_traceoff
echo "basic.at:297: cvs --version |grep client || exit 77"
echo basic.at:297 >$at_check_line_file
( $at_traceon; cvs --version |grep client || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo stdout:; cat $at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:297: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:297: \$server --version |grep server || exit 77"
echo basic.at:297 >$at_check_line_file
( $at_traceon; $server --version |grep server || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo stdout:; cat $at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:297: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

CVS_SERVER=$server; export CVS_SERVER
method=:fork:
CVSROOT=$method$CVSROOT_DIR
export CVSROOT
SPROG=`basename $server`

#
# Clear a possibly damaging inherited environment.
#

# Avoid picking up any stray .cvsrc, etc., from the user running the tests
mkdir home
HOME=$at_group_dir/home; export HOME

# Make sure this variable is not defined to anything that would
# change the format of RCS dates.  Otherwise people using e.g.,
# RCSINIT=-zLT get lots of spurious failures.
RCSINIT=

#
# Initialize the repository
#
$at_traceoff
echo "basic.at:297: cvs init"
echo basic.at:297 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:297: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Create the default project
#
mkdir top
cd top
$at_traceoff
echo "basic.at:297: cvs -Q co -l ."
echo basic.at:297 >$at_check_line_file
( $at_traceon; cvs -Q co -l . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:297: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

mkdir project
$at_traceoff
echo "basic.at:297: cvs -Q add project"
echo basic.at:297 >$at_check_line_file
( $at_traceon; cvs -Q add project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:297: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ..
rm -r top

#
# Check out the default project and cd into the workspace.
#
# I'm checking for error returns form the cd and printing error messages since,
# for instance, if the CVS executable picks up a ~/.cvsrc which causes empty
# directories to be pruned by checkout, the project directory will not be
# created but the `cvs co' will not return an error.
#
$at_traceoff
echo "basic.at:297: cvs -Q co project"
echo basic.at:297 >$at_check_line_file
( $at_traceon; cvs -Q co project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:297: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd project ||
  { { echo "$as_me:$LINENO: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&5
echo "$as_me: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&2;}
   { (exit 1); exit 1; }; }

###
### End AT_CVS_SETUP([annotate])
###

mkdir sdir
$at_traceoff
echo "basic.at:299: cvs add sdir"
echo basic.at:299 >$at_check_line_file
( $at_traceon; cvs add sdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:299: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd sdir
mkdir ssdir
$at_traceoff
echo "basic.at:299: cvs add ssdir"
echo basic.at:299 >$at_check_line_file
( $at_traceon; cvs add ssdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir/ssdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:299: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ssdir
echo ssfile >ssfile
$at_traceoff
echo "basic.at:299: cvs add ssfile"
echo basic.at:299 >$at_check_line_file
( $at_traceon; cvs add ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:299: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:299: (cat nstdout; cat nstderr >&2)"
echo basic.at:299 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: scheduling file \`ssfile' for addition
$SPROG command: use \`$SPROG commit' to add this file permanently
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:299: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout
$at_traceoff
echo "basic.at:299: cvs -q ci -m add-it"
echo basic.at:299 >$at_check_line_file
( $at_traceon; cvs -q ci -m add-it ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
done
Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
initial revision: 1.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:299: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ../..

echo "ssfile line 2" >>sdir/ssdir/ssfile
$at_traceoff
echo "basic.at:306: cvs -q ci -m modify-it"
echo basic.at:306 >$at_check_line_file
( $at_traceon; cvs -q ci -m modify-it ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Checking in sdir/ssdir/ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 1.2; previous revision: 1.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:306: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


# Skip this group if we don't know our username
$at_traceoff
echo "basic.at:315: \$as_cvs_have_username || exit 77"
echo basic.at:315 >$at_check_line_file
( $at_traceon; $as_cvs_have_username || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:315: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


# Set $nsrname to $username normalized to account for the fact that most CVS
# output is optimized to print $username in 8 characters.
if echo $username |awk -F '' '{if () exit 1}'; then
  nsrname=$username
else
  nsrname=`echo "$username       " |sed 's/^\(........\).*$/\1/'`
fi


# Now for the actual test
$at_traceoff
echo "basic.at:315: cvs annotate"
echo basic.at:315 >$at_check_line_file
( $at_traceon; cvs annotate ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:315: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


# Normalize the output of the previous command
sed -e "s/($nsrname [0-9][0-9]-[A-Z][a-z][a-z]-[0-9][0-9])/(USERNAME DATE)/" \
    <stdout >nstdout
sed -e "s/($nsrname [0-9][0-9]-[A-Z][a-z][a-z]-[0-9][0-9])/(USERNAME DATE)/" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:315: (cat nstdout; cat nstderr >&2)"
echo basic.at:315 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "
Annotations for sdir/ssdir/ssfile
***************
" | $at_diff - $at_stderr || at_failed=:
echo >>$at_stdout; echo "1.1          (USERNAME DATE): ssfile
1.2          (USERNAME DATE): ssfile line 2
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:315: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

      $at_traceoff
      $at_times_p && times >$at_times_file
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat $at_status_file`
    ;;

  26 ) # 26. basic.at:321: Resurrection-r
    at_setup_line='basic.at:321'
    at_desc='Resurrection-r'
    $at_quiet $ECHO_N " 26: Resurrection-r                               $ECHO_C"
    at_xfail=no
    (
      echo "26. basic.at:321: testing ..."
      $at_traceon
###
### Begin AT_CVS_SETUP([Resurrection])
###


#
# Set CVSROOT_DIR, method, & CVSROOT
#
CVSROOT_DIR=$at_group_dir/cvsroot
$at_traceoff
echo "basic.at:321: cvs --version |grep client || exit 77"
echo basic.at:321 >$at_check_line_file
( $at_traceon; cvs --version |grep client || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo stdout:; cat $at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:321: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:321: \$server --version |grep server || exit 77"
echo basic.at:321 >$at_check_line_file
( $at_traceon; $server --version |grep server || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo stdout:; cat $at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:321: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

CVS_SERVER=$server; export CVS_SERVER
method=:fork:
CVSROOT=$method$CVSROOT_DIR
export CVSROOT
SPROG=`basename $server`

#
# Clear a possibly damaging inherited environment.
#

# Avoid picking up any stray .cvsrc, etc., from the user running the tests
mkdir home
HOME=$at_group_dir/home; export HOME

# Make sure this variable is not defined to anything that would
# change the format of RCS dates.  Otherwise people using e.g.,
# RCSINIT=-zLT get lots of spurious failures.
RCSINIT=

#
# Initialize the repository
#
$at_traceoff
echo "basic.at:321: cvs init"
echo basic.at:321 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:321: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Create the default project
#
mkdir top
cd top
$at_traceoff
echo "basic.at:321: cvs -Q co -l ."
echo basic.at:321 >$at_check_line_file
( $at_traceon; cvs -Q co -l . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:321: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

mkdir project
$at_traceoff
echo "basic.at:321: cvs -Q add project"
echo basic.at:321 >$at_check_line_file
( $at_traceon; cvs -Q add project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:321: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ..
rm -r top

#
# Check out the default project and cd into the workspace.
#
# I'm checking for error returns form the cd and printing error messages since,
# for instance, if the CVS executable picks up a ~/.cvsrc which causes empty
# directories to be pruned by checkout, the project directory will not be
# created but the `cvs co' will not return an error.
#
$at_traceoff
echo "basic.at:321: cvs -Q co project"
echo basic.at:321 >$at_check_line_file
( $at_traceon; cvs -Q co project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:321: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd project ||
  { { echo "$as_me:$LINENO: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&5
echo "$as_me: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&2;}
   { (exit 1); exit 1; }; }

###
### End AT_CVS_SETUP([Resurrection])
###

mkdir sdir
$at_traceoff
echo "basic.at:323: cvs add sdir"
echo basic.at:323 >$at_check_line_file
( $at_traceon; cvs add sdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:323: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd sdir
mkdir ssdir
$at_traceoff
echo "basic.at:323: cvs add ssdir"
echo basic.at:323 >$at_check_line_file
( $at_traceon; cvs add ssdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir/ssdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:323: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ssdir
echo ssfile >ssfile
$at_traceoff
echo "basic.at:323: cvs add ssfile"
echo basic.at:323 >$at_check_line_file
( $at_traceon; cvs add ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:323: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:323: (cat nstdout; cat nstderr >&2)"
echo basic.at:323 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: scheduling file \`ssfile' for addition
$SPROG command: use \`$SPROG commit' to add this file permanently
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:323: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout
$at_traceoff
echo "basic.at:323: cvs -q ci -m add-it"
echo basic.at:323 >$at_check_line_file
( $at_traceon; cvs -q ci -m add-it ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
done
Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
initial revision: 1.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:323: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ../..


$at_traceoff
echo "basic.at:325: exit 77"
echo basic.at:325 >$at_check_line_file
( $at_traceon; exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:325: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


	  # As long as we have a file with a few revisions, test
	  # a few "cvs admin -o" invocations.
	  cd sdir/ssdir
	  dotest_fail basica-o1 "${testcvs} admin -o 1.2::1.2" \
"${CPROG} admin: while processing more than one file:
${CPROG} \admin aborted\: attempt to specify a numeric revision"
	  dotest basica-o2 "${testcvs} admin -o 1.2::1.2 ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
done"
	  dotest basica-o2a "${testcvs} admin -o 1.1::NOT_RESERVED ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
done"
	  dotest_fail basica-o2b "${testcvs} admin -o 1.1::NOT_EXIST ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
${SPROG} a-z*: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v: Revision NOT_EXIST doesn't exist.
${SPROG} a-z*: RCS file for .ssfile. not modified\."
	  dotest basica-o3 "${testcvs} admin -o 1.2::1.3 ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
done"
	  dotest basica-o4 "${testcvs} admin -o 3.1:: ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
deleting revision 3\.3
deleting revision 3\.2
done"
	  dotest basica-o5 "${testcvs} admin -o ::1.1 ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
done"
	  dotest basica-o5a "${testcvs} -n admin -o 1.2::3.1 ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
deleting revision 2\.0
deleting revision 1\.3
done"
	  dotest basica-o6 "${testcvs} admin -o 1.2::3.1 ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
deleting revision 2\.0
deleting revision 1\.3
done"
	  dotest basica-o6a "${testcvs} admin -o 3.1.2: ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
deleting revision 3\.1\.2\.1
done"
	  dotest basica-o7 "${testcvs} log -N ssfile" "
RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
Working file: ssfile
head: 3\.1
branch:
locks: strict
access list:
keyword substitution: kv
total revisions: 3;	selected revisions: 3
description:
----------------------------
revision 3\.1
date: 0-9/* 0-9:*;  author: ${username};  state: Exp;  lines: ${PLUS}0 -0
bump-it
----------------------------
revision 1\.2
date: 0-9/* 0-9:*;  author: ${username};  state: Exp;  lines: ${PLUS}1 -0
modify-it
----------------------------
revision 1\.1
date: 0-9/* 0-9:*;  author: ${username};  state: Exp;
add-it
============================================================================="
	  dotest basica-o8 "${testcvs} -q update -p -r 1.1 ./ssfile" "ssfile"
      $at_traceoff
      $at_times_p && times >$at_times_file
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat $at_status_file`
    ;;

  27 ) # 27. basic.at:16: Operations on empty projects-r-l
    at_setup_line='basic.at:16'
    at_desc='Operations on empty projects-r-l'
    $at_quiet $ECHO_N " 27: Operations on empty projects-r-l             $ECHO_C"
    at_xfail=no
    (
      echo "27. basic.at:16: testing ..."
      $at_traceon
###
### Begin AT_CVS_SETUP([Operations on empty projects])
###

#
# Create a symlinked CVSROOT_DIR
#
mkdir $at_group_dir/realcvsroot ||
  { { echo "$as_me:$LINENO: error: Cannot create directory \`$at_group_dir/realcvsroot'" >&5
echo "$as_me: error: Cannot create directory \`$at_group_dir/realcvsroot'" >&2;}
   { (exit 1); exit 1; }; }
$at_traceoff
echo "basic.at:16: ln -s realcvsroot \$at_group_dir/cvsroot || exit 77"
echo basic.at:16 >$at_check_line_file
( $at_traceon; ln -s realcvsroot $at_group_dir/cvsroot || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Set CVSROOT_DIR, method, & CVSROOT
#
CVSROOT_DIR=$at_group_dir/cvsroot
$at_traceoff
echo "basic.at:16: cvs --version |grep client || exit 77"
echo basic.at:16 >$at_check_line_file
( $at_traceon; cvs --version |grep client || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo stdout:; cat $at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:16: \$server --version |grep server || exit 77"
echo basic.at:16 >$at_check_line_file
( $at_traceon; $server --version |grep server || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo stdout:; cat $at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

CVS_SERVER=$server; export CVS_SERVER
method=:fork:
CVSROOT=$method$CVSROOT_DIR
export CVSROOT
SPROG=`basename $server`

#
# Clear a possibly damaging inherited environment.
#

# Avoid picking up any stray .cvsrc, etc., from the user running the tests
mkdir home
HOME=$at_group_dir/home; export HOME

# Make sure this variable is not defined to anything that would
# change the format of RCS dates.  Otherwise people using e.g.,
# RCSINIT=-zLT get lots of spurious failures.
RCSINIT=

#
# Initialize the repository
#
$at_traceoff
echo "basic.at:16: cvs init"
echo basic.at:16 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Create the default project
#
mkdir top
cd top
$at_traceoff
echo "basic.at:16: cvs -Q co -l ."
echo basic.at:16 >$at_check_line_file
( $at_traceon; cvs -Q co -l . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

mkdir project
$at_traceoff
echo "basic.at:16: cvs -Q add project"
echo basic.at:16 >$at_check_line_file
( $at_traceon; cvs -Q add project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ..
rm -r top

#
# Check out the default project and cd into the workspace.
#
# I'm checking for error returns form the cd and printing error messages since,
# for instance, if the CVS executable picks up a ~/.cvsrc which causes empty
# directories to be pruned by checkout, the project directory will not be
# created but the `cvs co' will not return an error.
#
$at_traceoff
echo "basic.at:16: cvs -Q co project"
echo basic.at:16 >$at_check_line_file
( $at_traceon; cvs -Q co project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:16: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd project ||
  { { echo "$as_me:$LINENO: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&5
echo "$as_me: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&2;}
   { (exit 1); exit 1; }; }

###
### End AT_CVS_SETUP([Operations on empty projects])
###

# Test a few operations, to ensure they gracefully do
# nothing in an empty directory.
$at_traceoff
echo "basic.at:20: cvs -q update"
echo basic.at:20 >$at_check_line_file
( $at_traceon; cvs -q update ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:20: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:21: cvs -q diff -c"
echo basic.at:21 >$at_check_line_file
( $at_traceon; cvs -q diff -c ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:21: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:22: cvs -q status"
echo basic.at:22 >$at_check_line_file
( $at_traceon; cvs -q status ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:22: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:23: cvs -q update ."
echo basic.at:23 >$at_check_line_file
( $at_traceon; cvs -q update . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:23: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:24: cvs -q update ./"
echo basic.at:24 >$at_check_line_file
( $at_traceon; cvs -q update ./ ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:24: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


      $at_traceoff
      $at_times_p && times >$at_times_file
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat $at_status_file`
    ;;

  28 ) # 28. basic.at:30: Adding directories and files-r-l
    at_setup_line='basic.at:30'
    at_desc='Adding directories and files-r-l'
    $at_quiet $ECHO_N " 28: Adding directories and files-r-l             $ECHO_C"
    at_xfail=no
    (
      echo "28. basic.at:30: testing ..."
      $at_traceon
###
### Begin AT_CVS_SETUP([Adding directories and files])
###

#
# Create a symlinked CVSROOT_DIR
#
mkdir $at_group_dir/realcvsroot ||
  { { echo "$as_me:$LINENO: error: Cannot create directory \`$at_group_dir/realcvsroot'" >&5
echo "$as_me: error: Cannot create directory \`$at_group_dir/realcvsroot'" >&2;}
   { (exit 1); exit 1; }; }
$at_traceoff
echo "basic.at:30: ln -s realcvsroot \$at_group_dir/cvsroot || exit 77"
echo basic.at:30 >$at_check_line_file
( $at_traceon; ln -s realcvsroot $at_group_dir/cvsroot || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:30: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Set CVSROOT_DIR, method, & CVSROOT
#
CVSROOT_DIR=$at_group_dir/cvsroot
$at_traceoff
echo "basic.at:30: cvs --version |grep client || exit 77"
echo basic.at:30 >$at_check_line_file
( $at_traceon; cvs --version |grep client || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo stdout:; cat $at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:30: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:30: \$server --version |grep server || exit 77"
echo basic.at:30 >$at_check_line_file
( $at_traceon; $server --version |grep server || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo stdout:; cat $at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:30: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

CVS_SERVER=$server; export CVS_SERVER
method=:fork:
CVSROOT=$method$CVSROOT_DIR
export CVSROOT
SPROG=`basename $server`

#
# Clear a possibly damaging inherited environment.
#

# Avoid picking up any stray .cvsrc, etc., from the user running the tests
mkdir home
HOME=$at_group_dir/home; export HOME

# Make sure this variable is not defined to anything that would
# change the format of RCS dates.  Otherwise people using e.g.,
# RCSINIT=-zLT get lots of spurious failures.
RCSINIT=

#
# Initialize the repository
#
$at_traceoff
echo "basic.at:30: cvs init"
echo basic.at:30 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:30: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Create the default project
#
mkdir top
cd top
$at_traceoff
echo "basic.at:30: cvs -Q co -l ."
echo basic.at:30 >$at_check_line_file
( $at_traceon; cvs -Q co -l . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:30: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

mkdir project
$at_traceoff
echo "basic.at:30: cvs -Q add project"
echo basic.at:30 >$at_check_line_file
( $at_traceon; cvs -Q add project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:30: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ..
rm -r top

#
# Check out the default project and cd into the workspace.
#
# I'm checking for error returns form the cd and printing error messages since,
# for instance, if the CVS executable picks up a ~/.cvsrc which causes empty
# directories to be pruned by checkout, the project directory will not be
# created but the `cvs co' will not return an error.
#
$at_traceoff
echo "basic.at:30: cvs -Q co project"
echo basic.at:30 >$at_check_line_file
( $at_traceon; cvs -Q co project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:30: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd project ||
  { { echo "$as_me:$LINENO: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&5
echo "$as_me: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&2;}
   { (exit 1); exit 1; }; }

###
### End AT_CVS_SETUP([Adding directories and files])
###

mkdir sdir

# FIXCVS
# Remote CVS gives the "cannot open CVS/Entries" error, which is
# clearly a bug, but not a simple one to fix.
$at_traceoff
echo "basic.at:39: cvs -n add sdir"
echo basic.at:39 >$at_check_line_file
( $at_traceon; cvs -n add sdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:39: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:40: test -d \$CVSROOT_DIR/project/sdir"
echo basic.at:40 >$at_check_line_file
( $at_traceon; test -d $CVSROOT_DIR/project/sdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:40: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:44: cvs add sdir"
echo basic.at:44 >$at_check_line_file
( $at_traceon; cvs add sdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:44: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


cd sdir
mkdir ssdir
$at_traceoff
echo "basic.at:50: cvs add ssdir"
echo basic.at:50 >$at_check_line_file
( $at_traceon; cvs add ssdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir/ssdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:50: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


cd ssdir
echo ssfile >ssfile

# Trying to commit it without a "cvs add" should be an error.
# The "use `cvs add' to create an entry" message is the one
# that I consider to be more correct, but local cvs prints the
# "nothing known" message and noone has gotten around to fixing it.
$at_traceoff
echo "basic.at:66: cvs -q ci ssfile"
echo basic.at:66 >$at_check_line_file
( $at_traceon; cvs -q ci ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$CPROG commit: use \`$CPROG add' to create an entry for ssfile
$CPROG [commit aborted]: correct above errors first!
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:66: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:71: cvs add ssfile"
echo basic.at:71 >$at_check_line_file
( $at_traceon; cvs add ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:71: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:71: (cat nstdout; cat nstderr >&2)"
echo basic.at:71 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: scheduling file \`ssfile' for addition
$SPROG command: use \`$SPROG commit' to add this file permanently
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:71: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

$at_traceoff
echo "basic.at:76: cvs tag tag0 ssfile"
echo basic.at:76 >$at_check_line_file
( $at_traceon; cvs tag tag0 ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:76: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:76: (cat nstdout; cat nstderr >&2)"
echo basic.at:76 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: nothing known about ssfile
$SPROG [command aborted]: correct the above errors first!
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:76: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

cd ../..
$at_traceoff
echo "basic.at:86: cvs -q ci -m add-it"
echo basic.at:86 >$at_check_line_file
( $at_traceon; cvs -q ci -m add-it ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
done
Checking in sdir/ssdir/ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
initial revision: 1.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:86: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


      $at_traceoff
      $at_times_p && times >$at_times_file
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat $at_status_file`
    ;;

  29 ) # 29. basic.at:130: tag, update, & diff-r-l
    at_setup_line='basic.at:130'
    at_desc='tag, update, & diff-r-l'
    $at_quiet $ECHO_N " 29: tag, update, & diff-r-l                      $ECHO_C"
    at_xfail=no
    (
      echo "29. basic.at:130: testing ..."
      $at_traceon
###
### Begin AT_CVS_SETUP([tag, update, & diff])
###

#
# Create a symlinked CVSROOT_DIR
#
mkdir $at_group_dir/realcvsroot ||
  { { echo "$as_me:$LINENO: error: Cannot create directory \`$at_group_dir/realcvsroot'" >&5
echo "$as_me: error: Cannot create directory \`$at_group_dir/realcvsroot'" >&2;}
   { (exit 1); exit 1; }; }
$at_traceoff
echo "basic.at:130: ln -s realcvsroot \$at_group_dir/cvsroot || exit 77"
echo basic.at:130 >$at_check_line_file
( $at_traceon; ln -s realcvsroot $at_group_dir/cvsroot || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:130: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Set CVSROOT_DIR, method, & CVSROOT
#
CVSROOT_DIR=$at_group_dir/cvsroot
$at_traceoff
echo "basic.at:130: cvs --version |grep client || exit 77"
echo basic.at:130 >$at_check_line_file
( $at_traceon; cvs --version |grep client || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo stdout:; cat $at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:130: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:130: \$server --version |grep server || exit 77"
echo basic.at:130 >$at_check_line_file
( $at_traceon; $server --version |grep server || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo stdout:; cat $at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:130: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

CVS_SERVER=$server; export CVS_SERVER
method=:fork:
CVSROOT=$method$CVSROOT_DIR
export CVSROOT
SPROG=`basename $server`

#
# Clear a possibly damaging inherited environment.
#

# Avoid picking up any stray .cvsrc, etc., from the user running the tests
mkdir home
HOME=$at_group_dir/home; export HOME

# Make sure this variable is not defined to anything that would
# change the format of RCS dates.  Otherwise people using e.g.,
# RCSINIT=-zLT get lots of spurious failures.
RCSINIT=

#
# Initialize the repository
#
$at_traceoff
echo "basic.at:130: cvs init"
echo basic.at:130 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:130: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Create the default project
#
mkdir top
cd top
$at_traceoff
echo "basic.at:130: cvs -Q co -l ."
echo basic.at:130 >$at_check_line_file
( $at_traceon; cvs -Q co -l . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:130: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

mkdir project
$at_traceoff
echo "basic.at:130: cvs -Q add project"
echo basic.at:130 >$at_check_line_file
( $at_traceon; cvs -Q add project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:130: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ..
rm -r top

#
# Check out the default project and cd into the workspace.
#
# I'm checking for error returns form the cd and printing error messages since,
# for instance, if the CVS executable picks up a ~/.cvsrc which causes empty
# directories to be pruned by checkout, the project directory will not be
# created but the `cvs co' will not return an error.
#
$at_traceoff
echo "basic.at:130: cvs -Q co project"
echo basic.at:130 >$at_check_line_file
( $at_traceon; cvs -Q co project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:130: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd project ||
  { { echo "$as_me:$LINENO: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&5
echo "$as_me: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&2;}
   { (exit 1); exit 1; }; }

###
### End AT_CVS_SETUP([tag, update, & diff])
###

mkdir sdir
$at_traceoff
echo "basic.at:132: cvs add sdir"
echo basic.at:132 >$at_check_line_file
( $at_traceon; cvs add sdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:132: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd sdir
mkdir ssdir
$at_traceoff
echo "basic.at:132: cvs add ssdir"
echo basic.at:132 >$at_check_line_file
( $at_traceon; cvs add ssdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir/ssdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:132: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ssdir
echo ssfile >ssfile
$at_traceoff
echo "basic.at:132: cvs add ssfile"
echo basic.at:132 >$at_check_line_file
( $at_traceon; cvs add ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:132: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:132: (cat nstdout; cat nstderr >&2)"
echo basic.at:132 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: scheduling file \`ssfile' for addition
$SPROG command: use \`$SPROG commit' to add this file permanently
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:132: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout
$at_traceoff
echo "basic.at:132: cvs -q ci -m add-it"
echo basic.at:132 >$at_check_line_file
( $at_traceon; cvs -q ci -m add-it ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
done
Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
initial revision: 1.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:132: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ../..


$at_traceoff
echo "basic.at:137: cvs -q tag BASE sdir/ssdir/ssfile"
echo basic.at:137 >$at_check_line_file
( $at_traceon; cvs -q tag BASE sdir/ssdir/ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:137: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:137: (cat nstdout; cat nstderr >&2)"
echo basic.at:137 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: Attempt to add reserved tag name BASE
$SPROG [command aborted]: failed to set tag BASE to revision 1.1 in $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:137: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

$at_traceoff
echo "basic.at:140: cvs -q tag NOT_RESERVED"
echo basic.at:140 >$at_check_line_file
( $at_traceon; cvs -q tag NOT_RESERVED ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "T sdir/ssdir/ssfile
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:140: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:142: cvs -q update"
echo basic.at:142 >$at_check_line_file
( $at_traceon; cvs -q update ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:142: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


echo "ssfile line 2" >>sdir/ssdir/ssfile
$at_traceoff
echo "basic.at:158: cvs -q diff -c"
echo basic.at:158 >$at_check_line_file
( $at_traceon; cvs -q diff -c ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:158: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:158: (cat nstdout; cat nstderr >&2)"
echo basic.at:158 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Index: sdir/ssdir/ssfile
===================================================================
RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
retrieving revision 1.1
diff -c -r1.1 ssfile
*** sdir/ssdir/ssfile	RFCDATE	1.1
--- sdir/ssdir/ssfile	RFCDATE
***************
*** 1 ****
--- 1,2 ----
  ssfile
+ ssfile line 2
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:158: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

$at_traceoff
echo "basic.at:173: cvs -q diff -c -rBASE"
echo basic.at:173 >$at_check_line_file
( $at_traceon; cvs -q diff -c -rBASE ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:173: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:173: (cat nstdout; cat nstderr >&2)"
echo basic.at:173 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Index: sdir/ssdir/ssfile
===================================================================
RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
retrieving revision 1.1
diff -c -r1.1 ssfile
*** sdir/ssdir/ssfile	RFCDATE	1.1
--- sdir/ssdir/ssfile	RFCDATE
***************
*** 1 ****
--- 1,2 ----
  ssfile
+ ssfile line 2
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:173: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

$at_traceoff
echo "basic.at:183: cvs -q diff -c -rBASE -C3isacrowd"
echo basic.at:183 >$at_check_line_file
( $at_traceon; cvs -q diff -c -rBASE -C3isacrowd ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:183: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:183: (cat nstdout; cat nstderr >&2)"
echo basic.at:183 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: invalid context length argument
" | $at_diff - $at_stderr || at_failed=:
echo >>$at_stdout; echo "Index: sdir/ssdir/ssfile
===================================================================
RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
retrieving revision 1.1
diff -c -C3isacrowd -r1.1 ssfile
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:183: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

      $at_traceoff
      $at_times_p && times >$at_times_file
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat $at_status_file`
    ;;

  30 ) # 30. basic.at:189: commit -r, diff -r, strange resurrections-r-l
    at_setup_line='basic.at:189'
    at_desc='commit -r, diff -r, strange resurrections-r-l'
    $at_quiet $ECHO_N " 30: commit -r, diff -r, strange resurrections-r-l$ECHO_C"
    at_xfail=no
    (
      echo "30. basic.at:189: testing ..."
      $at_traceon
###
### Begin AT_CVS_SETUP([commit -r, diff -r, strange resurrections])
###

#
# Create a symlinked CVSROOT_DIR
#
mkdir $at_group_dir/realcvsroot ||
  { { echo "$as_me:$LINENO: error: Cannot create directory \`$at_group_dir/realcvsroot'" >&5
echo "$as_me: error: Cannot create directory \`$at_group_dir/realcvsroot'" >&2;}
   { (exit 1); exit 1; }; }
$at_traceoff
echo "basic.at:189: ln -s realcvsroot \$at_group_dir/cvsroot || exit 77"
echo basic.at:189 >$at_check_line_file
( $at_traceon; ln -s realcvsroot $at_group_dir/cvsroot || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:189: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Set CVSROOT_DIR, method, & CVSROOT
#
CVSROOT_DIR=$at_group_dir/cvsroot
$at_traceoff
echo "basic.at:189: cvs --version |grep client || exit 77"
echo basic.at:189 >$at_check_line_file
( $at_traceon; cvs --version |grep client || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo stdout:; cat $at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:189: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:189: \$server --version |grep server || exit 77"
echo basic.at:189 >$at_check_line_file
( $at_traceon; $server --version |grep server || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo stdout:; cat $at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:189: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

CVS_SERVER=$server; export CVS_SERVER
method=:fork:
CVSROOT=$method$CVSROOT_DIR
export CVSROOT
SPROG=`basename $server`

#
# Clear a possibly damaging inherited environment.
#

# Avoid picking up any stray .cvsrc, etc., from the user running the tests
mkdir home
HOME=$at_group_dir/home; export HOME

# Make sure this variable is not defined to anything that would
# change the format of RCS dates.  Otherwise people using e.g.,
# RCSINIT=-zLT get lots of spurious failures.
RCSINIT=

#
# Initialize the repository
#
$at_traceoff
echo "basic.at:189: cvs init"
echo basic.at:189 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:189: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Create the default project
#
mkdir top
cd top
$at_traceoff
echo "basic.at:189: cvs -Q co -l ."
echo basic.at:189 >$at_check_line_file
( $at_traceon; cvs -Q co -l . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:189: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

mkdir project
$at_traceoff
echo "basic.at:189: cvs -Q add project"
echo basic.at:189 >$at_check_line_file
( $at_traceon; cvs -Q add project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:189: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ..
rm -r top

#
# Check out the default project and cd into the workspace.
#
# I'm checking for error returns form the cd and printing error messages since,
# for instance, if the CVS executable picks up a ~/.cvsrc which causes empty
# directories to be pruned by checkout, the project directory will not be
# created but the `cvs co' will not return an error.
#
$at_traceoff
echo "basic.at:189: cvs -Q co project"
echo basic.at:189 >$at_check_line_file
( $at_traceon; cvs -Q co project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:189: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd project ||
  { { echo "$as_me:$LINENO: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&5
echo "$as_me: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&2;}
   { (exit 1); exit 1; }; }

###
### End AT_CVS_SETUP([commit -r, diff -r, strange resurrections])
###

mkdir sdir
$at_traceoff
echo "basic.at:191: cvs add sdir"
echo basic.at:191 >$at_check_line_file
( $at_traceon; cvs add sdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:191: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd sdir
mkdir ssdir
$at_traceoff
echo "basic.at:191: cvs add ssdir"
echo basic.at:191 >$at_check_line_file
( $at_traceon; cvs add ssdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir/ssdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:191: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ssdir
echo ssfile >ssfile
$at_traceoff
echo "basic.at:191: cvs add ssfile"
echo basic.at:191 >$at_check_line_file
( $at_traceon; cvs add ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:191: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:191: (cat nstdout; cat nstderr >&2)"
echo basic.at:191 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: scheduling file \`ssfile' for addition
$SPROG command: use \`$SPROG commit' to add this file permanently
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:191: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout
$at_traceoff
echo "basic.at:191: cvs -q ci -m add-it"
echo basic.at:191 >$at_check_line_file
( $at_traceon; cvs -q ci -m add-it ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
done
Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
initial revision: 1.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:191: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ../..

echo "ssfile line 2" >>sdir/ssdir/ssfile

$at_traceoff
echo "basic.at:199: cvs -q ci -m modify-it"
echo basic.at:199 >$at_check_line_file
( $at_traceon; cvs -q ci -m modify-it ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Checking in sdir/ssdir/ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 1.2; previous revision: 1.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:199: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:204: cvs -q ci nonexist"
echo basic.at:204 >$at_check_line_file
( $at_traceon; cvs -q ci nonexist ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$CPROG commit: nothing known about \`nonexist'
$CPROG [commit aborted]: correct above errors first!
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:204: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:206: cvs -q update ."
echo basic.at:206 >$at_check_line_file
( $at_traceon; cvs -q update . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:206: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


# Test the -f option to ci
cd sdir/ssdir
$at_traceoff
echo "basic.at:210: cvs -q ci -m not-modified ssfile"
echo basic.at:210 >$at_check_line_file
( $at_traceon; cvs -q ci -m not-modified ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:210: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:217: cvs -q ci -f -m force-it"
echo basic.at:217 >$at_check_line_file
( $at_traceon; cvs -q ci -f -m force-it ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 1.3; previous revision: 1.2
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:217: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:224: cvs -q ci -m bump-it -r 2.0"
echo basic.at:224 >$at_check_line_file
( $at_traceon; cvs -q ci -m bump-it -r 2.0 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 2.0; previous revision: 1.3
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:224: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


# -f should not be necessary, but it should be harmless.
# Also test the "-r 3" (rather than "-r 3.0") usage.
$at_traceoff
echo "basic.at:233: cvs -q ci -m bump-it -f -r 3"
echo basic.at:233 >$at_check_line_file
( $at_traceon; cvs -q ci -m bump-it -f -r 3 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 3.1; previous revision: 2.0
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:233: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


# Test using -r to create a branch
$at_traceoff
echo "basic.at:242: cvs -q ci -m bogus -r 3.0.0"
echo basic.at:242 >$at_check_line_file
( $at_traceon; cvs -q ci -m bogus -r 3.0.0 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:242: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:242: (cat nstdout; cat nstderr >&2)"
echo basic.at:242 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v: can't find branch point 3.0
$SPROG command: could not check in ssfile
" | $at_diff - $at_stderr || at_failed=:
echo >>$at_stdout; echo "Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:242: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

$at_traceoff
echo "basic.at:249: cvs -q ci -m valid -r 3.1.2"
echo basic.at:249 >$at_check_line_file
( $at_traceon; cvs -q ci -m valid -r 3.1.2 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 3.1.2.1; previous revision: 3.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:249: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


# now get rid of the sticky tag and go back to the trunk
$at_traceoff
echo "basic.at:254: cvs -q up -A ./"
echo basic.at:254 >$at_check_line_file
( $at_traceon; cvs -q up -A ./ ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:254: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:254: (cat nstdout; cat nstderr >&2)"
echo basic.at:254 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "U ssfile
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:254: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

$at_traceoff
echo "basic.at:256: cvs -q diff -r1.2 -r1.3"
echo basic.at:256 >$at_check_line_file
( $at_traceon; cvs -q diff -r1.2 -r1.3 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:256: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:258: cvs -q diff -r1.2 -r1.3 -C 3isacrowd"
echo basic.at:258 >$at_check_line_file
( $at_traceon; cvs -q diff -r1.2 -r1.3 -C 3isacrowd ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:258: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


# If memory serves, some systems (AIX?) have a different message than
# "No such file or directory".  When rediscovered, they will need to be
# accomodated below.
$at_traceoff
echo "basic.at:265: cvs -q -d \$at_group_dir/nonexist update"
echo basic.at:265 >$at_check_line_file
( $at_traceon; cvs -q -d $at_group_dir/nonexist update ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   1) ;;
   *) echo "basic.at:265: exit code was $at_status, expected 1"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:265: (cat nstdout; cat nstderr >&2)"
echo basic.at:265 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$CPROG [command aborted]: $at_group_dir/nonexist/CVSROOT: No such file or directory
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:265: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

# Test resurrecting with strange revision numbers
$at_traceoff
echo "basic.at:271: cvs rm -f ssfile"
echo basic.at:271 >$at_check_line_file
( $at_traceon; cvs rm -f ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:271: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:271: (cat nstdout; cat nstderr >&2)"
echo basic.at:271 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: scheduling \`ssfile' for removal
$SPROG command: use \`${SPROG} commit' to remove this file permanently
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:271: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

$at_traceoff
echo "basic.at:278: cvs -q ci -m remove"
echo basic.at:278 >$at_check_line_file
( $at_traceon; cvs -q ci -m remove ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Removing ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: delete; previous revision: 3.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:278: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


$at_traceoff
echo "basic.at:280: cvs -q up -p -r 3.1 ./ssfile >ssfile"
echo basic.at:280 >$at_check_line_file
( $at_traceon; cvs -q up -p -r 3.1 ./ssfile >ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:280: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:284: cvs add ssfile"
echo basic.at:284 >$at_check_line_file
( $at_traceon; cvs add ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:284: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:284: (cat nstdout; cat nstderr >&2)"
echo basic.at:284 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: re-adding file \`ssfile' (in place of dead revision 3.2)
$SPROG command: use \`$SPROG commit' to add this file permanently
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:284: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

$at_traceoff
echo "basic.at:291: cvs -q ci -m resurrect"
echo basic.at:291 >$at_check_line_file
( $at_traceon; cvs -q ci -m resurrect ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 3.3; previous revision: 3.2
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:291: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


      $at_traceoff
      $at_times_p && times >$at_times_file
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat $at_status_file`
    ;;

  31 ) # 31. basic.at:297: annotate-r-l
    at_setup_line='basic.at:297'
    at_desc='annotate-r-l'
    $at_quiet $ECHO_N " 31: annotate-r-l                                 $ECHO_C"
    at_xfail=no
    (
      echo "31. basic.at:297: testing ..."
      $at_traceon
###
### Begin AT_CVS_SETUP([annotate])
###

#
# Create a symlinked CVSROOT_DIR
#
mkdir $at_group_dir/realcvsroot ||
  { { echo "$as_me:$LINENO: error: Cannot create directory \`$at_group_dir/realcvsroot'" >&5
echo "$as_me: error: Cannot create directory \`$at_group_dir/realcvsroot'" >&2;}
   { (exit 1); exit 1; }; }
$at_traceoff
echo "basic.at:297: ln -s realcvsroot \$at_group_dir/cvsroot || exit 77"
echo basic.at:297 >$at_check_line_file
( $at_traceon; ln -s realcvsroot $at_group_dir/cvsroot || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:297: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Set CVSROOT_DIR, method, & CVSROOT
#
CVSROOT_DIR=$at_group_dir/cvsroot
$at_traceoff
echo "basic.at:297: cvs --version |grep client || exit 77"
echo basic.at:297 >$at_check_line_file
( $at_traceon; cvs --version |grep client || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo stdout:; cat $at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:297: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:297: \$server --version |grep server || exit 77"
echo basic.at:297 >$at_check_line_file
( $at_traceon; $server --version |grep server || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo stdout:; cat $at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:297: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

CVS_SERVER=$server; export CVS_SERVER
method=:fork:
CVSROOT=$method$CVSROOT_DIR
export CVSROOT
SPROG=`basename $server`

#
# Clear a possibly damaging inherited environment.
#

# Avoid picking up any stray .cvsrc, etc., from the user running the tests
mkdir home
HOME=$at_group_dir/home; export HOME

# Make sure this variable is not defined to anything that would
# change the format of RCS dates.  Otherwise people using e.g.,
# RCSINIT=-zLT get lots of spurious failures.
RCSINIT=

#
# Initialize the repository
#
$at_traceoff
echo "basic.at:297: cvs init"
echo basic.at:297 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:297: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Create the default project
#
mkdir top
cd top
$at_traceoff
echo "basic.at:297: cvs -Q co -l ."
echo basic.at:297 >$at_check_line_file
( $at_traceon; cvs -Q co -l . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:297: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

mkdir project
$at_traceoff
echo "basic.at:297: cvs -Q add project"
echo basic.at:297 >$at_check_line_file
( $at_traceon; cvs -Q add project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:297: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ..
rm -r top

#
# Check out the default project and cd into the workspace.
#
# I'm checking for error returns form the cd and printing error messages since,
# for instance, if the CVS executable picks up a ~/.cvsrc which causes empty
# directories to be pruned by checkout, the project directory will not be
# created but the `cvs co' will not return an error.
#
$at_traceoff
echo "basic.at:297: cvs -Q co project"
echo basic.at:297 >$at_check_line_file
( $at_traceon; cvs -Q co project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:297: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd project ||
  { { echo "$as_me:$LINENO: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&5
echo "$as_me: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&2;}
   { (exit 1); exit 1; }; }

###
### End AT_CVS_SETUP([annotate])
###

mkdir sdir
$at_traceoff
echo "basic.at:299: cvs add sdir"
echo basic.at:299 >$at_check_line_file
( $at_traceon; cvs add sdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:299: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd sdir
mkdir ssdir
$at_traceoff
echo "basic.at:299: cvs add ssdir"
echo basic.at:299 >$at_check_line_file
( $at_traceon; cvs add ssdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir/ssdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:299: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ssdir
echo ssfile >ssfile
$at_traceoff
echo "basic.at:299: cvs add ssfile"
echo basic.at:299 >$at_check_line_file
( $at_traceon; cvs add ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:299: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:299: (cat nstdout; cat nstderr >&2)"
echo basic.at:299 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: scheduling file \`ssfile' for addition
$SPROG command: use \`$SPROG commit' to add this file permanently
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:299: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout
$at_traceoff
echo "basic.at:299: cvs -q ci -m add-it"
echo basic.at:299 >$at_check_line_file
( $at_traceon; cvs -q ci -m add-it ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
done
Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
initial revision: 1.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:299: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ../..

echo "ssfile line 2" >>sdir/ssdir/ssfile
$at_traceoff
echo "basic.at:306: cvs -q ci -m modify-it"
echo basic.at:306 >$at_check_line_file
( $at_traceon; cvs -q ci -m modify-it ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Checking in sdir/ssdir/ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
new revision: 1.2; previous revision: 1.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:306: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


# Skip this group if we don't know our username
$at_traceoff
echo "basic.at:315: \$as_cvs_have_username || exit 77"
echo basic.at:315 >$at_check_line_file
( $at_traceon; $as_cvs_have_username || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:315: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


# Set $nsrname to $username normalized to account for the fact that most CVS
# output is optimized to print $username in 8 characters.
if echo $username |awk -F '' '{if () exit 1}'; then
  nsrname=$username
else
  nsrname=`echo "$username       " |sed 's/^\(........\).*$/\1/'`
fi


# Now for the actual test
$at_traceoff
echo "basic.at:315: cvs annotate"
echo basic.at:315 >$at_check_line_file
( $at_traceon; cvs annotate ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:315: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


# Normalize the output of the previous command
sed -e "s/($nsrname [0-9][0-9]-[A-Z][a-z][a-z]-[0-9][0-9])/(USERNAME DATE)/" \
    <stdout >nstdout
sed -e "s/($nsrname [0-9][0-9]-[A-Z][a-z][a-z]-[0-9][0-9])/(USERNAME DATE)/" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:315: (cat nstdout; cat nstderr >&2)"
echo basic.at:315 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "
Annotations for sdir/ssdir/ssfile
***************
" | $at_diff - $at_stderr || at_failed=:
echo >>$at_stdout; echo "1.1          (USERNAME DATE): ssfile
1.2          (USERNAME DATE): ssfile line 2
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:315: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout

      $at_traceoff
      $at_times_p && times >$at_times_file
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat $at_status_file`
    ;;

  32 ) # 32. basic.at:321: Resurrection-r-l
    at_setup_line='basic.at:321'
    at_desc='Resurrection-r-l'
    $at_quiet $ECHO_N " 32: Resurrection-r-l                             $ECHO_C"
    at_xfail=no
    (
      echo "32. basic.at:321: testing ..."
      $at_traceon
###
### Begin AT_CVS_SETUP([Resurrection])
###

#
# Create a symlinked CVSROOT_DIR
#
mkdir $at_group_dir/realcvsroot ||
  { { echo "$as_me:$LINENO: error: Cannot create directory \`$at_group_dir/realcvsroot'" >&5
echo "$as_me: error: Cannot create directory \`$at_group_dir/realcvsroot'" >&2;}
   { (exit 1); exit 1; }; }
$at_traceoff
echo "basic.at:321: ln -s realcvsroot \$at_group_dir/cvsroot || exit 77"
echo basic.at:321 >$at_check_line_file
( $at_traceon; ln -s realcvsroot $at_group_dir/cvsroot || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:321: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Set CVSROOT_DIR, method, & CVSROOT
#
CVSROOT_DIR=$at_group_dir/cvsroot
$at_traceoff
echo "basic.at:321: cvs --version |grep client || exit 77"
echo basic.at:321 >$at_check_line_file
( $at_traceon; cvs --version |grep client || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo stdout:; cat $at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:321: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

$at_traceoff
echo "basic.at:321: \$server --version |grep server || exit 77"
echo basic.at:321 >$at_check_line_file
( $at_traceon; $server --version |grep server || exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo stdout:; cat $at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:321: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

CVS_SERVER=$server; export CVS_SERVER
method=:fork:
CVSROOT=$method$CVSROOT_DIR
export CVSROOT
SPROG=`basename $server`

#
# Clear a possibly damaging inherited environment.
#

# Avoid picking up any stray .cvsrc, etc., from the user running the tests
mkdir home
HOME=$at_group_dir/home; export HOME

# Make sure this variable is not defined to anything that would
# change the format of RCS dates.  Otherwise people using e.g.,
# RCSINIT=-zLT get lots of spurious failures.
RCSINIT=

#
# Initialize the repository
#
$at_traceoff
echo "basic.at:321: cvs init"
echo basic.at:321 >$at_check_line_file
( $at_traceon; cvs init ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:321: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


#
# Create the default project
#
mkdir top
cd top
$at_traceoff
echo "basic.at:321: cvs -Q co -l ."
echo basic.at:321 >$at_check_line_file
( $at_traceon; cvs -Q co -l . ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:321: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

mkdir project
$at_traceoff
echo "basic.at:321: cvs -Q add project"
echo basic.at:321 >$at_check_line_file
( $at_traceon; cvs -Q add project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:321: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ..
rm -r top

#
# Check out the default project and cd into the workspace.
#
# I'm checking for error returns form the cd and printing error messages since,
# for instance, if the CVS executable picks up a ~/.cvsrc which causes empty
# directories to be pruned by checkout, the project directory will not be
# created but the `cvs co' will not return an error.
#
$at_traceoff
echo "basic.at:321: cvs -Q co project"
echo basic.at:321 >$at_check_line_file
( $at_traceon; cvs -Q co project ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:321: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd project ||
  { { echo "$as_me:$LINENO: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&5
echo "$as_me: error: Couldn't cd to \\`project'.  Did \$HOME get set incorrectly?" >&2;}
   { (exit 1); exit 1; }; }

###
### End AT_CVS_SETUP([Resurrection])
###

mkdir sdir
$at_traceoff
echo "basic.at:323: cvs add sdir"
echo basic.at:323 >$at_check_line_file
( $at_traceon; cvs add sdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:323: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd sdir
mkdir ssdir
$at_traceoff
echo "basic.at:323: cvs add ssdir"
echo basic.at:323 >$at_check_line_file
( $at_traceon; cvs add ssdir ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "Directory $CVSROOT_DIR/project/sdir/ssdir added to the repository
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:323: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ssdir
echo ssfile >ssfile
$at_traceoff
echo "basic.at:323: cvs add ssfile"
echo basic.at:323 >$at_check_line_file
( $at_traceon; cvs add ssfile ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo stderr:; tee stderr <$at_stderr
echo stdout:; tee stdout <$at_stdout
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:323: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stdout >nstdout
sed -e "s/^\($CPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/^\($SPROG \[\?\)[a-z]*\( aborted\]\)\?:/\1command\2:/" \
    -e "s/\<[0-9][0-9]* [a-zA-Z][a-zA-Z]* [0-9][0-9]* [0-9:][0-9:]* -0000\>/RFCDATE/" \
    -e "s/^P /U /" \
    <stderr >nstderr
rm stderr stdout

$at_traceoff
echo "basic.at:323: (cat nstdout; cat nstderr >&2)"
echo basic.at:323 >$at_check_line_file
( $at_traceon; (cat nstdout; cat nstderr >&2) ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
echo >>$at_stderr; echo "$SPROG command: scheduling file \`ssfile' for addition
$SPROG command: use \`$SPROG commit' to add this file permanently
" | $at_diff - $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:323: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

rm nstderr nstdout
$at_traceoff
echo "basic.at:323: cvs -q ci -m add-it"
echo basic.at:323 >$at_check_line_file
( $at_traceon; cvs -q ci -m add-it ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
echo >>$at_stdout; echo "RCS file: $CVSROOT_DIR/project/sdir/ssdir/ssfile,v
done
Checking in ssfile;
$CVSROOT_DIR/project/sdir/ssdir/ssfile,v  <--  ssfile
initial revision: 1.1
done
" | $at_diff - $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:323: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon

cd ../..


$at_traceoff
echo "basic.at:325: exit 77"
echo basic.at:325 >$at_check_line_file
( $at_traceon; exit 77 ) >$at_stdout 2>$at_stder1
at_status=$?
grep '^ *+' $at_stder1 >&2
grep -v '^ *+' $at_stder1 >$at_stderr
at_failed=false
$at_diff $at_devnull $at_stderr || at_failed=:
$at_diff $at_devnull $at_stdout || at_failed=:
case $at_status in
   77) echo 77 > $at_status_file
            exit 77;;
   0) ;;
   *) echo "basic.at:325: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then

  echo 1 > $at_status_file
  exit 1
fi

$at_traceon


	  # As long as we have a file with a few revisions, test
	  # a few "cvs admin -o" invocations.
	  cd sdir/ssdir
	  dotest_fail basica-o1 "${testcvs} admin -o 1.2::1.2" \
"${CPROG} admin: while processing more than one file:
${CPROG} \admin aborted\: attempt to specify a numeric revision"
	  dotest basica-o2 "${testcvs} admin -o 1.2::1.2 ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
done"
	  dotest basica-o2a "${testcvs} admin -o 1.1::NOT_RESERVED ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
done"
	  dotest_fail basica-o2b "${testcvs} admin -o 1.1::NOT_EXIST ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
${SPROG} a-z*: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v: Revision NOT_EXIST doesn't exist.
${SPROG} a-z*: RCS file for .ssfile. not modified\."
	  dotest basica-o3 "${testcvs} admin -o 1.2::1.3 ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
done"
	  dotest basica-o4 "${testcvs} admin -o 3.1:: ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
deleting revision 3\.3
deleting revision 3\.2
done"
	  dotest basica-o5 "${testcvs} admin -o ::1.1 ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
done"
	  dotest basica-o5a "${testcvs} -n admin -o 1.2::3.1 ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
deleting revision 2\.0
deleting revision 1\.3
done"
	  dotest basica-o6 "${testcvs} admin -o 1.2::3.1 ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
deleting revision 2\.0
deleting revision 1\.3
done"
	  dotest basica-o6a "${testcvs} admin -o 3.1.2: ssfile" \
"RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
deleting revision 3\.1\.2\.1
done"
	  dotest basica-o7 "${testcvs} log -N ssfile" "
RCS file: ${CVSROOT_DIR}/project/sdir/ssdir/ssfile,v
Working file: ssfile
head: 3\.1
branch:
locks: strict
access list:
keyword substitution: kv
total revisions: 3;	selected revisions: 3
description:
----------------------------
revision 3\.1
date: 0-9/* 0-9:*;  author: ${username};  state: Exp;  lines: ${PLUS}0 -0
bump-it
----------------------------
revision 1\.2
date: 0-9/* 0-9:*;  author: ${username};  state: Exp;  lines: ${PLUS}1 -0
modify-it
----------------------------
revision 1\.1
date: 0-9/* 0-9:*;  author: ${username};  state: Exp;
add-it
============================================================================="
	  dotest basica-o8 "${testcvs} -q update -p -r 1.1 ./ssfile" "ssfile"
      $at_traceoff
      $at_times_p && times >$at_times_file
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat $at_status_file`
    ;;


  * )
    echo "$as_me: no such test group: $at_group" >&2
    continue
    ;;
  esac

  # Be sure to come back to the suite directory, in particular
  # since below we might `rm' the group directory we are in currently.
  cd $at_suite_dir

  case $at_group in
    banner-*) ;;
    *)
      if test ! -f $at_check_line_file; then
	sed "s/^ */$as_me: warning: /" <<_ATEOF
	A failure happened in a test group before any test could be
	run. This means that test suite is improperly designed.  Please
	report this failure to <bug-cvs@gnu.org>.
_ATEOF
    	echo "$at_setup_line" >$at_check_line_file
      fi
      at_group_count=`expr 1 + $at_group_count`
      $at_verbose $ECHO_N "$at_group. $at_setup_line: $ECHO_C"
      echo $ECHO_N "$at_group. $at_setup_line: $ECHO_C" >> $at_group_log
      case $at_xfail:$at_status in
	yes:0)
	    at_msg="UNEXPECTED PASS"
	    at_xpass_list="$at_xpass_list $at_group"
	    at_errexit=$at_errexit_p
	    ;;
	no:0)
	    at_msg="ok"
	    at_pass_list="$at_pass_list $at_group"
	    at_errexit=false
	    ;;
	*:77)
	    at_msg="skipped (`cat $at_check_line_file`)"
	    at_skip_list="$at_skip_list $at_group"
	    at_errexit=false
	    ;;
	yes:*)
	    at_msg="expected failure (`cat $at_check_line_file`)"
	    at_xfail_list="$at_xfail_list $at_group"
	    at_errexit=false
	    ;;
	no:*)
	    at_msg="FAILED (`cat $at_check_line_file`)"
	    at_fail_list="$at_fail_list $at_group"
	    at_errexit=$at_errexit_p
	    ;;
      esac
      echo $at_msg
      at_log_msg="$at_group. $at_desc ($at_setup_line): $at_msg"
      case $at_status in
	0|77)
	  # $at_times_file is only available if the group succeeded.
	  # We're not including the group log, so the success message
	  # is written in the global log separately.  But we also
	  # write to the group log in case they're using -d.
	  if test -f $at_times_file; then
	    at_log_msg="$at_log_msg	(`sed 1d $at_times_file`)"
	    rm -f $at_times_file
          fi
	  echo "$at_log_msg" >> $at_group_log
	  echo "$at_log_msg" >&5

	  # Cleanup the group directory, unless the user wants the files.
	  $at_debug_p || rm -rf $at_group_dir
	  ;;
	*)
	  # Upon failure, include the log into the testsuite's global
	  # log.  The failure message is written in the group log.  It
	  # is later included in the global log.
	  echo "$at_log_msg" >> $at_group_log

	  # Upon failure, keep the group directory for autopsy, and
	  # create the debugging script.
	  {
	    echo "#! /bin/sh"
	    echo 'test "${ZSH_VERSION+set}" = set && alias -g '\''${1+"$@"}'\''='\''"$@"'\'''
	    echo "cd $at_dir"
	    echo 'exec ${CONFIG_SHELL-'"$SHELL"'}' "$0" \
	         '-v -d' "$at_debug_args" "$at_group" '${1+"$@"}'
	    echo 'exit 1'
	  } >$at_group_dir/run
	  chmod +x $at_group_dir/run
	  $at_errexit && break
	  ;;
      esac
      ;;
  esac
done

# Back to the top directory.
cd $at_dir

# Compute the duration of the suite.
at_stop_date=`date`
at_stop_time=`(date +%s) 2>/dev/null`
echo "$as_me: ending at: $at_stop_date" >&5
at_duration_s=`(expr $at_stop_time - $at_start_time) 2>/dev/null`
at_duration_m=`(expr $at_duration_s / 60) 2>/dev/null`
at_duration_h=`(expr $at_duration_m / 60) 2>/dev/null`
at_duration_s=`(expr $at_duration_s % 60) 2>/dev/null`
at_duration_m=`(expr $at_duration_m % 60) 2>/dev/null`
at_duration="${at_duration_h}h ${at_duration_m}m ${at_duration_s}s"
if test "$at_duration" != "h m s"; then
  echo "$as_me: test suite duration: $at_duration" >&5
fi

# Wrap up the test suite with summary statistics.
at_skip_count=`set dummy $at_skip_list; shift; echo $#`
at_fail_count=`set dummy $at_fail_list; shift; echo $#`
at_xpass_count=`set dummy $at_xpass_list; shift; echo $#`
at_xfail_count=`set dummy $at_xfail_list; shift; echo $#`

at_run_count=`expr $at_group_count - $at_skip_count`
at_unexpected_count=`expr $at_xpass_count + $at_fail_count`
at_total_fail_count=`expr $at_xfail_count + $at_fail_count`

echo
cat <<\_ASBOX
## ------------- ##
## Test results. ##
## ------------- ##
_ASBOX
echo
{
  echo
  cat <<\_ASBOX
## ------------- ##
## Test results. ##
## ------------- ##
_ASBOX
  echo
} >&5

if test $at_run_count = 1; then
  at_result="1 test"
  at_were=was
else
  at_result="$at_run_count tests"
  at_were=were
fi
if $at_errexit_p && test $at_unexpected_count != 0; then
  if test $at_xpass_count = 1; then
    at_result="$at_result $at_were run, one passed"
  else
    at_result="$at_result $at_were run, one failed"
  fi
  at_result="$at_result unexpectedly and inhibited subsequent tests."
else
  # Don't you just love exponential explosion of the number of cases?
  case $at_xpass_count:$at_fail_count:$at_xfail_count in
    # So far, so good.
    0:0:0) at_result="$at_result $at_were successful." ;;
    0:0:*) at_result="$at_result behaved as expected." ;;

    # Some unexpected failures
    0:*:0) at_result="$at_result $at_were run,
$at_fail_count failed unexpectedly." ;;

    # Some failures, both expected and unexpected
    0:*:1) at_result="$at_result $at_were run,
$at_total_fail_count failed ($at_xfail_count expected failure)." ;;
    0:*:*) at_result="$at_result $at_were run,
$at_total_fail_count failed ($at_xfail_count expected failures)." ;;

    # No unexpected failures, but some xpasses
    *:0:*) at_result="$at_result $at_were run,
$at_xpass_count passed unexpectedly." ;;

    # No expected failures, but failures and xpasses
    *:1:0) at_result="$at_result $at_were run,
$at_unexpected_count did not behave as expected ($at_fail_count unexpected failure)." ;;
    *:*:0) at_result="$at_result $at_were run,
$at_unexpected_count did not behave as expected ($at_fail_count unexpected failures)." ;;

    # All of them.
    *:*:1) at_result="$at_result $at_were run,
$at_xpass_count passed unexpectedly,
$at_total_fail_count failed ($at_xfail_count expected failure)." ;;
    *:*:*) at_result="$at_result $at_were run,
$at_xpass_count passed unexpectedly,
$at_total_fail_count failed ($at_xfail_count expected failures)." ;;
  esac

  if test $at_skip_count = 0 && test $at_run_count -gt 1; then
    at_result="All $at_result"
  fi
fi

# Now put skips in the mix.
case $at_skip_count in
  0) ;;
  1) at_result="$at_result
1 test was skipped." ;;
  *) at_result="$at_result
$at_skip_count tests were skipped." ;;
esac

if test $at_unexpected_count = 0; then
  echo "$at_result"
  echo "$at_result" >&5
else
  echo "ERROR: $at_result" >&2
  echo "ERROR: $at_result" >&5
  {
    echo
    cat <<\_ASBOX
## ------------------------ ##
## Summary of the failures. ##
## ------------------------ ##
_ASBOX

    # Summary of failed and skipped tests.
    if test $at_fail_count != 0; then
      echo "Failed tests:"
      $SHELL $0 $at_fail_list --list
      echo
    fi
    if test $at_skip_count != 0; then
      echo "Skipped tests:"
      $SHELL $0 $at_skip_list --list
      echo
    fi
    if test $at_xpass_count != 0; then
      echo "Unexpected passes:"
      $SHELL $0 $at_xpass_list --list
      echo
    fi
    if test $at_fail_count != 0; then
      cat <<\_ASBOX
## ---------------------- ##
## Detailed failed tests. ##
## ---------------------- ##
_ASBOX
      echo
      for at_group in $at_fail_list
      do
        # Normalize the test group number.
        at_group_normalized=`expr "00000$at_group" : ".*\($at_format\)"`
        # Create a fresh directory for the next test group, and enter.
        at_group_dir=$at_suite_dir/$at_group_normalized
        at_group_log=$at_group_dir/$as_me.log
        cat $at_group_log
        echo
      done
      echo
    fi
    if test -n "$at_top_srcdir"; then
      sed 'h;s/./-/g;s/^.../## /;s/...$/ ##/;p;x;p;x' <<_ASBOX
## $at_top_builddir/config.log ##
_ASBOX
      sed 's/^/| /' $at_top_builddir/config.log
      echo
    fi
  } >&5

  sed 'h;s/./-/g;s/^.../## /;s/...$/ ##/;p;x;p;x' <<_ASBOX
## $as_me.log was created. ##
_ASBOX

  echo
  echo "Please send \`$as_me.log' and all information you think might help:"
  echo
  echo "   To: <bug-cvs@gnu.org>"
  echo "   Subject: [Concurrent Versions System (CVS) 1.12.2.1] $as_me:$at_fail_list${at_fail_list:+ failed${at_xpass_list:+,}}$at_xpass_list${at_xpass_list:+ passed unexpectedly}"
  echo
  if test $at_debug_p = false; then
    echo
    echo 'You may investigate any problem if you feel able to do so, in which'
    echo 'case the test suite provides a good starting point.'
    echo
  fi
    exit 1
fi

exit 0


