To run all the tests:

	$ make check

The test suite is currently in a state of transition, as tests are moved from
sanity.sh into the new Autotest test suite.  See the `sanity.sh' and
`Autotest suite' sections below for notes on each.

New tests should be added to the Autotest suite, not sanity.sh.  See `ABOUT
ADDING YOUR OWN TESTS' in the `Autotest suite' section below for more
information.  


* sanity.sh:

New tests should *not* be put in this file.  They should be added to the
Autotest suite.  See `ABOUT ADDING YOUR OWN TESTS' in the `Autotest suite'
section below for more information.

Note that if your /bin/sh doesn't support shell functions, you'll
have to try something like this, where "/bin/sh5" is replaced by the
pathname of a shell which handles normal shell functions:

	$ make SHELL=/bin/sh5 check

Also note that you must be logged in as a regular user, not root.

WARNING:  This test can take quite a while to run, esp. if your
disks are slow or over-loaded.

The tests work in /tmp/cvs-sanity (which the tests create) by default.
If for some reason you want them to work in a different directory, you
can set the TESTDIR environment variable to the desired location
before running them.

The tests use a number of tools (awk, expr, id, tr, etc.) that are not
required for running CVS itself.  In most cases, the standard vendor-
supplied versions of these tools work just fine, but there are some
exceptions -- expr in particular is heavily used and many vendor
versions are deficient in one way or another.  Note that some vendors
provide multiple versions of tools (typically an ancient, traditional
version and a new, standards-conforming version), so you may already
have a usable version even if the default version isn't.  If you don't
have a suitable tool, you can probably get one from the GNU Project (see
http://www.gnu.org).  At this writting, expr and id are both part of the
GNU shellutils package, tr is part of the GNU textutils package, and awk
is part of the GNU gawk package.  The test script tries to verify that
the tools exist and are usable; if not, it tries to find the GNU
versions and use them instead.  If it can't find the GNU versions
either, it will print an error message and, depending on the severity of
the deficiency, it may exit.  There are environment variables you can
set to use a particular version of a tool -- see the test script
(src/sanity.sh) for details.

Some of the tests use fairly long command lines -- this usually isn't a
problem, but if you have a very short command line length limit (or a
lot of environment variables), you may run into trouble.  Also, some of
the tests expect your local timezone to be an integral number of hours
from UTC -- if you usually use a fractional timezone, use a different
(integral) timezone when running the tests to avoid spurious failures.

If running the tests produces the output "FAIL:" followed by the name
of the test that failed, then the details on the failure are in the
file check.log.  If it says "exit status is " followed by a number,
then the exit status of the command under test was not what the test
expected.  If it says "** expected:" followed by a regular expression
followed by "** got:" followed by some text, then the regular
expression is the output which the test expected, and the text is the
output which the command under test actually produced.  In some cases
you'll have to look closely to see how they differ; the debug_check_log
script in the contrib directory can assist in this process.

If output from "make remotecheck" is out of order compared to what is
expected (for example,

   a
   b
   cvs foo: this is a demo

is expected and

   a
   cvs foo: this is a demo
   b

is output), this is probably a well-known bug in the CVS server
(search for "out-of-order" in src/server.c for a comment explaining
the cause).  It is a real pain in running the testsuite, but if you
are lucky and/or your machine is fast and/or lightly loaded, you won't
run into it.  Running the tests again might succeed if the first run
failed in this manner.

For more information on what goes in check.log, and how the tests are
run in general, you'll have to read sanity.sh.  Depending on just what
you are looking for, and how familiar you are with the Bourne shell
and regular expressions, it will range from relatively straightforward
to obscure.

If you choose to submit a bug report based on tests failing, be
aware that, as with all bug reports, you may or may not get a
response, and your odds might be better if you include enough
information to reproduce the bug, an analysis of what is going
wrong (if you have the time to provide one), etc.  The check.log
file is the first place to look.

ABOUT STDOUT AND STDERR
***********************

The sanity.sh test framework combines stdout and stderr and for tests
to pass requires that output appear in the given order.  Some people
suggest that ordering between stdout and stderr should not be
required, or to put it another way, that the out-of-order bug referred
to above, and similar behaviors, should be considered features, or at
least tolerable.  The reasoning behind the current behavior is that
having the output appear in a certain order is the correct behavior
for users using CVS interactively--that users get confused if the
order is unpredictable.


ABOUT ADDING YOUR OWN TESTS
***************************

New tests should *not* be put in `sanity.sh'.  They should be added to the
Autotest suite.  See `ABOUT ADDING YOUR OWN TESTS' in the `Autotest suite'
section below for more information.



* Autotest suite:

The suite prepends `.' and any directories specified via the AUTOTEST_PATH
environment variable to its $PATH, then uses the first executable named `cvs'
it can find in its $PATH by default in order to make it easier to test
installed versions of CVS.

Some details of the test suite can be configured at run time.  Use
`suite --help' for more information on available options.

Note that you must be logged in as a regular user, not root.  (FIXME: This is
yet to be enforced though it would cause problems.)

Tests will create a subdirectory in the current directory named `suite.dir'.
This is where tests will be run.

WARNING:  These tests can take quite a while to run, esp. if your
disks are slow or over-loaded.

The tests use a number of tools (awk, expr, id, tr, etc.) that are not
required for running CVS itself.  In most cases, the standard vendor-
supplied versions of these tools work just fine or are compensated for by
the configure and Autoshell machinery, but there might be some
exceptions -- `id', especially, has been known to cause problems.
Note that some vendors provide multiple versions of tools (typically an
ancient, traditional version and a new, standards-conforming version), so you
may already have a usable version even if the default version isn't.  If you
don't have a suitable tool, you can probably get one from the GNU Project (see
http://www.gnu.org).  At this writting, id is part of the GNU shellutils
package, tr is part of the GNU textutils package, and awk is part of the GNU
gawk package.  The test script tries to verify that the tools exist and are
usable; if not, it tries to find the GNU versions and use them instead.  If it
can't find the GNU versions either, it will print an error message and,
depending on the severity of the deficiency, it may exit.  There are
environment variables you can set to use a particular version of a tool -- see
src/tests/suite.at for details.

Some of the tests use fairly long command lines -- this usually isn't a
problem, but if you have a very short command line length limit (or a
lot of environment variables), you may run into trouble.  Also, some of
the tests expect your local timezone to be an integral number of hours
from UTC -- if you usually use a fractional timezone, use a different
(integral) timezone when running the tests to avoid spurious failures.

When tests fail, information on the failure, including commands run and diffs
beween the expected output and what was actually received can be found in the
suite.log file.  In addition, a more concise log can be found for each
individual failed test in `suite.dir/<test number>/suite.log'.  Only the test
directories of failed tests are saved unless the `--verbose' option is
specified to `suite'.

If you choose to submit a bug report based on tests failing, please include the
full suite.log for the test run (not just the concise version for a particular
test) and be aware that, as with all bug reports, you may or may not get a
response, and your odds might be better if you include an analysis of what is
going wrong.


FIXME
*****

It is worth thinking about how to: have a send-expect type dialog with the
program under test (e.g. see server-7 or pserver-4 which want to talk the CVS
protocol, or the many tests which need to answer the prompt of "cvs release",
e.g. deep-5).



ABOUT ADDING YOUR OWN TESTS
***************************

As stated in the HACKING file, patches are not accepted without documentation
and tests.

Autoconf 2.58 is required to regenerate the test suite.

Writing an Autotest test is much like writing configure.in code for Autoconf.
There are some macros to use, but Bourne Shell will run.  The best place to get
this information from is the "Portable Shell", "Programming in M4sh", and
"Using Autotest" sections of the Autoconf manual, with differences noted below.
When a AT_CVS_<something> is available below for an AT_<something> macro from
the Autoconf manual, please use the AT_CVS_<something> version.


ADDING A TEST FILE
******************

By convention, individual tests are stored in `src/tests/*.at', with the
exception of `suite.at', which is the base file used to gather the tests
together when generating a new test suite.

Each file name should be included in `src/tests/suite.at' using the
AT_CVS_INCLUDE macro.  For instance:

	AT_CVS_INCLUDE([basic.at])

Each included file actually generates four copies of its tests under a single
banner, for each possible combination of local/remote and
link-root/no-link-root (a link-root test uses a symlink to a real CVSROOT in
place of the real CVSROOT).  Each copy of the test gets the appropriate
combination of "local", "remote", "link-root", and "no-link-root" assigned as
keywords as well.


Also by convention, only one "bannered section", meaning a group of test groups
set apart by an ASCII banner is stored in a file.

Each file should begin with a call to AT_CVS_BANNER, similar to:

	AT_CVS_BANNER([Basic functionality])


ADDING A TEST GROUP
*******************

A test group will be run until the first test within it fails.  Each test group
is assigned a number at build time and given its own directory in `suite.dir'
of the form `suite.dir/<test number>' at run time.

To begin a test group, use a call to AT_CVS_SETUP.  For example:

	AT_CVS_SETUP([Operations on empty projects])

This declares the begining of the test, creates a repository in $CVSROOT_DIR
containing project/sdir/ssdir/ssfile,v with a single revision, checks out
project, and changes the current working directory to project.


Optionally, include a call to AT_KEYWORDS containing a space delimited list of
words which could prove useful when selecting subsets of the test suite, like
so:

	AT_KEYWORDS([update diff status])

Both the argument to AT_CVS_SETUP and the arguments to AT_KEYWORDS can be used
to select a subsets of tests from the suite to run using the `--keywords='
argument to the test script.  By default, each test is assigned some
combination of the "local", "remote", "link-root", and "no-link-root" keywords
for each inclusion.


Run tests using AT_CHECK, AT_CHECK_NOESCAPE, AT_CVS_CHECK_ANNOTATE,
AT_CVS_CHECK_LOG, AT_CVS_CHECK_NORMALIZED:

	AT_CHECK		Run a test and compare the result to an
				expected stderr and stdout.  See the Autoconf
				manual for more.

	AT_CHECK_NOESCAPE	Like AT_CHECK, but allow for shell expansion.
				See the Autoconf manual for more.

	AT_CVS_CHECK_ANNOTATE	Like AT_CHECK_NOESCAPE, but normalize the
				result using sed so that `<username> <date>'
				portion of each line is replaced with the
				literal string `USERNAME DATE'.

	AT_CVS_CHECK_LOG	Like AT_CHECK_NOESCAPE, but normalize the
				result to replace dates with the string `DATE'
				and usernames with the string `USERNAME'.

	AT_CVS_CHECK_NORMALIZED	Like AT_CHECK_NOESCAPE, but replace dates of
				the form `cvs diff' outputs with the literal
				string `RFCDATE' and s/^P /U / to account for
				possible differences between `cvs update'
				output between client and server modes.

For example:

	# Test a few operations, to ensure they gracefully do
	# nothing in an empty directory.
	AT_CHECK([cvs -q update])
	AT_CHECK([cvs -q diff -c])
	AT_CHECK([cvs -q status])
	AT_CHECK([cvs -q update .])


End a test group with a call to AT_CLEANUP.  For example:

	AT_CLEANUP # Operations on empty projects

No other cleanup is needed.  The wrapper script will handle test directory
cleanup depending on whether the test group failed and whether the verbose flag
was passed to the test suite.


The following environment variables are available to each test group:

	$at_group_dir	This test group's directory.  AT_CVS_SETUP sets
			$CVSROOT_DIR to `$at_group_dir/cvsroot' and checks
			`project' out into `$at_group_dir/project'.

	$CVSROOT	The CVSROOT string.

	$CVSROOT_DIR	The directory where the repository is stored, or the
			link to it in link-root mode.

	$SPROG		String to match server progname in CVS error messages.
			In local mode, this is the same as $CPROG.

	$CPROG		String to match client progname in CVS error messages.
			Use this to match error messages known to be printed
			only from the CVS client.


Some other macros that may prove useful:

	AT_CVS_REMOTE([TEST-IF-REMOTE],[TEXT-OTHERWISE])
		Expands to TEXT-IF-REMOTE for remote tests and TEXT-OTHERWISE
		otherwise.

	AT_CVS_LOCAL([TEST-IF-LOCAL],[TEXT-OTHERWISE])
		Expands to TEXT-IF-LOCAL for local tests and TEXT-OTHERWISE
		otherwise.


One other tip, if the test groups in a test file like to start from a similar
repository, it can help to use the `m4_defun' macro to define a set of commands
that create the desired repository and call this macro at the start of each
test group.  See AT_CVS_SIMPLE_PROJECT in `basic.at' for an example.


REGENERATING THE TEST SUITE
***************************

Regenerating the test suite requires Autoconf 2.58.

Use `make suite' in the `src/tests' directory or `make check' from the
`src/tests' directory or either of its parents.
